   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"HANcoder_E407_CAN_COMM_TEST.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ByteSwap_x,"ax",%progbits
  21              		.align	2
  22              		.global	ByteSwap_x
  23              		.thumb
  24              		.thumb_func
  26              	ByteSwap_x:
  27              	.LFB112:
  28              		.file 1 "HANcoder_E407_CAN_COMM_TEST.c"
   1:HANcoder_E407_CAN_COMM_TEST.c **** /*
   2:HANcoder_E407_CAN_COMM_TEST.c ****  * Academic License - for use in teaching, academic research, and meeting
   3:HANcoder_E407_CAN_COMM_TEST.c ****  * course requirements at degree granting institutions only.  Not for
   4:HANcoder_E407_CAN_COMM_TEST.c ****  * government, commercial, or other organizational use.
   5:HANcoder_E407_CAN_COMM_TEST.c ****  *
   6:HANcoder_E407_CAN_COMM_TEST.c ****  * File: HANcoder_E407_CAN_COMM_TEST.c
   7:HANcoder_E407_CAN_COMM_TEST.c ****  *
   8:HANcoder_E407_CAN_COMM_TEST.c ****  * Code generated for Simulink model 'HANcoder_E407_CAN_COMM_TEST'.
   9:HANcoder_E407_CAN_COMM_TEST.c ****  *
  10:HANcoder_E407_CAN_COMM_TEST.c ****  * Model version                  : 1.124
  11:HANcoder_E407_CAN_COMM_TEST.c ****  * Simulink Coder version         : 9.0 (R2018b) 24-May-2018
  12:HANcoder_E407_CAN_COMM_TEST.c ****  * C/C++ source code generated on : Tue Feb 15 08:35:59 2022
  13:HANcoder_E407_CAN_COMM_TEST.c ****  *
  14:HANcoder_E407_CAN_COMM_TEST.c ****  * Target selection: ert.tlc
  15:HANcoder_E407_CAN_COMM_TEST.c ****  * Embedded hardware selection: Generic->32-bit Embedded Processor
  16:HANcoder_E407_CAN_COMM_TEST.c ****  * Code generation objectives: Unspecified
  17:HANcoder_E407_CAN_COMM_TEST.c ****  * Validation result: Not run
  18:HANcoder_E407_CAN_COMM_TEST.c ****  */
  19:HANcoder_E407_CAN_COMM_TEST.c **** 
  20:HANcoder_E407_CAN_COMM_TEST.c **** #include "HANcoder_E407_CAN_COMM_TEST.h"
  21:HANcoder_E407_CAN_COMM_TEST.c **** #include "HANcoder_E407_CAN_COMM_TEST_private.h"
  22:HANcoder_E407_CAN_COMM_TEST.c **** 
  23:HANcoder_E407_CAN_COMM_TEST.c **** /* map ByteSwap function */
  24:HANcoder_E407_CAN_COMM_TEST.c **** #define ByteSwap(x)                    (ByteSwap_x((uint8_t *) &x, sizeof(x)))
  25:HANcoder_E407_CAN_COMM_TEST.c **** 
  26:HANcoder_E407_CAN_COMM_TEST.c **** /* Exported block signals */
  27:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_1_CAN1;               /* '<S25>/Switch' */
  28:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_8_CAN1;               /* '<S32>/Switch' */
  29:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_2_CAN1;               /* '<S33>/Switch' */
  30:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_3_CAN1;               /* '<S34>/Switch' */
  31:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_4_CAN1;               /* '<S35>/Switch' */
  32:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_5_CAN1;               /* '<S36>/Switch' */
  33:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_6_CAN1;               /* '<S37>/Switch' */
  34:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_7_CAN1;               /* '<S38>/Switch' */
  35:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_5_CAN2;               /* '<S26>/Switch' */
  36:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_4_CAN2;               /* '<S27>/Switch' */
  37:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_3_CAN2;               /* '<S28>/Switch' */
  38:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_2_CAN2;               /* '<S29>/Switch' */
  39:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_7_CAN2;               /* '<S30>/Switch' */
  40:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_1_CAN2;               /* '<S31>/Switch' */
  41:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_8_CAN2;               /* '<S39>/Switch' */
  42:HANcoder_E407_CAN_COMM_TEST.c **** real_T Rx_Buffer_6_CAN2;               /* '<S40>/Switch' */
  43:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T SI_FreeHeap;                  /* '<S108>/Level-2 M-file S-Function' */
  44:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T SI_FreeStack;                 /* '<S109>/Level-2 M-file S-Function' */
  45:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T constant_ID_TXCAN1;           /* '<S12>/Data Type Conversion3' */
  46:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T constant_ID_TXCAN2;           /* '<S12>/Data Type Conversion4' */
  47:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Tx_ID_CAN1_s;                 /* '<S12>/Data Type Conversion1' */
  48:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Tx_ID_CAN2_s;                 /* '<S12>/Data Type Conversion2' */
  49:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T constant_ID_RXCAN1;           /* '<S10>/Cast' */
  50:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T constant_ID_RXCAN2;           /* '<S10>/Cast1' */
  51:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Rx_ID_CAN2_s;                 /* '<S10>/Constant1' */
  52:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Rx_ID_CAN1_s;                 /* '<S10>/Constant2' */
  53:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T SI_CPUload;                    /* '<S107>/Level-2 M-file S-Function' */
  54:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded5_CAN1;                /* '<S112>/Plus' */
  55:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded6_CAN1;                /* '<S120>/Plus' */
  56:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded4_CAN1;                /* '<S121>/Plus' */
  57:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded7_CAN1;                /* '<S122>/Plus' */
  58:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded8_CAN1;                /* '<S123>/Plus' */
  59:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded3_CAN1;                /* '<S124>/Plus' */
  60:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded2_CAN1;                /* '<S125>/Plus' */
  61:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded1_CAN1;                /* '<S126>/Plus' */
  62:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded2_CAN2;                /* '<S113>/Plus' */
  63:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded3_CAN2;                /* '<S114>/Plus' */
  64:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded4_CAN2;                /* '<S115>/Plus' */
  65:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded5_CAN2;                /* '<S116>/Plus' */
  66:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded6_CAN2;                /* '<S117>/Plus' */
  67:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded7_CAN2;                /* '<S118>/Plus' */
  68:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded8_CAN2;                /* '<S119>/Plus' */
  69:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Tx_coded1_CAN2;                /* '<S127>/Plus' */
  70:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded1_CAN2;                /* '<S42>/In1' */
  71:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded2_CAN2;                /* '<S42>/In2' */
  72:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded3_CAN2;                /* '<S42>/In3' */
  73:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded4_CAN2;                /* '<S42>/In4' */
  74:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded5_CAN2;                /* '<S42>/In5' */
  75:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded6_CAN2;                /* '<S42>/In6' */
  76:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded7_CAN2;                /* '<S42>/In7' */
  77:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded8_CAN2;                /* '<S42>/In8' */
  78:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded1_CAN1;                /* '<S41>/In1' */
  79:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded2_CAN1;                /* '<S41>/In2' */
  80:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded3_CAN1;                /* '<S41>/In3' */
  81:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded4_CAN1;                /* '<S41>/In4' */
  82:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded5_CAN1;                /* '<S41>/In5' */
  83:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded6_CAN1;                /* '<S41>/In6' */
  84:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded7_CAN1;                /* '<S41>/In7' */
  85:HANcoder_E407_CAN_COMM_TEST.c **** uint8_T Rx_coded8_CAN1;                /* '<S41>/In8' */
  86:HANcoder_E407_CAN_COMM_TEST.c **** int8_T new_CAN1;                       /* '<S23>/S-Function' */
  87:HANcoder_E407_CAN_COMM_TEST.c **** int8_T new_CAN2;                       /* '<S24>/S-Function' */
  88:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T WKUP_button;                 /* '<S21>/Level-2 M-file S-Function' */
  89:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T receiver_id;                 /* '<S7>/Level-2 M-file S-Function' */
  90:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T sender_id;                   /* '<S6>/Level-2 M-file S-Function' */
  91:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T LedValue;                    /* '<S2>/Data Type Conversion' */
  92:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF5_CAN1;                    /* '<S112>/LessThanOrEqual' */
  93:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF6_CAN1;                    /* '<S120>/LessThanOrEqual' */
  94:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF4_CAN1;                    /* '<S121>/LessThanOrEqual' */
  95:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF7_CAN1;                    /* '<S122>/LessThanOrEqual' */
  96:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF8_CAN1;                    /* '<S123>/LessThanOrEqual' */
  97:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF3_CAN1;                    /* '<S124>/LessThanOrEqual' */
  98:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF2_CAN1;                    /* '<S125>/LessThanOrEqual' */
  99:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF1_CAN1;                    /* '<S126>/LessThanOrEqual' */
 100:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF2_CAN2;                    /* '<S113>/LessThanOrEqual' */
 101:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF3_CAN2;                    /* '<S114>/LessThanOrEqual' */
 102:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF4_CAN2;                    /* '<S115>/LessThanOrEqual' */
 103:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF5_CAN2;                    /* '<S116>/LessThanOrEqual' */
 104:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF6_CAN2;                    /* '<S117>/LessThanOrEqual' */
 105:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF7_CAN2;                    /* '<S118>/LessThanOrEqual' */
 106:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF8_CAN2;                    /* '<S119>/LessThanOrEqual' */
 107:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T OF1_CAN2;                    /* '<S127>/LessThanOrEqual' */
 108:HANcoder_E407_CAN_COMM_TEST.c **** 
 109:HANcoder_E407_CAN_COMM_TEST.c **** /* Exported block parameters */
 110:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_1_CAN1 = 0.0;         /* Variable: Tx_Buffer_1_CAN1
 111:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude'
 112:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 113:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_1_CAN2 = 0.0;         /* Variable: Tx_Buffer_1_CAN2
 114:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude8'
 115:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 116:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_2_CAN1 = 0.0;         /* Variable: Tx_Buffer_2_CAN1
 117:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude1'
 118:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 119:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_2_CAN2 = 0.0;         /* Variable: Tx_Buffer_2_CAN2
 120:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude9'
 121:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 122:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_3_CAN1 = 0.0;         /* Variable: Tx_Buffer_3_CAN1
 123:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude2'
 124:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 125:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_3_CAN2 = 0.0;         /* Variable: Tx_Buffer_3_CAN2
 126:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude10'
 127:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 128:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_4_CAN1 = 0.0;         /* Variable: Tx_Buffer_4_CAN1
 129:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude3'
 130:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 131:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_4_CAN2 = 0.0;         /* Variable: Tx_Buffer_4_CAN2
 132:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude11'
 133:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 134:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_5_CAN1 = 0.0;         /* Variable: Tx_Buffer_5_CAN1
 135:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude4'
 136:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 137:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_5_CAN2 = 0.0;         /* Variable: Tx_Buffer_5_CAN2
 138:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude12'
 139:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 140:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_6_CAN1 = 0.0;         /* Variable: Tx_Buffer_6_CAN1
 141:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude5'
 142:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 143:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_6_CAN2 = 0.0;         /* Variable: Tx_Buffer_6_CAN2
 144:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude13'
 145:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 146:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_7_CAN1 = 0.0;         /* Variable: Tx_Buffer_7_CAN1
 147:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude6'
 148:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 149:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_7_CAN2 = 0.0;         /* Variable: Tx_Buffer_7_CAN2
 150:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude14'
 151:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 152:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_8_CAN1 = 0.0;         /* Variable: Tx_Buffer_8_CAN1
 153:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude7'
 154:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 155:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Buffer_8_CAN2 = 0.0;         /* Variable: Tx_Buffer_8_CAN2
 156:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/magnitude15'
 157:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 158:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_ID_CAN1 = 0.0;               /* Variable: Tx_ID_CAN1
 159:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant'
 160:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 161:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_ID_CAN2 = 0.0;               /* Variable: Tx_ID_CAN2
 162:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant1'
 163:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 164:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Max_CAN1 = 0.0;              /* Variable: Tx_Max_CAN1
 165:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant2'
 166:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 167:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Max_CAN2 = 0.0;              /* Variable: Tx_Max_CAN2
 168:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant5'
 169:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 170:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Min_CAN1 = 0.0;              /* Variable: Tx_Min_CAN1
 171:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant3'
 172:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 173:HANcoder_E407_CAN_COMM_TEST.c **** real_T Tx_Min_CAN2 = 0.0;              /* Variable: Tx_Min_CAN2
 174:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S12>/Constant6'
 175:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 176:HANcoder_E407_CAN_COMM_TEST.c **** real_T precision_CAN1 = 0.0;           /* Variable: precision_CAN1
 177:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by:
 178:HANcoder_E407_CAN_COMM_TEST.c ****                                         *   '<S10>/Constant3'
 179:HANcoder_E407_CAN_COMM_TEST.c ****                                         *   '<S12>/Constant4'
 180:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 181:HANcoder_E407_CAN_COMM_TEST.c **** real_T precision_CAN2 = 0.0;           /* Variable: precision_CAN2
 182:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by:
 183:HANcoder_E407_CAN_COMM_TEST.c ****                                         *   '<S10>/Constant4'
 184:HANcoder_E407_CAN_COMM_TEST.c ****                                         *   '<S12>/Constant7'
 185:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 186:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Rx_ID_CAN1 = 0U;              /* Variable: Rx_ID_CAN1
 187:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S10>/Constant2'
 188:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 189:HANcoder_E407_CAN_COMM_TEST.c **** uint32_T Rx_ID_CAN2 = 0U;              /* Variable: Rx_ID_CAN2
 190:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S10>/Constant1'
 191:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 192:HANcoder_E407_CAN_COMM_TEST.c **** boolean_T HANtuneOverride = 0;         /* Variable: HANtuneOverride
 193:HANcoder_E407_CAN_COMM_TEST.c ****                                         * Referenced by: '<S2>/Constant'
 194:HANcoder_E407_CAN_COMM_TEST.c ****                                         */
 195:HANcoder_E407_CAN_COMM_TEST.c **** 
 196:HANcoder_E407_CAN_COMM_TEST.c **** /* Block signals (default storage) */
 197:HANcoder_E407_CAN_COMM_TEST.c **** BlockIO rtB;
 198:HANcoder_E407_CAN_COMM_TEST.c **** 
 199:HANcoder_E407_CAN_COMM_TEST.c **** /* Block states (default storage) */
 200:HANcoder_E407_CAN_COMM_TEST.c **** D_Work rtDWork;
 201:HANcoder_E407_CAN_COMM_TEST.c **** 
 202:HANcoder_E407_CAN_COMM_TEST.c **** /* Real-time model */
 203:HANcoder_E407_CAN_COMM_TEST.c **** RT_MODEL rtM_;
 204:HANcoder_E407_CAN_COMM_TEST.c **** RT_MODEL *const rtM = &rtM_;
 205:HANcoder_E407_CAN_COMM_TEST.c **** static void rate_scheduler(void);
 206:HANcoder_E407_CAN_COMM_TEST.c **** static tCanDataTypes canRxData_0_constant_ID_RXCAN1;
 207:HANcoder_E407_CAN_COMM_TEST.c **** static tCanDataTypes canRxData_1_constant_ID_RXCAN2;
 208:HANcoder_E407_CAN_COMM_TEST.c **** static tCanDataTypes canTxData;
 209:HANcoder_E407_CAN_COMM_TEST.c **** 
 210:HANcoder_E407_CAN_COMM_TEST.c **** /*
 211:HANcoder_E407_CAN_COMM_TEST.c ****  * Swaps the values of two bytes.
 212:HANcoder_E407_CAN_COMM_TEST.c ****  * a, b pointers to data values that need swapping
 213:HANcoder_E407_CAN_COMM_TEST.c ****  */
 214:HANcoder_E407_CAN_COMM_TEST.c **** static void swap(unsigned char *a, unsigned char *b)
 215:HANcoder_E407_CAN_COMM_TEST.c **** {
 216:HANcoder_E407_CAN_COMM_TEST.c ****   register char i = *a;
 217:HANcoder_E407_CAN_COMM_TEST.c ****   *a = *b;
 218:HANcoder_E407_CAN_COMM_TEST.c ****   *b = i;
 219:HANcoder_E407_CAN_COMM_TEST.c **** }                                      /*** end of swap ***/
 220:HANcoder_E407_CAN_COMM_TEST.c **** 
 221:HANcoder_E407_CAN_COMM_TEST.c **** /*
 222:HANcoder_E407_CAN_COMM_TEST.c ****  * Swaps all bytes in b. Typically used to fix endianes.
 223:HANcoder_E407_CAN_COMM_TEST.c ****  * b pointer to data with bytes to swap
 224:HANcoder_E407_CAN_COMM_TEST.c ****  * n number of bytes to swap
 225:HANcoder_E407_CAN_COMM_TEST.c ****  */
 226:HANcoder_E407_CAN_COMM_TEST.c **** void ByteSwap_x(uint8_t *b, size_t n)
 227:HANcoder_E407_CAN_COMM_TEST.c **** {
  29              		.loc 1 227 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 228:HANcoder_E407_CAN_COMM_TEST.c ****   int i = 0;
 229:HANcoder_E407_CAN_COMM_TEST.c ****   int j = n-1;
  35              		.loc 1 229 0
  36 0000 4B1E     		subs	r3, r1, #1
  37              	.LVL1:
 230:HANcoder_E407_CAN_COMM_TEST.c ****   while (i<j) {
  38              		.loc 1 230 0
  39 0002 002B     		cmp	r3, #0
  40 0004 11DD     		ble	.L8
 227:HANcoder_E407_CAN_COMM_TEST.c ****   int i = 0;
  41              		.loc 1 227 0
  42 0006 70B4     		push	{r4, r5, r6}
  43              		.cfi_def_cfa_offset 12
  44              		.cfi_offset 4, -12
  45              		.cfi_offset 5, -8
  46              		.cfi_offset 6, -4
  47 0008 441E     		subs	r4, r0, #1
  48 000a 0144     		add	r1, r1, r0
  49              	.LVL2:
  50              		.loc 1 230 0
  51 000c 0022     		movs	r2, #0
  52 000e 2046     		mov	r0, r4
  53              	.LVL3:
  54              	.L3:
 231:HANcoder_E407_CAN_COMM_TEST.c ****     swap(&b[i], &b[j]);
 232:HANcoder_E407_CAN_COMM_TEST.c ****     i++, j--;
  55              		.loc 1 232 0
  56 0010 0132     		adds	r2, r2, #1
  57              	.LVL4:
  58 0012 013B     		subs	r3, r3, #1
  59              	.LVL5:
  60              	.LBB102:
  61              	.LBB103:
 216:HANcoder_E407_CAN_COMM_TEST.c ****   *a = *b;
  62              		.loc 1 216 0
  63 0014 14F8015F 		ldrb	r5, [r4, #1]!	@ zero_extendqisi2
  64              	.LVL6:
 217:HANcoder_E407_CAN_COMM_TEST.c ****   *b = i;
  65              		.loc 1 217 0
  66 0018 11F8016C 		ldrb	r6, [r1, #-1]	@ zero_extendqisi2
  67 001c 00F8016F 		strb	r6, [r0, #1]!
  68              	.LBE103:
  69              	.LBE102:
 230:HANcoder_E407_CAN_COMM_TEST.c ****     swap(&b[i], &b[j]);
  70              		.loc 1 230 0
  71 0020 9A42     		cmp	r2, r3
  72              	.LBB105:
  73              	.LBB104:
 218:HANcoder_E407_CAN_COMM_TEST.c **** }                                      /*** end of swap ***/
  74              		.loc 1 218 0
  75 0022 01F8015D 		strb	r5, [r1, #-1]!
  76              	.LVL7:
  77              	.LBE104:
  78              	.LBE105:
 230:HANcoder_E407_CAN_COMM_TEST.c ****     swap(&b[i], &b[j]);
  79              		.loc 1 230 0
  80 0026 F3DB     		blt	.L3
 233:HANcoder_E407_CAN_COMM_TEST.c ****   }
 234:HANcoder_E407_CAN_COMM_TEST.c **** }
  81              		.loc 1 234 0
  82 0028 70BC     		pop	{r4, r5, r6}
  83              		.cfi_restore 6
  84              		.cfi_restore 5
  85              		.cfi_restore 4
  86              		.cfi_def_cfa_offset 0
  87              	.LVL8:
  88              	.L8:
  89 002a 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE112:
  93              		.section	.text.BitShift,"ax",%progbits
  94              		.align	2
  95              		.global	BitShift
  96              		.thumb
  97              		.thumb_func
  99              	BitShift:
 100              	.LFB114:
 235:HANcoder_E407_CAN_COMM_TEST.c **** 
 236:HANcoder_E407_CAN_COMM_TEST.c **** /*
 237:HANcoder_E407_CAN_COMM_TEST.c ****  *   This function updates active task flag for each subrate.
 238:HANcoder_E407_CAN_COMM_TEST.c ****  * The function is called at model base rate, hence the
 239:HANcoder_E407_CAN_COMM_TEST.c ****  * generated code self-manages all its subrates.
 240:HANcoder_E407_CAN_COMM_TEST.c ****  */
 241:HANcoder_E407_CAN_COMM_TEST.c **** static void rate_scheduler(void)
 242:HANcoder_E407_CAN_COMM_TEST.c **** {
 243:HANcoder_E407_CAN_COMM_TEST.c ****   /* Compute which subrates run during the next base time step.  Subrates
 244:HANcoder_E407_CAN_COMM_TEST.c ****    * are an integer multiple of the base rate counter.  Therefore, the subtask
 245:HANcoder_E407_CAN_COMM_TEST.c ****    * counter is reset when it reaches its limit (zero means run).
 246:HANcoder_E407_CAN_COMM_TEST.c ****    */
 247:HANcoder_E407_CAN_COMM_TEST.c ****   (rtM->Timing.TaskCounters.TID[1])++;
 248:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 249:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[1] = 0;
 250:HANcoder_E407_CAN_COMM_TEST.c ****   }
 251:HANcoder_E407_CAN_COMM_TEST.c **** 
 252:HANcoder_E407_CAN_COMM_TEST.c ****   (rtM->Timing.TaskCounters.TID[2])++;
 253:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[2]) > 19) {/* Sample time: [0.2s, 0.0s] */
 254:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[2] = 0;
 255:HANcoder_E407_CAN_COMM_TEST.c ****   }
 256:HANcoder_E407_CAN_COMM_TEST.c **** }
 257:HANcoder_E407_CAN_COMM_TEST.c **** 
 258:HANcoder_E407_CAN_COMM_TEST.c **** /*
 259:HANcoder_E407_CAN_COMM_TEST.c ****  * Output and update for atomic system:
 260:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S25>/Bit Shift'
 261:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S26>/Bit Shift'
 262:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S27>/Bit Shift'
 263:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S28>/Bit Shift'
 264:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S29>/Bit Shift'
 265:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S30>/Bit Shift'
 266:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S31>/Bit Shift'
 267:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S32>/Bit Shift'
 268:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S33>/Bit Shift'
 269:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S34>/Bit Shift'
 270:HANcoder_E407_CAN_COMM_TEST.c ****  *    ...
 271:HANcoder_E407_CAN_COMM_TEST.c ****  */
 272:HANcoder_E407_CAN_COMM_TEST.c **** void BitShift(uint8_T rtu_u, rtB_BitShift *localB)
 273:HANcoder_E407_CAN_COMM_TEST.c **** {
 101              		.loc 1 273 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL9:
 274:HANcoder_E407_CAN_COMM_TEST.c ****   /* MATLAB Function: '<S43>/bit_shift' */
 275:HANcoder_E407_CAN_COMM_TEST.c ****   /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S45>:1' */
 276:HANcoder_E407_CAN_COMM_TEST.c ****   /* '<S45>:1:8' */
 277:HANcoder_E407_CAN_COMM_TEST.c ****   localB->y = (uint8_T)((uint32_T)rtu_u >> 7);
 107              		.loc 1 277 0
 108 0000 C009     		lsrs	r0, r0, #7
 109              	.LVL10:
 110 0002 0870     		strb	r0, [r1]
 111 0004 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE114:
 115 0006 00BF     		.section	.text.BitShift1,"ax",%progbits
 116              		.align	2
 117              		.global	BitShift1
 118              		.thumb
 119              		.thumb_func
 121              	BitShift1:
 122              	.LFB115:
 278:HANcoder_E407_CAN_COMM_TEST.c **** }
 279:HANcoder_E407_CAN_COMM_TEST.c **** 
 280:HANcoder_E407_CAN_COMM_TEST.c **** /*
 281:HANcoder_E407_CAN_COMM_TEST.c ****  * Output and update for atomic system:
 282:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S25>/Bit Shift1'
 283:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S26>/Bit Shift1'
 284:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S27>/Bit Shift1'
 285:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S28>/Bit Shift1'
 286:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S29>/Bit Shift1'
 287:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S30>/Bit Shift1'
 288:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S31>/Bit Shift1'
 289:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S32>/Bit Shift1'
 290:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S33>/Bit Shift1'
 291:HANcoder_E407_CAN_COMM_TEST.c ****  *    '<S34>/Bit Shift1'
 292:HANcoder_E407_CAN_COMM_TEST.c ****  *    ...
 293:HANcoder_E407_CAN_COMM_TEST.c ****  */
 294:HANcoder_E407_CAN_COMM_TEST.c **** void BitShift1(uint8_T rtu_u, rtB_BitShift1 *localB)
 295:HANcoder_E407_CAN_COMM_TEST.c **** {
 123              		.loc 1 295 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
 128              	.LVL11:
 296:HANcoder_E407_CAN_COMM_TEST.c ****   /* MATLAB Function: '<S44>/bit_shift' */
 297:HANcoder_E407_CAN_COMM_TEST.c ****   /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S46>:1' */
 298:HANcoder_E407_CAN_COMM_TEST.c ****   /* '<S46>:1:6' */
 299:HANcoder_E407_CAN_COMM_TEST.c ****   localB->y = (uint8_T)(rtu_u << 7);
 129              		.loc 1 299 0
 130 0000 C001     		lsls	r0, r0, #7
 131              	.LVL12:
 132 0002 0870     		strb	r0, [r1]
 133 0004 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE115:
 137              		.global	__aeabi_i2d
 138              		.global	__aeabi_ddiv
 139              		.global	__aeabi_dcmplt
 140              		.global	__aeabi_dmul
 141              		.global	__aeabi_dsub
 142              		.global	__aeabi_dadd
 143              		.global	__aeabi_dcmpge
 144              		.global	__aeabi_d2uiz
 145 0006 00BF     		.section	.text.HANcoder_E407_CAN_COMM_TEST_step,"ax",%progbits
 146              		.align	2
 147              		.global	HANcoder_E407_CAN_COMM_TEST_step
 148              		.thumb
 149              		.thumb_func
 151              	HANcoder_E407_CAN_COMM_TEST_step:
 152              	.LFB116:
 300:HANcoder_E407_CAN_COMM_TEST.c **** }
 301:HANcoder_E407_CAN_COMM_TEST.c **** 
 302:HANcoder_E407_CAN_COMM_TEST.c **** /* Model step function */
 303:HANcoder_E407_CAN_COMM_TEST.c **** void HANcoder_E407_CAN_COMM_TEST_step(void)
 304:HANcoder_E407_CAN_COMM_TEST.c **** {
 153              		.loc 1 304 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 56
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 158              		.cfi_def_cfa_offset 36
 159              		.cfi_offset 4, -36
 160              		.cfi_offset 5, -32
 161              		.cfi_offset 6, -28
 162              		.cfi_offset 7, -24
 163              		.cfi_offset 8, -20
 164              		.cfi_offset 9, -16
 165              		.cfi_offset 10, -12
 166              		.cfi_offset 11, -8
 167              		.cfi_offset 14, -4
 305:HANcoder_E407_CAN_COMM_TEST.c ****   /* local block i/o variables */
 306:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o2;
 307:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o3;
 308:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o4;
 309:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o5;
 310:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o6;
 311:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o7;
 312:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o8;
 313:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o9;
 314:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o2_e;
 315:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o3_a;
 316:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o4_k;
 317:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o5_i;
 318:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o6_p;
 319:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o7_l;
 320:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o8_j;
 321:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_SFunction_o9_d;
 322:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Output;
 323:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Switch2;
 324:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Power2;
 325:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Fix;
 326:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Fix1;
 327:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Minus;
 328:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_FixPtSum1;
 329:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_FixPtSum1_b;
 330:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast;
 331:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_hi;
 332:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_lf;
 333:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_n;
 334:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_p;
 335:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_l;
 336:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_e4;
 337:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_eg;
 338:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_h;
 339:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_ga;
 340:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_o;
 341:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_f;
 342:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_k2;
 343:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_m;
 344:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_g;
 345:HANcoder_E407_CAN_COMM_TEST.c ****   uint8_T rtb_Cast_k;
 346:HANcoder_E407_CAN_COMM_TEST.c ****   real_T rtb_Fix1_tmp;
 347:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[1] == 0) {
 168              		.loc 1 347 0
 169 0004 DFF8C8A0 		ldr	r10, .L420+24
 170 0008 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 304:HANcoder_E407_CAN_COMM_TEST.c ****   /* local block i/o variables */
 171              		.loc 1 304 0
 172 000c 91B0     		sub	sp, sp, #68
 173              		.cfi_def_cfa_offset 104
 174              		.loc 1 347 0
 175 000e 002B     		cmp	r3, #0
 176 0010 62D0     		beq	.L333
 348:HANcoder_E407_CAN_COMM_TEST.c ****     /* M-S-Function: '<S21>/Level-2 M-file S-Function' */
 349:HANcoder_E407_CAN_COMM_TEST.c ****     /* read from digital input */
 350:HANcoder_E407_CAN_COMM_TEST.c ****     WKUP_button = DiginGet(DIGIN_PORTA_PIN0);
 351:HANcoder_E407_CAN_COMM_TEST.c **** 
 352:HANcoder_E407_CAN_COMM_TEST.c ****     /* M-S-Function: '<S7>/Level-2 M-file S-Function' */
 353:HANcoder_E407_CAN_COMM_TEST.c ****     /* read from digital input */
 354:HANcoder_E407_CAN_COMM_TEST.c ****     receiver_id = DiginGet(DIGIN_PORTE_PIN4);
 355:HANcoder_E407_CAN_COMM_TEST.c **** 
 356:HANcoder_E407_CAN_COMM_TEST.c ****     /* Outputs for Enabled SubSystem: '<S1>/Rx CAN' incorporates:
 357:HANcoder_E407_CAN_COMM_TEST.c ****      *  EnablePort: '<S10>/Enable'
 358:HANcoder_E407_CAN_COMM_TEST.c ****      */
 359:HANcoder_E407_CAN_COMM_TEST.c ****     /* Logic: '<S1>/AND1' incorporates:
 360:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S10>/Constant1'
 361:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S10>/Constant2'
 362:HANcoder_E407_CAN_COMM_TEST.c ****      */
 363:HANcoder_E407_CAN_COMM_TEST.c ****     if (WKUP_button && receiver_id) {
 364:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.RxCAN_MODE) {
 365:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.RxCAN_MODE = true;
 366:HANcoder_E407_CAN_COMM_TEST.c ****       }
 367:HANcoder_E407_CAN_COMM_TEST.c **** 
 368:HANcoder_E407_CAN_COMM_TEST.c ****       /* M-S-Function: '<S23>/S-Function' */
 369:HANcoder_E407_CAN_COMM_TEST.c **** 
 370:HANcoder_E407_CAN_COMM_TEST.c ****       /* read the message data and store the new parameter */
 371:HANcoder_E407_CAN_COMM_TEST.c ****       new_CAN1 = CanIoGetMessage(0, constant_ID_RXCAN1, NULL,
 372:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_0_constant_ID_RXCAN1.uint8_T_info[0], NULL);
 373:HANcoder_E407_CAN_COMM_TEST.c **** 
 374:HANcoder_E407_CAN_COMM_TEST.c ****       /* process the message data */
 375:HANcoder_E407_CAN_COMM_TEST.c ****       if (new_CAN1 > 0) {
 376:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 377:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o2 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[0];
 378:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o3 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[1];
 379:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o4 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[2];
 380:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o5 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[3];
 381:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o6 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[4];
 382:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o7 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[5];
 383:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o8 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[6];
 384:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o9 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[7];
 385:HANcoder_E407_CAN_COMM_TEST.c ****       }
 386:HANcoder_E407_CAN_COMM_TEST.c **** 
 387:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Enabled SubSystem: '<S23>/Enabled Subsystem' incorporates:
 388:HANcoder_E407_CAN_COMM_TEST.c ****        *  EnablePort: '<S41>/Enable'
 389:HANcoder_E407_CAN_COMM_TEST.c ****        */
 390:HANcoder_E407_CAN_COMM_TEST.c ****       if (new_CAN1 > 0) {
 391:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded1_CAN1 = rtb_SFunction_o2;
 392:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN1 = rtb_SFunction_o3;
 393:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN1 = rtb_SFunction_o4;
 394:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN1 = rtb_SFunction_o5;
 395:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN1 = rtb_SFunction_o6;
 396:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN1 = rtb_SFunction_o7;
 397:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN1 = rtb_SFunction_o8;
 398:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN1 = rtb_SFunction_o9;
 399:HANcoder_E407_CAN_COMM_TEST.c ****       }
 400:HANcoder_E407_CAN_COMM_TEST.c **** 
 401:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S23>/Enabled Subsystem' */
 402:HANcoder_E407_CAN_COMM_TEST.c **** 
 403:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S25>/Bit Shift' */
 404:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded1_CAN1, &rtB.BitShift_d);
 405:HANcoder_E407_CAN_COMM_TEST.c **** 
 406:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S25>/Bit Shift' */
 407:HANcoder_E407_CAN_COMM_TEST.c **** 
 408:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S25>/Bit Shift1' */
 409:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_d.y, &rtB.BitShift1_e);
 410:HANcoder_E407_CAN_COMM_TEST.c **** 
 411:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S25>/Bit Shift1' */
 412:HANcoder_E407_CAN_COMM_TEST.c **** 
 413:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S25>/Minus' incorporates:
 414:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S25>/Cast1'
 415:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In1'
 416:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In2'
 417:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In3'
 418:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In4'
 419:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In5'
 420:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In6'
 421:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In7'
 422:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S41>/In8'
 423:HANcoder_E407_CAN_COMM_TEST.c ****        */
 424:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded1_CAN1 - rtB.BitShift1_e.y;
 425:HANcoder_E407_CAN_COMM_TEST.c **** 
 426:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S25>/Power1' incorporates:
 427:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 428:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S25>/Constant2'
 429:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S32>/Power1'
 430:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S33>/Power1'
 431:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S34>/Power1'
 432:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S35>/Power1'
 433:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S36>/Power1'
 434:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S37>/Power1'
 435:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S38>/Power1'
 436:HANcoder_E407_CAN_COMM_TEST.c ****        */
 437:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = floor(precision_CAN1);
 438:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 439:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 440:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 441:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 442:HANcoder_E407_CAN_COMM_TEST.c ****       }
 443:HANcoder_E407_CAN_COMM_TEST.c **** 
 444:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S25>/Power1' */
 445:HANcoder_E407_CAN_COMM_TEST.c **** 
 446:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S25>/Divide' */
 447:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 448:HANcoder_E407_CAN_COMM_TEST.c **** 
 449:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S25>/Fix1' */
 450:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 451:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 452:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 453:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 454:HANcoder_E407_CAN_COMM_TEST.c ****       }
 455:HANcoder_E407_CAN_COMM_TEST.c **** 
 456:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S25>/Fix1' */
 457:HANcoder_E407_CAN_COMM_TEST.c **** 
 458:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S25>/Minus1' incorporates:
 459:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S25>/Multiply1'
 460:HANcoder_E407_CAN_COMM_TEST.c ****        */
 461:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 462:HANcoder_E407_CAN_COMM_TEST.c **** 
 463:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S25>/Gain' incorporates:
 464:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 465:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S32>/Gain'
 466:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S33>/Gain'
 467:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S34>/Gain'
 468:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S35>/Gain'
 469:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S36>/Gain'
 470:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S37>/Gain'
 471:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S38>/Gain'
 472:HANcoder_E407_CAN_COMM_TEST.c ****        */
 473:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
 474:HANcoder_E407_CAN_COMM_TEST.c **** 
 475:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S25>/Power' incorporates:
 476:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S25>/Constant1'
 477:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S25>/Gain'
 478:HANcoder_E407_CAN_COMM_TEST.c ****        */
 479:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 480:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 481:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 482:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 483:HANcoder_E407_CAN_COMM_TEST.c ****       }
 484:HANcoder_E407_CAN_COMM_TEST.c **** 
 485:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S25>/Power' */
 486:HANcoder_E407_CAN_COMM_TEST.c **** 
 487:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S25>/Switch' incorporates:
 488:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S25>/Gain1'
 489:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S25>/Multiply'
 490:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S25>/Minus2'
 491:HANcoder_E407_CAN_COMM_TEST.c ****        */
 492:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_d.y > ((uint8_T)0U)) {
 493:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 494:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 495:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 496:HANcoder_E407_CAN_COMM_TEST.c ****       }
 497:HANcoder_E407_CAN_COMM_TEST.c **** 
 498:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S25>/Switch' */
 499:HANcoder_E407_CAN_COMM_TEST.c **** 
 500:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S32>/Bit Shift' */
 501:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded8_CAN1, &rtB.BitShift_o);
 502:HANcoder_E407_CAN_COMM_TEST.c **** 
 503:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S32>/Bit Shift' */
 504:HANcoder_E407_CAN_COMM_TEST.c **** 
 505:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S32>/Bit Shift1' */
 506:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_o.y, &rtB.BitShift1_f);
 507:HANcoder_E407_CAN_COMM_TEST.c **** 
 508:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S32>/Bit Shift1' */
 509:HANcoder_E407_CAN_COMM_TEST.c **** 
 510:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S32>/Minus' incorporates:
 511:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S32>/Cast1'
 512:HANcoder_E407_CAN_COMM_TEST.c ****        */
 513:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded8_CAN1 - rtB.BitShift1_f.y;
 514:HANcoder_E407_CAN_COMM_TEST.c **** 
 515:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S32>/Power1' incorporates:
 516:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 517:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S32>/Constant2'
 518:HANcoder_E407_CAN_COMM_TEST.c ****        */
 519:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 520:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 521:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 522:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 523:HANcoder_E407_CAN_COMM_TEST.c ****       }
 524:HANcoder_E407_CAN_COMM_TEST.c **** 
 525:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S32>/Divide' */
 526:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 527:HANcoder_E407_CAN_COMM_TEST.c **** 
 528:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S32>/Fix1' */
 529:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 530:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 531:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 532:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 533:HANcoder_E407_CAN_COMM_TEST.c ****       }
 534:HANcoder_E407_CAN_COMM_TEST.c **** 
 535:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S32>/Fix1' */
 536:HANcoder_E407_CAN_COMM_TEST.c **** 
 537:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S32>/Minus1' incorporates:
 538:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S32>/Multiply1'
 539:HANcoder_E407_CAN_COMM_TEST.c ****        */
 540:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 541:HANcoder_E407_CAN_COMM_TEST.c **** 
 542:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S32>/Power' incorporates:
 543:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S32>/Constant1'
 544:HANcoder_E407_CAN_COMM_TEST.c ****        */
 545:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 546:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 547:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 548:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 549:HANcoder_E407_CAN_COMM_TEST.c ****       }
 550:HANcoder_E407_CAN_COMM_TEST.c **** 
 551:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S32>/Power' */
 552:HANcoder_E407_CAN_COMM_TEST.c **** 
 553:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S32>/Switch' incorporates:
 554:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S32>/Gain1'
 555:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S32>/Multiply'
 556:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S32>/Minus2'
 557:HANcoder_E407_CAN_COMM_TEST.c ****        */
 558:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_o.y > ((uint8_T)0U)) {
 559:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 560:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 561:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 562:HANcoder_E407_CAN_COMM_TEST.c ****       }
 563:HANcoder_E407_CAN_COMM_TEST.c **** 
 564:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S32>/Switch' */
 565:HANcoder_E407_CAN_COMM_TEST.c **** 
 566:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S33>/Bit Shift' */
 567:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded2_CAN1, &rtB.BitShift_pe);
 568:HANcoder_E407_CAN_COMM_TEST.c **** 
 569:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S33>/Bit Shift' */
 570:HANcoder_E407_CAN_COMM_TEST.c **** 
 571:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S33>/Bit Shift1' */
 572:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_pe.y, &rtB.BitShift1_m);
 573:HANcoder_E407_CAN_COMM_TEST.c **** 
 574:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S33>/Bit Shift1' */
 575:HANcoder_E407_CAN_COMM_TEST.c **** 
 576:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S33>/Minus' incorporates:
 577:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S33>/Cast1'
 578:HANcoder_E407_CAN_COMM_TEST.c ****        */
 579:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded2_CAN1 - rtB.BitShift1_m.y;
 580:HANcoder_E407_CAN_COMM_TEST.c **** 
 581:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S33>/Power1' incorporates:
 582:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 583:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S33>/Constant2'
 584:HANcoder_E407_CAN_COMM_TEST.c ****        */
 585:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 586:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 587:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 588:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 589:HANcoder_E407_CAN_COMM_TEST.c ****       }
 590:HANcoder_E407_CAN_COMM_TEST.c **** 
 591:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S33>/Divide' */
 592:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 593:HANcoder_E407_CAN_COMM_TEST.c **** 
 594:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S33>/Fix1' */
 595:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 596:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 597:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 598:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 599:HANcoder_E407_CAN_COMM_TEST.c ****       }
 600:HANcoder_E407_CAN_COMM_TEST.c **** 
 601:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S33>/Fix1' */
 602:HANcoder_E407_CAN_COMM_TEST.c **** 
 603:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S33>/Minus1' incorporates:
 604:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S33>/Multiply1'
 605:HANcoder_E407_CAN_COMM_TEST.c ****        */
 606:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 607:HANcoder_E407_CAN_COMM_TEST.c **** 
 608:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S33>/Power' incorporates:
 609:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S33>/Constant1'
 610:HANcoder_E407_CAN_COMM_TEST.c ****        */
 611:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 612:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 613:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 614:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 615:HANcoder_E407_CAN_COMM_TEST.c ****       }
 616:HANcoder_E407_CAN_COMM_TEST.c **** 
 617:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S33>/Power' */
 618:HANcoder_E407_CAN_COMM_TEST.c **** 
 619:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S33>/Switch' incorporates:
 620:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S33>/Gain1'
 621:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S33>/Multiply'
 622:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S33>/Minus2'
 623:HANcoder_E407_CAN_COMM_TEST.c ****        */
 624:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_pe.y > ((uint8_T)0U)) {
 625:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 626:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 627:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 628:HANcoder_E407_CAN_COMM_TEST.c ****       }
 629:HANcoder_E407_CAN_COMM_TEST.c **** 
 630:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S33>/Switch' */
 631:HANcoder_E407_CAN_COMM_TEST.c **** 
 632:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S34>/Bit Shift' */
 633:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded3_CAN1, &rtB.BitShift_c);
 634:HANcoder_E407_CAN_COMM_TEST.c **** 
 635:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S34>/Bit Shift' */
 636:HANcoder_E407_CAN_COMM_TEST.c **** 
 637:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S34>/Bit Shift1' */
 638:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_c.y, &rtB.BitShift1_mc);
 639:HANcoder_E407_CAN_COMM_TEST.c **** 
 640:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S34>/Bit Shift1' */
 641:HANcoder_E407_CAN_COMM_TEST.c **** 
 642:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S34>/Minus' incorporates:
 643:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S34>/Cast1'
 644:HANcoder_E407_CAN_COMM_TEST.c ****        */
 645:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded3_CAN1 - rtB.BitShift1_mc.y;
 646:HANcoder_E407_CAN_COMM_TEST.c **** 
 647:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S34>/Power1' incorporates:
 648:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 649:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S34>/Constant2'
 650:HANcoder_E407_CAN_COMM_TEST.c ****        */
 651:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 652:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 653:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 654:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 655:HANcoder_E407_CAN_COMM_TEST.c ****       }
 656:HANcoder_E407_CAN_COMM_TEST.c **** 
 657:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S34>/Divide' */
 658:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 659:HANcoder_E407_CAN_COMM_TEST.c **** 
 660:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S34>/Fix1' */
 661:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 662:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 663:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 664:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 665:HANcoder_E407_CAN_COMM_TEST.c ****       }
 666:HANcoder_E407_CAN_COMM_TEST.c **** 
 667:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S34>/Fix1' */
 668:HANcoder_E407_CAN_COMM_TEST.c **** 
 669:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S34>/Minus1' incorporates:
 670:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S34>/Multiply1'
 671:HANcoder_E407_CAN_COMM_TEST.c ****        */
 672:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 673:HANcoder_E407_CAN_COMM_TEST.c **** 
 674:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S34>/Power' incorporates:
 675:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S34>/Constant1'
 676:HANcoder_E407_CAN_COMM_TEST.c ****        */
 677:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 678:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 679:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 680:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 681:HANcoder_E407_CAN_COMM_TEST.c ****       }
 682:HANcoder_E407_CAN_COMM_TEST.c **** 
 683:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S34>/Power' */
 684:HANcoder_E407_CAN_COMM_TEST.c **** 
 685:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S34>/Switch' incorporates:
 686:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S34>/Gain1'
 687:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S34>/Multiply'
 688:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S34>/Minus2'
 689:HANcoder_E407_CAN_COMM_TEST.c ****        */
 690:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_c.y > ((uint8_T)0U)) {
 691:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 692:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 693:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 694:HANcoder_E407_CAN_COMM_TEST.c ****       }
 695:HANcoder_E407_CAN_COMM_TEST.c **** 
 696:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S34>/Switch' */
 697:HANcoder_E407_CAN_COMM_TEST.c **** 
 698:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S35>/Bit Shift' */
 699:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded4_CAN1, &rtB.BitShift_of);
 700:HANcoder_E407_CAN_COMM_TEST.c **** 
 701:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S35>/Bit Shift' */
 702:HANcoder_E407_CAN_COMM_TEST.c **** 
 703:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S35>/Bit Shift1' */
 704:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_of.y, &rtB.BitShift1_bk);
 705:HANcoder_E407_CAN_COMM_TEST.c **** 
 706:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S35>/Bit Shift1' */
 707:HANcoder_E407_CAN_COMM_TEST.c **** 
 708:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S35>/Minus' incorporates:
 709:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S35>/Cast1'
 710:HANcoder_E407_CAN_COMM_TEST.c ****        */
 711:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded4_CAN1 - rtB.BitShift1_bk.y;
 712:HANcoder_E407_CAN_COMM_TEST.c **** 
 713:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S35>/Power1' incorporates:
 714:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 715:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S35>/Constant2'
 716:HANcoder_E407_CAN_COMM_TEST.c ****        */
 717:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 718:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 719:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 720:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 721:HANcoder_E407_CAN_COMM_TEST.c ****       }
 722:HANcoder_E407_CAN_COMM_TEST.c **** 
 723:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S35>/Divide' */
 724:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 725:HANcoder_E407_CAN_COMM_TEST.c **** 
 726:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S35>/Fix1' */
 727:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 728:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 729:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 730:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 731:HANcoder_E407_CAN_COMM_TEST.c ****       }
 732:HANcoder_E407_CAN_COMM_TEST.c **** 
 733:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S35>/Fix1' */
 734:HANcoder_E407_CAN_COMM_TEST.c **** 
 735:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S35>/Minus1' incorporates:
 736:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S35>/Multiply1'
 737:HANcoder_E407_CAN_COMM_TEST.c ****        */
 738:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 739:HANcoder_E407_CAN_COMM_TEST.c **** 
 740:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S35>/Power' incorporates:
 741:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S35>/Constant1'
 742:HANcoder_E407_CAN_COMM_TEST.c ****        */
 743:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 744:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 745:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 746:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 747:HANcoder_E407_CAN_COMM_TEST.c ****       }
 748:HANcoder_E407_CAN_COMM_TEST.c **** 
 749:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S35>/Power' */
 750:HANcoder_E407_CAN_COMM_TEST.c **** 
 751:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S35>/Switch' incorporates:
 752:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S35>/Gain1'
 753:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S35>/Multiply'
 754:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S35>/Minus2'
 755:HANcoder_E407_CAN_COMM_TEST.c ****        */
 756:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_of.y > ((uint8_T)0U)) {
 757:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 758:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 759:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 760:HANcoder_E407_CAN_COMM_TEST.c ****       }
 761:HANcoder_E407_CAN_COMM_TEST.c **** 
 762:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S35>/Switch' */
 763:HANcoder_E407_CAN_COMM_TEST.c **** 
 764:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S36>/Bit Shift' */
 765:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded5_CAN1, &rtB.BitShift_f);
 766:HANcoder_E407_CAN_COMM_TEST.c **** 
 767:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S36>/Bit Shift' */
 768:HANcoder_E407_CAN_COMM_TEST.c **** 
 769:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S36>/Bit Shift1' */
 770:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_f.y, &rtB.BitShift1_jz);
 771:HANcoder_E407_CAN_COMM_TEST.c **** 
 772:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S36>/Bit Shift1' */
 773:HANcoder_E407_CAN_COMM_TEST.c **** 
 774:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S36>/Minus' incorporates:
 775:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S36>/Cast1'
 776:HANcoder_E407_CAN_COMM_TEST.c ****        */
 777:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded5_CAN1 - rtB.BitShift1_jz.y;
 778:HANcoder_E407_CAN_COMM_TEST.c **** 
 779:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S36>/Power1' incorporates:
 780:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 781:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S36>/Constant2'
 782:HANcoder_E407_CAN_COMM_TEST.c ****        */
 783:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 784:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 785:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 786:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 787:HANcoder_E407_CAN_COMM_TEST.c ****       }
 788:HANcoder_E407_CAN_COMM_TEST.c **** 
 789:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S36>/Divide' */
 790:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 791:HANcoder_E407_CAN_COMM_TEST.c **** 
 792:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S36>/Fix1' */
 793:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 794:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 795:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 796:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 797:HANcoder_E407_CAN_COMM_TEST.c ****       }
 798:HANcoder_E407_CAN_COMM_TEST.c **** 
 799:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S36>/Fix1' */
 800:HANcoder_E407_CAN_COMM_TEST.c **** 
 801:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S36>/Minus1' incorporates:
 802:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S36>/Multiply1'
 803:HANcoder_E407_CAN_COMM_TEST.c ****        */
 804:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 805:HANcoder_E407_CAN_COMM_TEST.c **** 
 806:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S36>/Power' incorporates:
 807:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S36>/Constant1'
 808:HANcoder_E407_CAN_COMM_TEST.c ****        */
 809:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 810:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 811:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 812:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 813:HANcoder_E407_CAN_COMM_TEST.c ****       }
 814:HANcoder_E407_CAN_COMM_TEST.c **** 
 815:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S36>/Power' */
 816:HANcoder_E407_CAN_COMM_TEST.c **** 
 817:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S36>/Switch' incorporates:
 818:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S36>/Gain1'
 819:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S36>/Multiply'
 820:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S36>/Minus2'
 821:HANcoder_E407_CAN_COMM_TEST.c ****        */
 822:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_f.y > ((uint8_T)0U)) {
 823:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 824:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 825:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 826:HANcoder_E407_CAN_COMM_TEST.c ****       }
 827:HANcoder_E407_CAN_COMM_TEST.c **** 
 828:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S36>/Switch' */
 829:HANcoder_E407_CAN_COMM_TEST.c **** 
 830:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S37>/Bit Shift' */
 831:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded6_CAN1, &rtB.BitShift_n);
 832:HANcoder_E407_CAN_COMM_TEST.c **** 
 833:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S37>/Bit Shift' */
 834:HANcoder_E407_CAN_COMM_TEST.c **** 
 835:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S37>/Bit Shift1' */
 836:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_n.y, &rtB.BitShift1_fl);
 837:HANcoder_E407_CAN_COMM_TEST.c **** 
 838:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S37>/Bit Shift1' */
 839:HANcoder_E407_CAN_COMM_TEST.c **** 
 840:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S37>/Minus' incorporates:
 841:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S37>/Cast1'
 842:HANcoder_E407_CAN_COMM_TEST.c ****        */
 843:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded6_CAN1 - rtB.BitShift1_fl.y;
 844:HANcoder_E407_CAN_COMM_TEST.c **** 
 845:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S37>/Power1' incorporates:
 846:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 847:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S37>/Constant2'
 848:HANcoder_E407_CAN_COMM_TEST.c ****        */
 849:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 850:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 851:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 852:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 853:HANcoder_E407_CAN_COMM_TEST.c ****       }
 854:HANcoder_E407_CAN_COMM_TEST.c **** 
 855:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S37>/Divide' */
 856:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 857:HANcoder_E407_CAN_COMM_TEST.c **** 
 858:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S37>/Fix1' */
 859:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 860:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 861:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 862:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 863:HANcoder_E407_CAN_COMM_TEST.c ****       }
 864:HANcoder_E407_CAN_COMM_TEST.c **** 
 865:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S37>/Fix1' */
 866:HANcoder_E407_CAN_COMM_TEST.c **** 
 867:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S37>/Minus1' incorporates:
 868:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S37>/Multiply1'
 869:HANcoder_E407_CAN_COMM_TEST.c ****        */
 870:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 871:HANcoder_E407_CAN_COMM_TEST.c **** 
 872:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S37>/Power' incorporates:
 873:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S37>/Constant1'
 874:HANcoder_E407_CAN_COMM_TEST.c ****        */
 875:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 876:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 877:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 878:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 879:HANcoder_E407_CAN_COMM_TEST.c ****       }
 880:HANcoder_E407_CAN_COMM_TEST.c **** 
 881:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S37>/Power' */
 882:HANcoder_E407_CAN_COMM_TEST.c **** 
 883:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S37>/Switch' incorporates:
 884:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S37>/Gain1'
 885:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S37>/Multiply'
 886:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S37>/Minus2'
 887:HANcoder_E407_CAN_COMM_TEST.c ****        */
 888:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_n.y > ((uint8_T)0U)) {
 889:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 890:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 891:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 892:HANcoder_E407_CAN_COMM_TEST.c ****       }
 893:HANcoder_E407_CAN_COMM_TEST.c **** 
 894:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S37>/Switch' */
 895:HANcoder_E407_CAN_COMM_TEST.c **** 
 896:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S38>/Bit Shift' */
 897:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded7_CAN1, &rtB.BitShift_g);
 898:HANcoder_E407_CAN_COMM_TEST.c **** 
 899:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S38>/Bit Shift' */
 900:HANcoder_E407_CAN_COMM_TEST.c **** 
 901:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S38>/Bit Shift1' */
 902:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_g.y, &rtB.BitShift1_c);
 903:HANcoder_E407_CAN_COMM_TEST.c **** 
 904:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S38>/Bit Shift1' */
 905:HANcoder_E407_CAN_COMM_TEST.c **** 
 906:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S38>/Minus' incorporates:
 907:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S38>/Cast1'
 908:HANcoder_E407_CAN_COMM_TEST.c ****        */
 909:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded7_CAN1 - rtB.BitShift1_c.y;
 910:HANcoder_E407_CAN_COMM_TEST.c **** 
 911:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S38>/Power1' incorporates:
 912:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant3'
 913:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S38>/Constant2'
 914:HANcoder_E407_CAN_COMM_TEST.c ****        */
 915:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 916:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN1);
 917:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 918:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN1);
 919:HANcoder_E407_CAN_COMM_TEST.c ****       }
 920:HANcoder_E407_CAN_COMM_TEST.c **** 
 921:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S38>/Divide' */
 922:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
 923:HANcoder_E407_CAN_COMM_TEST.c **** 
 924:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S38>/Fix1' */
 925:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
 926:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 927:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 928:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
 929:HANcoder_E407_CAN_COMM_TEST.c ****       }
 930:HANcoder_E407_CAN_COMM_TEST.c **** 
 931:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S38>/Fix1' */
 932:HANcoder_E407_CAN_COMM_TEST.c **** 
 933:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S38>/Minus1' incorporates:
 934:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S38>/Multiply1'
 935:HANcoder_E407_CAN_COMM_TEST.c ****        */
 936:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
 937:HANcoder_E407_CAN_COMM_TEST.c **** 
 938:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S38>/Power' incorporates:
 939:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S38>/Constant1'
 940:HANcoder_E407_CAN_COMM_TEST.c ****        */
 941:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
 942:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
 943:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 944:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
 945:HANcoder_E407_CAN_COMM_TEST.c ****       }
 946:HANcoder_E407_CAN_COMM_TEST.c **** 
 947:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S38>/Power' */
 948:HANcoder_E407_CAN_COMM_TEST.c **** 
 949:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S38>/Switch' incorporates:
 950:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S38>/Gain1'
 951:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S38>/Multiply'
 952:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S38>/Minus2'
 953:HANcoder_E407_CAN_COMM_TEST.c ****        */
 954:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_g.y > ((uint8_T)0U)) {
 955:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 956:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 957:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN1 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
 958:HANcoder_E407_CAN_COMM_TEST.c ****       }
 959:HANcoder_E407_CAN_COMM_TEST.c **** 
 960:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S38>/Switch' */
 961:HANcoder_E407_CAN_COMM_TEST.c **** 
 962:HANcoder_E407_CAN_COMM_TEST.c ****       /* M-S-Function: '<S24>/S-Function' */
 963:HANcoder_E407_CAN_COMM_TEST.c **** 
 964:HANcoder_E407_CAN_COMM_TEST.c ****       /* read the message data and store the new parameter */
 965:HANcoder_E407_CAN_COMM_TEST.c ****       new_CAN2 = CanIoGetMessage(1, constant_ID_RXCAN2, NULL,
 966:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_1_constant_ID_RXCAN2.uint8_T_info[0], NULL);
 967:HANcoder_E407_CAN_COMM_TEST.c **** 
 968:HANcoder_E407_CAN_COMM_TEST.c ****       /* process the message data */
 969:HANcoder_E407_CAN_COMM_TEST.c ****       if (new_CAN2 > 0) {
 970:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 971:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o2_e = canRxData_1_constant_ID_RXCAN2.uint8_T_info[0];
 972:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o3_a = canRxData_1_constant_ID_RXCAN2.uint8_T_info[1];
 973:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o4_k = canRxData_1_constant_ID_RXCAN2.uint8_T_info[2];
 974:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o5_i = canRxData_1_constant_ID_RXCAN2.uint8_T_info[3];
 975:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o6_p = canRxData_1_constant_ID_RXCAN2.uint8_T_info[4];
 976:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o7_l = canRxData_1_constant_ID_RXCAN2.uint8_T_info[5];
 977:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o8_j = canRxData_1_constant_ID_RXCAN2.uint8_T_info[6];
 978:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o9_d = canRxData_1_constant_ID_RXCAN2.uint8_T_info[7];
 979:HANcoder_E407_CAN_COMM_TEST.c ****       }
 980:HANcoder_E407_CAN_COMM_TEST.c **** 
 981:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Enabled SubSystem: '<S24>/Enabled Subsystem' incorporates:
 982:HANcoder_E407_CAN_COMM_TEST.c ****        *  EnablePort: '<S42>/Enable'
 983:HANcoder_E407_CAN_COMM_TEST.c ****        */
 984:HANcoder_E407_CAN_COMM_TEST.c ****       if (new_CAN2 > 0) {
 985:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded1_CAN2 = rtb_SFunction_o2_e;
 986:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN2 = rtb_SFunction_o3_a;
 987:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN2 = rtb_SFunction_o4_k;
 988:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN2 = rtb_SFunction_o5_i;
 989:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN2 = rtb_SFunction_o6_p;
 990:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN2 = rtb_SFunction_o7_l;
 991:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN2 = rtb_SFunction_o8_j;
 992:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN2 = rtb_SFunction_o9_d;
 993:HANcoder_E407_CAN_COMM_TEST.c ****       }
 994:HANcoder_E407_CAN_COMM_TEST.c **** 
 995:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S24>/Enabled Subsystem' */
 996:HANcoder_E407_CAN_COMM_TEST.c **** 
 997:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S26>/Bit Shift' */
 998:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded5_CAN2, &rtB.BitShift_b);
 999:HANcoder_E407_CAN_COMM_TEST.c **** 
1000:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S26>/Bit Shift' */
1001:HANcoder_E407_CAN_COMM_TEST.c **** 
1002:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S26>/Bit Shift1' */
1003:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_b.y, &rtB.BitShift1_eg);
1004:HANcoder_E407_CAN_COMM_TEST.c **** 
1005:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S26>/Bit Shift1' */
1006:HANcoder_E407_CAN_COMM_TEST.c **** 
1007:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S26>/Minus' incorporates:
1008:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S26>/Cast1'
1009:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In1'
1010:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In2'
1011:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In3'
1012:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In4'
1013:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In5'
1014:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In6'
1015:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In7'
1016:HANcoder_E407_CAN_COMM_TEST.c ****        *  Inport: '<S42>/In8'
1017:HANcoder_E407_CAN_COMM_TEST.c ****        */
1018:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded5_CAN2 - rtB.BitShift1_eg.y;
1019:HANcoder_E407_CAN_COMM_TEST.c **** 
1020:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S26>/Power1' incorporates:
1021:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1022:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S26>/Constant2'
1023:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S27>/Power1'
1024:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S28>/Power1'
1025:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S29>/Power1'
1026:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S30>/Power1'
1027:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S31>/Power1'
1028:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S39>/Power1'
1029:HANcoder_E407_CAN_COMM_TEST.c ****        *  Math: '<S40>/Power1'
1030:HANcoder_E407_CAN_COMM_TEST.c ****        */
1031:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = floor(precision_CAN2);
1032:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1033:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1034:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1035:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1036:HANcoder_E407_CAN_COMM_TEST.c ****       }
1037:HANcoder_E407_CAN_COMM_TEST.c **** 
1038:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S26>/Power1' */
1039:HANcoder_E407_CAN_COMM_TEST.c **** 
1040:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S26>/Divide' */
1041:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1042:HANcoder_E407_CAN_COMM_TEST.c **** 
1043:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S26>/Fix1' */
1044:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1045:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1046:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1047:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1048:HANcoder_E407_CAN_COMM_TEST.c ****       }
1049:HANcoder_E407_CAN_COMM_TEST.c **** 
1050:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S26>/Fix1' */
1051:HANcoder_E407_CAN_COMM_TEST.c **** 
1052:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S26>/Minus1' incorporates:
1053:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S26>/Multiply1'
1054:HANcoder_E407_CAN_COMM_TEST.c ****        */
1055:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1056:HANcoder_E407_CAN_COMM_TEST.c **** 
1057:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S26>/Gain' incorporates:
1058:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1059:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S27>/Gain'
1060:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S28>/Gain'
1061:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S29>/Gain'
1062:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S30>/Gain'
1063:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S31>/Gain'
1064:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S39>/Gain'
1065:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S40>/Gain'
1066:HANcoder_E407_CAN_COMM_TEST.c ****        */
1067:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
1068:HANcoder_E407_CAN_COMM_TEST.c **** 
1069:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S26>/Power' incorporates:
1070:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S26>/Constant1'
1071:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S26>/Gain'
1072:HANcoder_E407_CAN_COMM_TEST.c ****        */
1073:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1074:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1075:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1076:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1077:HANcoder_E407_CAN_COMM_TEST.c ****       }
1078:HANcoder_E407_CAN_COMM_TEST.c **** 
1079:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S26>/Power' */
1080:HANcoder_E407_CAN_COMM_TEST.c **** 
1081:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S26>/Switch' incorporates:
1082:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S26>/Gain1'
1083:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S26>/Multiply'
1084:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S26>/Minus2'
1085:HANcoder_E407_CAN_COMM_TEST.c ****        */
1086:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_b.y > ((uint8_T)0U)) {
1087:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1088:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1089:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1090:HANcoder_E407_CAN_COMM_TEST.c ****       }
1091:HANcoder_E407_CAN_COMM_TEST.c **** 
1092:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S26>/Switch' */
1093:HANcoder_E407_CAN_COMM_TEST.c **** 
1094:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S27>/Bit Shift' */
1095:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded4_CAN2, &rtB.BitShift_bk);
1096:HANcoder_E407_CAN_COMM_TEST.c **** 
1097:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S27>/Bit Shift' */
1098:HANcoder_E407_CAN_COMM_TEST.c **** 
1099:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S27>/Bit Shift1' */
1100:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_bk.y, &rtB.BitShift1_h);
1101:HANcoder_E407_CAN_COMM_TEST.c **** 
1102:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S27>/Bit Shift1' */
1103:HANcoder_E407_CAN_COMM_TEST.c **** 
1104:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S27>/Minus' incorporates:
1105:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S27>/Cast1'
1106:HANcoder_E407_CAN_COMM_TEST.c ****        */
1107:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded4_CAN2 - rtB.BitShift1_h.y;
1108:HANcoder_E407_CAN_COMM_TEST.c **** 
1109:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S27>/Power1' incorporates:
1110:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1111:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S27>/Constant2'
1112:HANcoder_E407_CAN_COMM_TEST.c ****        */
1113:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1114:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1115:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1116:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1117:HANcoder_E407_CAN_COMM_TEST.c ****       }
1118:HANcoder_E407_CAN_COMM_TEST.c **** 
1119:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S27>/Divide' */
1120:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1121:HANcoder_E407_CAN_COMM_TEST.c **** 
1122:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S27>/Fix1' */
1123:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1124:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1125:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1126:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1127:HANcoder_E407_CAN_COMM_TEST.c ****       }
1128:HANcoder_E407_CAN_COMM_TEST.c **** 
1129:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S27>/Fix1' */
1130:HANcoder_E407_CAN_COMM_TEST.c **** 
1131:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S27>/Minus1' incorporates:
1132:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S27>/Multiply1'
1133:HANcoder_E407_CAN_COMM_TEST.c ****        */
1134:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1135:HANcoder_E407_CAN_COMM_TEST.c **** 
1136:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S27>/Power' incorporates:
1137:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S27>/Constant1'
1138:HANcoder_E407_CAN_COMM_TEST.c ****        */
1139:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1140:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1141:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1142:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1143:HANcoder_E407_CAN_COMM_TEST.c ****       }
1144:HANcoder_E407_CAN_COMM_TEST.c **** 
1145:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S27>/Power' */
1146:HANcoder_E407_CAN_COMM_TEST.c **** 
1147:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S27>/Switch' incorporates:
1148:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S27>/Gain1'
1149:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S27>/Multiply'
1150:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S27>/Minus2'
1151:HANcoder_E407_CAN_COMM_TEST.c ****        */
1152:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_bk.y > ((uint8_T)0U)) {
1153:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1154:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1155:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1156:HANcoder_E407_CAN_COMM_TEST.c ****       }
1157:HANcoder_E407_CAN_COMM_TEST.c **** 
1158:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S27>/Switch' */
1159:HANcoder_E407_CAN_COMM_TEST.c **** 
1160:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S28>/Bit Shift' */
1161:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded3_CAN2, &rtB.BitShift_p);
1162:HANcoder_E407_CAN_COMM_TEST.c **** 
1163:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S28>/Bit Shift' */
1164:HANcoder_E407_CAN_COMM_TEST.c **** 
1165:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S28>/Bit Shift1' */
1166:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_p.y, &rtB.BitShift1_k);
1167:HANcoder_E407_CAN_COMM_TEST.c **** 
1168:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S28>/Bit Shift1' */
1169:HANcoder_E407_CAN_COMM_TEST.c **** 
1170:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S28>/Minus' incorporates:
1171:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S28>/Cast1'
1172:HANcoder_E407_CAN_COMM_TEST.c ****        */
1173:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded3_CAN2 - rtB.BitShift1_k.y;
1174:HANcoder_E407_CAN_COMM_TEST.c **** 
1175:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S28>/Power1' incorporates:
1176:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1177:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S28>/Constant2'
1178:HANcoder_E407_CAN_COMM_TEST.c ****        */
1179:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1180:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1181:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1182:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1183:HANcoder_E407_CAN_COMM_TEST.c ****       }
1184:HANcoder_E407_CAN_COMM_TEST.c **** 
1185:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S28>/Divide' */
1186:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1187:HANcoder_E407_CAN_COMM_TEST.c **** 
1188:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S28>/Fix1' */
1189:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1190:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1191:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1192:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1193:HANcoder_E407_CAN_COMM_TEST.c ****       }
1194:HANcoder_E407_CAN_COMM_TEST.c **** 
1195:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S28>/Fix1' */
1196:HANcoder_E407_CAN_COMM_TEST.c **** 
1197:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S28>/Minus1' incorporates:
1198:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S28>/Multiply1'
1199:HANcoder_E407_CAN_COMM_TEST.c ****        */
1200:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1201:HANcoder_E407_CAN_COMM_TEST.c **** 
1202:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S28>/Power' incorporates:
1203:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S28>/Constant1'
1204:HANcoder_E407_CAN_COMM_TEST.c ****        */
1205:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1206:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1207:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1208:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1209:HANcoder_E407_CAN_COMM_TEST.c ****       }
1210:HANcoder_E407_CAN_COMM_TEST.c **** 
1211:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S28>/Power' */
1212:HANcoder_E407_CAN_COMM_TEST.c **** 
1213:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S28>/Switch' incorporates:
1214:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S28>/Gain1'
1215:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S28>/Multiply'
1216:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S28>/Minus2'
1217:HANcoder_E407_CAN_COMM_TEST.c ****        */
1218:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_p.y > ((uint8_T)0U)) {
1219:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1220:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1221:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1222:HANcoder_E407_CAN_COMM_TEST.c ****       }
1223:HANcoder_E407_CAN_COMM_TEST.c **** 
1224:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S28>/Switch' */
1225:HANcoder_E407_CAN_COMM_TEST.c **** 
1226:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S29>/Bit Shift' */
1227:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded2_CAN2, &rtB.BitShift_k);
1228:HANcoder_E407_CAN_COMM_TEST.c **** 
1229:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S29>/Bit Shift' */
1230:HANcoder_E407_CAN_COMM_TEST.c **** 
1231:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S29>/Bit Shift1' */
1232:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_k.y, &rtB.BitShift1_g);
1233:HANcoder_E407_CAN_COMM_TEST.c **** 
1234:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S29>/Bit Shift1' */
1235:HANcoder_E407_CAN_COMM_TEST.c **** 
1236:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S29>/Minus' incorporates:
1237:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S29>/Cast1'
1238:HANcoder_E407_CAN_COMM_TEST.c ****        */
1239:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded2_CAN2 - rtB.BitShift1_g.y;
1240:HANcoder_E407_CAN_COMM_TEST.c **** 
1241:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S29>/Power1' incorporates:
1242:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1243:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S29>/Constant2'
1244:HANcoder_E407_CAN_COMM_TEST.c ****        */
1245:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1246:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1247:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1248:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1249:HANcoder_E407_CAN_COMM_TEST.c ****       }
1250:HANcoder_E407_CAN_COMM_TEST.c **** 
1251:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S29>/Divide' */
1252:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1253:HANcoder_E407_CAN_COMM_TEST.c **** 
1254:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S29>/Fix1' */
1255:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1256:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1257:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1258:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1259:HANcoder_E407_CAN_COMM_TEST.c ****       }
1260:HANcoder_E407_CAN_COMM_TEST.c **** 
1261:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S29>/Fix1' */
1262:HANcoder_E407_CAN_COMM_TEST.c **** 
1263:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S29>/Minus1' incorporates:
1264:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S29>/Multiply1'
1265:HANcoder_E407_CAN_COMM_TEST.c ****        */
1266:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1267:HANcoder_E407_CAN_COMM_TEST.c **** 
1268:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S29>/Power' incorporates:
1269:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S29>/Constant1'
1270:HANcoder_E407_CAN_COMM_TEST.c ****        */
1271:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1272:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1273:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1274:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1275:HANcoder_E407_CAN_COMM_TEST.c ****       }
1276:HANcoder_E407_CAN_COMM_TEST.c **** 
1277:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S29>/Power' */
1278:HANcoder_E407_CAN_COMM_TEST.c **** 
1279:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S29>/Switch' incorporates:
1280:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S29>/Gain1'
1281:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S29>/Multiply'
1282:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S29>/Minus2'
1283:HANcoder_E407_CAN_COMM_TEST.c ****        */
1284:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_k.y > ((uint8_T)0U)) {
1285:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1286:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1287:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1288:HANcoder_E407_CAN_COMM_TEST.c ****       }
1289:HANcoder_E407_CAN_COMM_TEST.c **** 
1290:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S29>/Switch' */
1291:HANcoder_E407_CAN_COMM_TEST.c **** 
1292:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S30>/Bit Shift' */
1293:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded7_CAN2, &rtB.BitShift_h);
1294:HANcoder_E407_CAN_COMM_TEST.c **** 
1295:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S30>/Bit Shift' */
1296:HANcoder_E407_CAN_COMM_TEST.c **** 
1297:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S30>/Bit Shift1' */
1298:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_h.y, &rtB.BitShift1_j);
1299:HANcoder_E407_CAN_COMM_TEST.c **** 
1300:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S30>/Bit Shift1' */
1301:HANcoder_E407_CAN_COMM_TEST.c **** 
1302:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S30>/Minus' incorporates:
1303:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S30>/Cast1'
1304:HANcoder_E407_CAN_COMM_TEST.c ****        */
1305:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded7_CAN2 - rtB.BitShift1_j.y;
1306:HANcoder_E407_CAN_COMM_TEST.c **** 
1307:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S30>/Power1' incorporates:
1308:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1309:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S30>/Constant2'
1310:HANcoder_E407_CAN_COMM_TEST.c ****        */
1311:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1312:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1313:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1314:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1315:HANcoder_E407_CAN_COMM_TEST.c ****       }
1316:HANcoder_E407_CAN_COMM_TEST.c **** 
1317:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S30>/Divide' */
1318:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1319:HANcoder_E407_CAN_COMM_TEST.c **** 
1320:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S30>/Fix1' */
1321:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1322:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1323:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1324:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1325:HANcoder_E407_CAN_COMM_TEST.c ****       }
1326:HANcoder_E407_CAN_COMM_TEST.c **** 
1327:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S30>/Fix1' */
1328:HANcoder_E407_CAN_COMM_TEST.c **** 
1329:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S30>/Minus1' incorporates:
1330:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S30>/Multiply1'
1331:HANcoder_E407_CAN_COMM_TEST.c ****        */
1332:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1333:HANcoder_E407_CAN_COMM_TEST.c **** 
1334:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S30>/Power' incorporates:
1335:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S30>/Constant1'
1336:HANcoder_E407_CAN_COMM_TEST.c ****        */
1337:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1338:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1339:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1340:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1341:HANcoder_E407_CAN_COMM_TEST.c ****       }
1342:HANcoder_E407_CAN_COMM_TEST.c **** 
1343:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S30>/Power' */
1344:HANcoder_E407_CAN_COMM_TEST.c **** 
1345:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S30>/Switch' incorporates:
1346:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S30>/Gain1'
1347:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S30>/Multiply'
1348:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S30>/Minus2'
1349:HANcoder_E407_CAN_COMM_TEST.c ****        */
1350:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_h.y > ((uint8_T)0U)) {
1351:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1352:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1353:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1354:HANcoder_E407_CAN_COMM_TEST.c ****       }
1355:HANcoder_E407_CAN_COMM_TEST.c **** 
1356:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S30>/Switch' */
1357:HANcoder_E407_CAN_COMM_TEST.c **** 
1358:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S31>/Bit Shift' */
1359:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded1_CAN2, &rtB.BitShift_a);
1360:HANcoder_E407_CAN_COMM_TEST.c **** 
1361:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S31>/Bit Shift' */
1362:HANcoder_E407_CAN_COMM_TEST.c **** 
1363:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S31>/Bit Shift1' */
1364:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_a.y, &rtB.BitShift1_b);
1365:HANcoder_E407_CAN_COMM_TEST.c **** 
1366:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S31>/Bit Shift1' */
1367:HANcoder_E407_CAN_COMM_TEST.c **** 
1368:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S31>/Minus' incorporates:
1369:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S31>/Cast1'
1370:HANcoder_E407_CAN_COMM_TEST.c ****        */
1371:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded1_CAN2 - rtB.BitShift1_b.y;
1372:HANcoder_E407_CAN_COMM_TEST.c **** 
1373:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S31>/Power1' incorporates:
1374:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1375:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S31>/Constant2'
1376:HANcoder_E407_CAN_COMM_TEST.c ****        */
1377:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1378:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1379:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1380:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1381:HANcoder_E407_CAN_COMM_TEST.c ****       }
1382:HANcoder_E407_CAN_COMM_TEST.c **** 
1383:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S31>/Divide' */
1384:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1385:HANcoder_E407_CAN_COMM_TEST.c **** 
1386:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S31>/Fix1' */
1387:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1388:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1389:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1390:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1391:HANcoder_E407_CAN_COMM_TEST.c ****       }
1392:HANcoder_E407_CAN_COMM_TEST.c **** 
1393:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S31>/Fix1' */
1394:HANcoder_E407_CAN_COMM_TEST.c **** 
1395:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S31>/Minus1' incorporates:
1396:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S31>/Multiply1'
1397:HANcoder_E407_CAN_COMM_TEST.c ****        */
1398:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1399:HANcoder_E407_CAN_COMM_TEST.c **** 
1400:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S31>/Power' incorporates:
1401:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S31>/Constant1'
1402:HANcoder_E407_CAN_COMM_TEST.c ****        */
1403:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1404:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1405:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1406:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1407:HANcoder_E407_CAN_COMM_TEST.c ****       }
1408:HANcoder_E407_CAN_COMM_TEST.c **** 
1409:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S31>/Power' */
1410:HANcoder_E407_CAN_COMM_TEST.c **** 
1411:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S31>/Switch' incorporates:
1412:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S31>/Gain1'
1413:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S31>/Multiply'
1414:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S31>/Minus2'
1415:HANcoder_E407_CAN_COMM_TEST.c ****        */
1416:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_a.y > ((uint8_T)0U)) {
1417:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1418:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1419:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1420:HANcoder_E407_CAN_COMM_TEST.c ****       }
1421:HANcoder_E407_CAN_COMM_TEST.c **** 
1422:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S31>/Switch' */
1423:HANcoder_E407_CAN_COMM_TEST.c **** 
1424:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S39>/Bit Shift' */
1425:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded8_CAN2, &rtB.BitShift_kk);
1426:HANcoder_E407_CAN_COMM_TEST.c **** 
1427:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S39>/Bit Shift' */
1428:HANcoder_E407_CAN_COMM_TEST.c **** 
1429:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S39>/Bit Shift1' */
1430:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_kk.y, &rtB.BitShift1_fh);
1431:HANcoder_E407_CAN_COMM_TEST.c **** 
1432:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S39>/Bit Shift1' */
1433:HANcoder_E407_CAN_COMM_TEST.c **** 
1434:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S39>/Minus' incorporates:
1435:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S39>/Cast1'
1436:HANcoder_E407_CAN_COMM_TEST.c ****        */
1437:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded8_CAN2 - rtB.BitShift1_fh.y;
1438:HANcoder_E407_CAN_COMM_TEST.c **** 
1439:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S39>/Power1' incorporates:
1440:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1441:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S39>/Constant2'
1442:HANcoder_E407_CAN_COMM_TEST.c ****        */
1443:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1444:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1445:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1446:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1447:HANcoder_E407_CAN_COMM_TEST.c ****       }
1448:HANcoder_E407_CAN_COMM_TEST.c **** 
1449:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S39>/Divide' */
1450:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1451:HANcoder_E407_CAN_COMM_TEST.c **** 
1452:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S39>/Fix1' */
1453:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1454:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1455:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1456:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1457:HANcoder_E407_CAN_COMM_TEST.c ****       }
1458:HANcoder_E407_CAN_COMM_TEST.c **** 
1459:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S39>/Fix1' */
1460:HANcoder_E407_CAN_COMM_TEST.c **** 
1461:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S39>/Minus1' incorporates:
1462:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S39>/Multiply1'
1463:HANcoder_E407_CAN_COMM_TEST.c ****        */
1464:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1465:HANcoder_E407_CAN_COMM_TEST.c **** 
1466:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S39>/Power' incorporates:
1467:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S39>/Constant1'
1468:HANcoder_E407_CAN_COMM_TEST.c ****        */
1469:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1470:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1471:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1472:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1473:HANcoder_E407_CAN_COMM_TEST.c ****       }
1474:HANcoder_E407_CAN_COMM_TEST.c **** 
1475:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S39>/Power' */
1476:HANcoder_E407_CAN_COMM_TEST.c **** 
1477:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S39>/Switch' incorporates:
1478:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S39>/Gain1'
1479:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S39>/Multiply'
1480:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S39>/Minus2'
1481:HANcoder_E407_CAN_COMM_TEST.c ****        */
1482:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_kk.y > ((uint8_T)0U)) {
1483:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1484:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1485:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1486:HANcoder_E407_CAN_COMM_TEST.c ****       }
1487:HANcoder_E407_CAN_COMM_TEST.c **** 
1488:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S39>/Switch' */
1489:HANcoder_E407_CAN_COMM_TEST.c **** 
1490:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S40>/Bit Shift' */
1491:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift(Rx_coded6_CAN2, &rtB.BitShift_e);
1492:HANcoder_E407_CAN_COMM_TEST.c **** 
1493:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S40>/Bit Shift' */
1494:HANcoder_E407_CAN_COMM_TEST.c **** 
1495:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S40>/Bit Shift1' */
1496:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtB.BitShift_e.y, &rtB.BitShift1_ew);
1497:HANcoder_E407_CAN_COMM_TEST.c **** 
1498:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S40>/Bit Shift1' */
1499:HANcoder_E407_CAN_COMM_TEST.c **** 
1500:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S40>/Minus' incorporates:
1501:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S40>/Cast1'
1502:HANcoder_E407_CAN_COMM_TEST.c ****        */
1503:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = Rx_coded6_CAN2 - rtB.BitShift1_ew.y;
1504:HANcoder_E407_CAN_COMM_TEST.c **** 
1505:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S40>/Power1' incorporates:
1506:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S10>/Constant4'
1507:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S40>/Constant2'
1508:HANcoder_E407_CAN_COMM_TEST.c ****        */
1509:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
1510:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, precision_CAN2);
1511:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1512:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, precision_CAN2);
1513:HANcoder_E407_CAN_COMM_TEST.c ****       }
1514:HANcoder_E407_CAN_COMM_TEST.c **** 
1515:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S40>/Divide' */
1516:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = rtb_Power2 / rtb_Switch2;
1517:HANcoder_E407_CAN_COMM_TEST.c **** 
1518:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S40>/Fix1' */
1519:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix < 0.0) {
1520:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
1521:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1522:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = floor(rtb_Fix);
1523:HANcoder_E407_CAN_COMM_TEST.c ****       }
1524:HANcoder_E407_CAN_COMM_TEST.c **** 
1525:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S40>/Fix1' */
1526:HANcoder_E407_CAN_COMM_TEST.c **** 
1527:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S40>/Minus1' incorporates:
1528:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S40>/Multiply1'
1529:HANcoder_E407_CAN_COMM_TEST.c ****        */
1530:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 -= rtb_Fix * rtb_Switch2;
1531:HANcoder_E407_CAN_COMM_TEST.c **** 
1532:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S40>/Power' incorporates:
1533:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S40>/Constant1'
1534:HANcoder_E407_CAN_COMM_TEST.c ****        */
1535:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1536:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = -pow(-2.0, rtb_Fix1);
1537:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1538:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = pow(2.0, rtb_Fix1);
1539:HANcoder_E407_CAN_COMM_TEST.c ****       }
1540:HANcoder_E407_CAN_COMM_TEST.c **** 
1541:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S40>/Power' */
1542:HANcoder_E407_CAN_COMM_TEST.c **** 
1543:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S40>/Switch' incorporates:
1544:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S40>/Gain1'
1545:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S40>/Multiply'
1546:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S40>/Minus2'
1547:HANcoder_E407_CAN_COMM_TEST.c ****        */
1548:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtB.BitShift_e.y > ((uint8_T)0U)) {
1549:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
1550:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1551:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN2 = rtb_Power2 * rtb_Switch2 + rtb_Fix;
1552:HANcoder_E407_CAN_COMM_TEST.c ****       }
1553:HANcoder_E407_CAN_COMM_TEST.c **** 
1554:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S40>/Switch' */
1555:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN2_s = Rx_ID_CAN2;
1556:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN1_s = Rx_ID_CAN1;
1557:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
1558:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtDWork.RxCAN_MODE) {
1559:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.RxCAN_MODE = false;
1560:HANcoder_E407_CAN_COMM_TEST.c ****       }
1561:HANcoder_E407_CAN_COMM_TEST.c ****     }
1562:HANcoder_E407_CAN_COMM_TEST.c **** 
1563:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Logic: '<S1>/AND1' */
1564:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Outputs for SubSystem: '<S1>/Rx CAN' */
1565:HANcoder_E407_CAN_COMM_TEST.c **** 
1566:HANcoder_E407_CAN_COMM_TEST.c ****     /* M-S-Function: '<S6>/Level-2 M-file S-Function' */
1567:HANcoder_E407_CAN_COMM_TEST.c ****     /* read from digital input */
1568:HANcoder_E407_CAN_COMM_TEST.c ****     sender_id = DiginGet(DIGIN_PORTE_PIN2);
1569:HANcoder_E407_CAN_COMM_TEST.c **** 
1570:HANcoder_E407_CAN_COMM_TEST.c ****     /* Outputs for Enabled SubSystem: '<S1>/Tx CAN' incorporates:
1571:HANcoder_E407_CAN_COMM_TEST.c ****      *  EnablePort: '<S12>/Enable'
1572:HANcoder_E407_CAN_COMM_TEST.c ****      */
1573:HANcoder_E407_CAN_COMM_TEST.c ****     /* Logic: '<S1>/AND3' */
1574:HANcoder_E407_CAN_COMM_TEST.c ****     if (WKUP_button && sender_id) {
1575:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.TxCAN_MODE) {
1576:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.TxCAN_MODE = true;
1577:HANcoder_E407_CAN_COMM_TEST.c ****       }
1578:HANcoder_E407_CAN_COMM_TEST.c **** 
1579:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S112>/Switch2' incorporates:
1580:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
1581:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
1582:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude4'
1583:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S112>/LessThanOrEqual1'
1584:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S112>/LessThanOrEqual2'
1585:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S112>/Switch1'
1586:HANcoder_E407_CAN_COMM_TEST.c ****        */
1587:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_5_CAN1) {
1588:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S112>/Switch' */
1589:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
1590:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_5_CAN1 >= Tx_Min_CAN1) {
1591:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S112>/Switch1' */
1592:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_5_CAN1;
1593:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1594:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
1595:HANcoder_E407_CAN_COMM_TEST.c ****       }
1596:HANcoder_E407_CAN_COMM_TEST.c **** 
1597:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S112>/Switch2' */
1598:HANcoder_E407_CAN_COMM_TEST.c **** 
1599:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S112>/Abs' */
1600:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = fabs(rtb_Switch2);
1601:HANcoder_E407_CAN_COMM_TEST.c **** 
1602:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S112>/Fix' */
1603:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Fix1);
1604:HANcoder_E407_CAN_COMM_TEST.c **** 
1605:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S112>/Minus' */
1606:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Fix1 - rtb_Fix;
1607:HANcoder_E407_CAN_COMM_TEST.c **** 
1608:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S112>/Minus1' incorporates:
1609:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S112>/Constant3'
1610:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1611:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S120>/Minus1'
1612:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S121>/Minus1'
1613:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S122>/Minus1'
1614:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S123>/Minus1'
1615:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S124>/Minus1'
1616:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S125>/Minus1'
1617:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S126>/Minus1'
1618:HANcoder_E407_CAN_COMM_TEST.c ****        */
1619:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1_tmp = 7.0 - precision_CAN1;
1620:HANcoder_E407_CAN_COMM_TEST.c **** 
1621:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S112>/Gain' incorporates:
1622:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1623:HANcoder_E407_CAN_COMM_TEST.c ****        */
1624:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = (-1.0) * precision_CAN1;
1625:HANcoder_E407_CAN_COMM_TEST.c **** 
1626:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S112>/Power' incorporates:
1627:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S112>/Constant1'
1628:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S112>/Gain'
1629:HANcoder_E407_CAN_COMM_TEST.c ****        */
1630:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Power2 > floor(rtb_Power2))) {
1631:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Power2);
1632:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1633:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Power2);
1634:HANcoder_E407_CAN_COMM_TEST.c ****       }
1635:HANcoder_E407_CAN_COMM_TEST.c **** 
1636:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S112>/Power' */
1637:HANcoder_E407_CAN_COMM_TEST.c **** 
1638:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S112>/Power2' incorporates:
1639:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S112>/Constant4'
1640:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S112>/Minus1'
1641:HANcoder_E407_CAN_COMM_TEST.c ****        */
1642:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
1643:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1_tmp);
1644:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1645:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1_tmp);
1646:HANcoder_E407_CAN_COMM_TEST.c ****       }
1647:HANcoder_E407_CAN_COMM_TEST.c **** 
1648:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S112>/Power2' */
1649:HANcoder_E407_CAN_COMM_TEST.c **** 
1650:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S112>/Divide' */
1651:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = rtb_Minus / rtb_Power2;
1652:HANcoder_E407_CAN_COMM_TEST.c **** 
1653:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S112>/Fix1' */
1654:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Power2 < 0.0) {
1655:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = ceil(rtb_Power2);
1656:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1657:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = floor(rtb_Power2);
1658:HANcoder_E407_CAN_COMM_TEST.c ****       }
1659:HANcoder_E407_CAN_COMM_TEST.c **** 
1660:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S112>/Fix1' */
1661:HANcoder_E407_CAN_COMM_TEST.c **** 
1662:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S112>/Cast' incorporates:
1663:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S112>/Constant'
1664:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S112>/GreaterThan'
1665:HANcoder_E407_CAN_COMM_TEST.c ****        */
1666:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast = (uint8_T)(rtb_Switch2 < 0.0);
1667:HANcoder_E407_CAN_COMM_TEST.c **** 
1668:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S112>/Bit Shift' */
1669:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast, &rtB.BitShift_fo);
1670:HANcoder_E407_CAN_COMM_TEST.c **** 
1671:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S112>/Bit Shift' */
1672:HANcoder_E407_CAN_COMM_TEST.c **** 
1673:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S112>/Power1' incorporates:
1674:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S112>/Constant2'
1675:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1676:HANcoder_E407_CAN_COMM_TEST.c ****        */
1677:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
1678:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
1679:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1680:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
1681:HANcoder_E407_CAN_COMM_TEST.c ****       }
1682:HANcoder_E407_CAN_COMM_TEST.c **** 
1683:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S112>/Power1' */
1684:HANcoder_E407_CAN_COMM_TEST.c **** 
1685:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S112>/Plus' incorporates:
1686:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S112>/Cast1'
1687:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S112>/Cast2'
1688:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S112>/Multiply'
1689:HANcoder_E407_CAN_COMM_TEST.c ****        */
1690:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded5_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
1691:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_fo.y) + (uint8_T)rtb_Power2);
1692:HANcoder_E407_CAN_COMM_TEST.c **** 
1693:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S112>/LessThanOrEqual' */
1694:HANcoder_E407_CAN_COMM_TEST.c ****       OF5_CAN1 = (rtb_Fix >= rtb_Fix1);
1695:HANcoder_E407_CAN_COMM_TEST.c **** 
1696:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S120>/Switch2' incorporates:
1697:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
1698:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
1699:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude5'
1700:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S120>/LessThanOrEqual1'
1701:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S120>/LessThanOrEqual2'
1702:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S120>/Switch1'
1703:HANcoder_E407_CAN_COMM_TEST.c ****        */
1704:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_6_CAN1) {
1705:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S120>/Switch' */
1706:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
1707:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_6_CAN1 >= Tx_Min_CAN1) {
1708:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S120>/Switch1' */
1709:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_6_CAN1;
1710:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1711:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
1712:HANcoder_E407_CAN_COMM_TEST.c ****       }
1713:HANcoder_E407_CAN_COMM_TEST.c **** 
1714:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S120>/Switch2' */
1715:HANcoder_E407_CAN_COMM_TEST.c **** 
1716:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S120>/Abs' */
1717:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
1718:HANcoder_E407_CAN_COMM_TEST.c **** 
1719:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S120>/Fix' */
1720:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
1721:HANcoder_E407_CAN_COMM_TEST.c **** 
1722:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S120>/Minus' */
1723:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
1724:HANcoder_E407_CAN_COMM_TEST.c **** 
1725:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S120>/Gain' incorporates:
1726:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1727:HANcoder_E407_CAN_COMM_TEST.c ****        */
1728:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
1729:HANcoder_E407_CAN_COMM_TEST.c **** 
1730:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S120>/Power' incorporates:
1731:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S120>/Constant1'
1732:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S120>/Gain'
1733:HANcoder_E407_CAN_COMM_TEST.c ****        */
1734:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1735:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
1736:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1737:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
1738:HANcoder_E407_CAN_COMM_TEST.c ****       }
1739:HANcoder_E407_CAN_COMM_TEST.c **** 
1740:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S120>/Power' */
1741:HANcoder_E407_CAN_COMM_TEST.c **** 
1742:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S120>/Power2' incorporates:
1743:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S120>/Constant4'
1744:HANcoder_E407_CAN_COMM_TEST.c ****        */
1745:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
1746:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
1747:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1748:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
1749:HANcoder_E407_CAN_COMM_TEST.c ****       }
1750:HANcoder_E407_CAN_COMM_TEST.c **** 
1751:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S120>/Power2' */
1752:HANcoder_E407_CAN_COMM_TEST.c **** 
1753:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S120>/Divide' */
1754:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
1755:HANcoder_E407_CAN_COMM_TEST.c **** 
1756:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S120>/Fix1' */
1757:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
1758:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
1759:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1760:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
1761:HANcoder_E407_CAN_COMM_TEST.c ****       }
1762:HANcoder_E407_CAN_COMM_TEST.c **** 
1763:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S120>/Fix1' */
1764:HANcoder_E407_CAN_COMM_TEST.c **** 
1765:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S120>/Cast' incorporates:
1766:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S120>/Constant'
1767:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S120>/GreaterThan'
1768:HANcoder_E407_CAN_COMM_TEST.c ****        */
1769:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_hi = (uint8_T)(rtb_Switch2 < 0.0);
1770:HANcoder_E407_CAN_COMM_TEST.c **** 
1771:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S120>/Bit Shift' */
1772:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_hi, &rtB.BitShift_g1);
1773:HANcoder_E407_CAN_COMM_TEST.c **** 
1774:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S120>/Bit Shift' */
1775:HANcoder_E407_CAN_COMM_TEST.c **** 
1776:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S120>/Power1' incorporates:
1777:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S120>/Constant2'
1778:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1779:HANcoder_E407_CAN_COMM_TEST.c ****        */
1780:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
1781:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
1782:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1783:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
1784:HANcoder_E407_CAN_COMM_TEST.c ****       }
1785:HANcoder_E407_CAN_COMM_TEST.c **** 
1786:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S120>/Power1' */
1787:HANcoder_E407_CAN_COMM_TEST.c **** 
1788:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S120>/Plus' incorporates:
1789:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S120>/Cast1'
1790:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S120>/Cast2'
1791:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S120>/Multiply'
1792:HANcoder_E407_CAN_COMM_TEST.c ****        */
1793:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded6_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
1794:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_g1.y) + (uint8_T)rtb_Fix1);
1795:HANcoder_E407_CAN_COMM_TEST.c **** 
1796:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S120>/LessThanOrEqual' */
1797:HANcoder_E407_CAN_COMM_TEST.c ****       OF6_CAN1 = (rtb_Fix >= rtb_Power2);
1798:HANcoder_E407_CAN_COMM_TEST.c **** 
1799:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S121>/Switch2' incorporates:
1800:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
1801:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
1802:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude3'
1803:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S121>/LessThanOrEqual1'
1804:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S121>/LessThanOrEqual2'
1805:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S121>/Switch1'
1806:HANcoder_E407_CAN_COMM_TEST.c ****        */
1807:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_4_CAN1) {
1808:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S121>/Switch' */
1809:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
1810:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_4_CAN1 >= Tx_Min_CAN1) {
1811:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S121>/Switch1' */
1812:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_4_CAN1;
1813:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1814:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
1815:HANcoder_E407_CAN_COMM_TEST.c ****       }
1816:HANcoder_E407_CAN_COMM_TEST.c **** 
1817:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S121>/Switch2' */
1818:HANcoder_E407_CAN_COMM_TEST.c **** 
1819:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S121>/Abs' */
1820:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
1821:HANcoder_E407_CAN_COMM_TEST.c **** 
1822:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S121>/Fix' */
1823:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
1824:HANcoder_E407_CAN_COMM_TEST.c **** 
1825:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S121>/Minus' */
1826:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
1827:HANcoder_E407_CAN_COMM_TEST.c **** 
1828:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S121>/Gain' incorporates:
1829:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1830:HANcoder_E407_CAN_COMM_TEST.c ****        */
1831:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
1832:HANcoder_E407_CAN_COMM_TEST.c **** 
1833:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S121>/Power' incorporates:
1834:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S121>/Constant1'
1835:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S121>/Gain'
1836:HANcoder_E407_CAN_COMM_TEST.c ****        */
1837:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1838:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
1839:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1840:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
1841:HANcoder_E407_CAN_COMM_TEST.c ****       }
1842:HANcoder_E407_CAN_COMM_TEST.c **** 
1843:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S121>/Power' */
1844:HANcoder_E407_CAN_COMM_TEST.c **** 
1845:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S121>/Power2' incorporates:
1846:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S121>/Constant4'
1847:HANcoder_E407_CAN_COMM_TEST.c ****        */
1848:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
1849:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
1850:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1851:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
1852:HANcoder_E407_CAN_COMM_TEST.c ****       }
1853:HANcoder_E407_CAN_COMM_TEST.c **** 
1854:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S121>/Power2' */
1855:HANcoder_E407_CAN_COMM_TEST.c **** 
1856:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S121>/Divide' */
1857:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
1858:HANcoder_E407_CAN_COMM_TEST.c **** 
1859:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S121>/Fix1' */
1860:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
1861:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
1862:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1863:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
1864:HANcoder_E407_CAN_COMM_TEST.c ****       }
1865:HANcoder_E407_CAN_COMM_TEST.c **** 
1866:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S121>/Fix1' */
1867:HANcoder_E407_CAN_COMM_TEST.c **** 
1868:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S121>/Cast' incorporates:
1869:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S121>/Constant'
1870:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S121>/GreaterThan'
1871:HANcoder_E407_CAN_COMM_TEST.c ****        */
1872:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_lf = (uint8_T)(rtb_Switch2 < 0.0);
1873:HANcoder_E407_CAN_COMM_TEST.c **** 
1874:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S121>/Bit Shift' */
1875:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_lf, &rtB.BitShift_am);
1876:HANcoder_E407_CAN_COMM_TEST.c **** 
1877:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S121>/Bit Shift' */
1878:HANcoder_E407_CAN_COMM_TEST.c **** 
1879:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S121>/Power1' incorporates:
1880:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S121>/Constant2'
1881:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1882:HANcoder_E407_CAN_COMM_TEST.c ****        */
1883:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
1884:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
1885:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1886:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
1887:HANcoder_E407_CAN_COMM_TEST.c ****       }
1888:HANcoder_E407_CAN_COMM_TEST.c **** 
1889:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S121>/Power1' */
1890:HANcoder_E407_CAN_COMM_TEST.c **** 
1891:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S121>/Plus' incorporates:
1892:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S121>/Cast1'
1893:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S121>/Cast2'
1894:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S121>/Multiply'
1895:HANcoder_E407_CAN_COMM_TEST.c ****        */
1896:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded4_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
1897:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_am.y) + (uint8_T)rtb_Fix1);
1898:HANcoder_E407_CAN_COMM_TEST.c **** 
1899:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S121>/LessThanOrEqual' */
1900:HANcoder_E407_CAN_COMM_TEST.c ****       OF4_CAN1 = (rtb_Fix >= rtb_Power2);
1901:HANcoder_E407_CAN_COMM_TEST.c **** 
1902:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S122>/Switch2' incorporates:
1903:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
1904:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
1905:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude6'
1906:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S122>/LessThanOrEqual1'
1907:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S122>/LessThanOrEqual2'
1908:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S122>/Switch1'
1909:HANcoder_E407_CAN_COMM_TEST.c ****        */
1910:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_7_CAN1) {
1911:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S122>/Switch' */
1912:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
1913:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_7_CAN1 >= Tx_Min_CAN1) {
1914:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S122>/Switch1' */
1915:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_7_CAN1;
1916:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1917:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
1918:HANcoder_E407_CAN_COMM_TEST.c ****       }
1919:HANcoder_E407_CAN_COMM_TEST.c **** 
1920:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S122>/Switch2' */
1921:HANcoder_E407_CAN_COMM_TEST.c **** 
1922:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S122>/Abs' */
1923:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
1924:HANcoder_E407_CAN_COMM_TEST.c **** 
1925:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S122>/Fix' */
1926:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
1927:HANcoder_E407_CAN_COMM_TEST.c **** 
1928:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S122>/Minus' */
1929:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
1930:HANcoder_E407_CAN_COMM_TEST.c **** 
1931:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S122>/Gain' incorporates:
1932:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1933:HANcoder_E407_CAN_COMM_TEST.c ****        */
1934:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
1935:HANcoder_E407_CAN_COMM_TEST.c **** 
1936:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S122>/Power' incorporates:
1937:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S122>/Constant1'
1938:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S122>/Gain'
1939:HANcoder_E407_CAN_COMM_TEST.c ****        */
1940:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
1941:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
1942:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1943:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
1944:HANcoder_E407_CAN_COMM_TEST.c ****       }
1945:HANcoder_E407_CAN_COMM_TEST.c **** 
1946:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S122>/Power' */
1947:HANcoder_E407_CAN_COMM_TEST.c **** 
1948:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S122>/Power2' incorporates:
1949:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S122>/Constant4'
1950:HANcoder_E407_CAN_COMM_TEST.c ****        */
1951:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
1952:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
1953:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1954:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
1955:HANcoder_E407_CAN_COMM_TEST.c ****       }
1956:HANcoder_E407_CAN_COMM_TEST.c **** 
1957:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S122>/Power2' */
1958:HANcoder_E407_CAN_COMM_TEST.c **** 
1959:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S122>/Divide' */
1960:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
1961:HANcoder_E407_CAN_COMM_TEST.c **** 
1962:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S122>/Fix1' */
1963:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
1964:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
1965:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1966:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
1967:HANcoder_E407_CAN_COMM_TEST.c ****       }
1968:HANcoder_E407_CAN_COMM_TEST.c **** 
1969:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S122>/Fix1' */
1970:HANcoder_E407_CAN_COMM_TEST.c **** 
1971:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S122>/Cast' incorporates:
1972:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S122>/Constant'
1973:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S122>/GreaterThan'
1974:HANcoder_E407_CAN_COMM_TEST.c ****        */
1975:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_n = (uint8_T)(rtb_Switch2 < 0.0);
1976:HANcoder_E407_CAN_COMM_TEST.c **** 
1977:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S122>/Bit Shift' */
1978:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_n, &rtB.BitShift_ee);
1979:HANcoder_E407_CAN_COMM_TEST.c **** 
1980:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S122>/Bit Shift' */
1981:HANcoder_E407_CAN_COMM_TEST.c **** 
1982:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S122>/Power1' incorporates:
1983:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S122>/Constant2'
1984:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
1985:HANcoder_E407_CAN_COMM_TEST.c ****        */
1986:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
1987:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
1988:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
1989:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
1990:HANcoder_E407_CAN_COMM_TEST.c ****       }
1991:HANcoder_E407_CAN_COMM_TEST.c **** 
1992:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S122>/Power1' */
1993:HANcoder_E407_CAN_COMM_TEST.c **** 
1994:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S122>/Plus' incorporates:
1995:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S122>/Cast1'
1996:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S122>/Cast2'
1997:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S122>/Multiply'
1998:HANcoder_E407_CAN_COMM_TEST.c ****        */
1999:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded7_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2000:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ee.y) + (uint8_T)rtb_Fix1);
2001:HANcoder_E407_CAN_COMM_TEST.c **** 
2002:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S122>/LessThanOrEqual' */
2003:HANcoder_E407_CAN_COMM_TEST.c ****       OF7_CAN1 = (rtb_Fix >= rtb_Power2);
2004:HANcoder_E407_CAN_COMM_TEST.c **** 
2005:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S123>/Switch2' incorporates:
2006:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
2007:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
2008:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude7'
2009:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S123>/LessThanOrEqual1'
2010:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S123>/LessThanOrEqual2'
2011:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S123>/Switch1'
2012:HANcoder_E407_CAN_COMM_TEST.c ****        */
2013:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_8_CAN1) {
2014:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S123>/Switch' */
2015:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
2016:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_8_CAN1 >= Tx_Min_CAN1) {
2017:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S123>/Switch1' */
2018:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_8_CAN1;
2019:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2020:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
2021:HANcoder_E407_CAN_COMM_TEST.c ****       }
2022:HANcoder_E407_CAN_COMM_TEST.c **** 
2023:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S123>/Switch2' */
2024:HANcoder_E407_CAN_COMM_TEST.c **** 
2025:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S123>/Abs' */
2026:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2027:HANcoder_E407_CAN_COMM_TEST.c **** 
2028:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S123>/Fix' */
2029:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2030:HANcoder_E407_CAN_COMM_TEST.c **** 
2031:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S123>/Minus' */
2032:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2033:HANcoder_E407_CAN_COMM_TEST.c **** 
2034:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S123>/Gain' incorporates:
2035:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2036:HANcoder_E407_CAN_COMM_TEST.c ****        */
2037:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
2038:HANcoder_E407_CAN_COMM_TEST.c **** 
2039:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S123>/Power' incorporates:
2040:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S123>/Constant1'
2041:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S123>/Gain'
2042:HANcoder_E407_CAN_COMM_TEST.c ****        */
2043:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2044:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2045:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2046:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2047:HANcoder_E407_CAN_COMM_TEST.c ****       }
2048:HANcoder_E407_CAN_COMM_TEST.c **** 
2049:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S123>/Power' */
2050:HANcoder_E407_CAN_COMM_TEST.c **** 
2051:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S123>/Power2' incorporates:
2052:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S123>/Constant4'
2053:HANcoder_E407_CAN_COMM_TEST.c ****        */
2054:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2055:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2056:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2057:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2058:HANcoder_E407_CAN_COMM_TEST.c ****       }
2059:HANcoder_E407_CAN_COMM_TEST.c **** 
2060:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S123>/Power2' */
2061:HANcoder_E407_CAN_COMM_TEST.c **** 
2062:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S123>/Divide' */
2063:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2064:HANcoder_E407_CAN_COMM_TEST.c **** 
2065:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S123>/Fix1' */
2066:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2067:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2068:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2069:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2070:HANcoder_E407_CAN_COMM_TEST.c ****       }
2071:HANcoder_E407_CAN_COMM_TEST.c **** 
2072:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S123>/Fix1' */
2073:HANcoder_E407_CAN_COMM_TEST.c **** 
2074:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S123>/Cast' incorporates:
2075:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S123>/Constant'
2076:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S123>/GreaterThan'
2077:HANcoder_E407_CAN_COMM_TEST.c ****        */
2078:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_p = (uint8_T)(rtb_Switch2 < 0.0);
2079:HANcoder_E407_CAN_COMM_TEST.c **** 
2080:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S123>/Bit Shift' */
2081:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_p, &rtB.BitShift_o0);
2082:HANcoder_E407_CAN_COMM_TEST.c **** 
2083:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S123>/Bit Shift' */
2084:HANcoder_E407_CAN_COMM_TEST.c **** 
2085:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S123>/Power1' incorporates:
2086:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S123>/Constant2'
2087:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2088:HANcoder_E407_CAN_COMM_TEST.c ****        */
2089:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
2090:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
2091:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2092:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
2093:HANcoder_E407_CAN_COMM_TEST.c ****       }
2094:HANcoder_E407_CAN_COMM_TEST.c **** 
2095:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S123>/Power1' */
2096:HANcoder_E407_CAN_COMM_TEST.c **** 
2097:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S123>/Plus' incorporates:
2098:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S123>/Cast1'
2099:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S123>/Cast2'
2100:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S123>/Multiply'
2101:HANcoder_E407_CAN_COMM_TEST.c ****        */
2102:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded8_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2103:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_o0.y) + (uint8_T)rtb_Fix1);
2104:HANcoder_E407_CAN_COMM_TEST.c **** 
2105:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S123>/LessThanOrEqual' */
2106:HANcoder_E407_CAN_COMM_TEST.c ****       OF8_CAN1 = (rtb_Fix >= rtb_Power2);
2107:HANcoder_E407_CAN_COMM_TEST.c **** 
2108:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S124>/Switch2' incorporates:
2109:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
2110:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
2111:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude2'
2112:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S124>/LessThanOrEqual1'
2113:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S124>/LessThanOrEqual2'
2114:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S124>/Switch1'
2115:HANcoder_E407_CAN_COMM_TEST.c ****        */
2116:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_3_CAN1) {
2117:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S124>/Switch' */
2118:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
2119:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_3_CAN1 >= Tx_Min_CAN1) {
2120:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S124>/Switch1' */
2121:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_3_CAN1;
2122:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2123:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
2124:HANcoder_E407_CAN_COMM_TEST.c ****       }
2125:HANcoder_E407_CAN_COMM_TEST.c **** 
2126:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S124>/Switch2' */
2127:HANcoder_E407_CAN_COMM_TEST.c **** 
2128:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S124>/Abs' */
2129:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2130:HANcoder_E407_CAN_COMM_TEST.c **** 
2131:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S124>/Fix' */
2132:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2133:HANcoder_E407_CAN_COMM_TEST.c **** 
2134:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S124>/Minus' */
2135:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2136:HANcoder_E407_CAN_COMM_TEST.c **** 
2137:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S124>/Gain' incorporates:
2138:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2139:HANcoder_E407_CAN_COMM_TEST.c ****        */
2140:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
2141:HANcoder_E407_CAN_COMM_TEST.c **** 
2142:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S124>/Power' incorporates:
2143:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S124>/Constant1'
2144:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S124>/Gain'
2145:HANcoder_E407_CAN_COMM_TEST.c ****        */
2146:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2147:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2148:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2149:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2150:HANcoder_E407_CAN_COMM_TEST.c ****       }
2151:HANcoder_E407_CAN_COMM_TEST.c **** 
2152:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S124>/Power' */
2153:HANcoder_E407_CAN_COMM_TEST.c **** 
2154:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S124>/Power2' incorporates:
2155:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S124>/Constant4'
2156:HANcoder_E407_CAN_COMM_TEST.c ****        */
2157:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2158:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2159:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2160:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2161:HANcoder_E407_CAN_COMM_TEST.c ****       }
2162:HANcoder_E407_CAN_COMM_TEST.c **** 
2163:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S124>/Power2' */
2164:HANcoder_E407_CAN_COMM_TEST.c **** 
2165:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S124>/Divide' */
2166:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2167:HANcoder_E407_CAN_COMM_TEST.c **** 
2168:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S124>/Fix1' */
2169:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2170:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2171:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2172:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2173:HANcoder_E407_CAN_COMM_TEST.c ****       }
2174:HANcoder_E407_CAN_COMM_TEST.c **** 
2175:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S124>/Fix1' */
2176:HANcoder_E407_CAN_COMM_TEST.c **** 
2177:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S124>/Cast' incorporates:
2178:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S124>/Constant'
2179:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S124>/GreaterThan'
2180:HANcoder_E407_CAN_COMM_TEST.c ****        */
2181:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_l = (uint8_T)(rtb_Switch2 < 0.0);
2182:HANcoder_E407_CAN_COMM_TEST.c **** 
2183:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S124>/Bit Shift' */
2184:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_l, &rtB.BitShift_lm);
2185:HANcoder_E407_CAN_COMM_TEST.c **** 
2186:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S124>/Bit Shift' */
2187:HANcoder_E407_CAN_COMM_TEST.c **** 
2188:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S124>/Power1' incorporates:
2189:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S124>/Constant2'
2190:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2191:HANcoder_E407_CAN_COMM_TEST.c ****        */
2192:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
2193:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
2194:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2195:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
2196:HANcoder_E407_CAN_COMM_TEST.c ****       }
2197:HANcoder_E407_CAN_COMM_TEST.c **** 
2198:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S124>/Power1' */
2199:HANcoder_E407_CAN_COMM_TEST.c **** 
2200:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S124>/Plus' incorporates:
2201:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S124>/Cast1'
2202:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S124>/Cast2'
2203:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S124>/Multiply'
2204:HANcoder_E407_CAN_COMM_TEST.c ****        */
2205:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded3_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2206:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_lm.y) + (uint8_T)rtb_Fix1);
2207:HANcoder_E407_CAN_COMM_TEST.c **** 
2208:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S124>/LessThanOrEqual' */
2209:HANcoder_E407_CAN_COMM_TEST.c ****       OF3_CAN1 = (rtb_Fix >= rtb_Power2);
2210:HANcoder_E407_CAN_COMM_TEST.c **** 
2211:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S125>/Switch2' incorporates:
2212:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
2213:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
2214:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude1'
2215:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S125>/LessThanOrEqual1'
2216:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S125>/LessThanOrEqual2'
2217:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S125>/Switch1'
2218:HANcoder_E407_CAN_COMM_TEST.c ****        */
2219:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_2_CAN1) {
2220:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S125>/Switch' */
2221:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
2222:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_2_CAN1 >= Tx_Min_CAN1) {
2223:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S125>/Switch1' */
2224:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_2_CAN1;
2225:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2226:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
2227:HANcoder_E407_CAN_COMM_TEST.c ****       }
2228:HANcoder_E407_CAN_COMM_TEST.c **** 
2229:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S125>/Switch2' */
2230:HANcoder_E407_CAN_COMM_TEST.c **** 
2231:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S125>/Abs' */
2232:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2233:HANcoder_E407_CAN_COMM_TEST.c **** 
2234:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S125>/Fix' */
2235:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2236:HANcoder_E407_CAN_COMM_TEST.c **** 
2237:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S125>/Minus' */
2238:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2239:HANcoder_E407_CAN_COMM_TEST.c **** 
2240:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S125>/Gain' incorporates:
2241:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2242:HANcoder_E407_CAN_COMM_TEST.c ****        */
2243:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
2244:HANcoder_E407_CAN_COMM_TEST.c **** 
2245:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S125>/Power' incorporates:
2246:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S125>/Constant1'
2247:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S125>/Gain'
2248:HANcoder_E407_CAN_COMM_TEST.c ****        */
2249:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2250:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2251:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2252:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2253:HANcoder_E407_CAN_COMM_TEST.c ****       }
2254:HANcoder_E407_CAN_COMM_TEST.c **** 
2255:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S125>/Power' */
2256:HANcoder_E407_CAN_COMM_TEST.c **** 
2257:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S125>/Power2' incorporates:
2258:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S125>/Constant4'
2259:HANcoder_E407_CAN_COMM_TEST.c ****        */
2260:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2261:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2262:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2263:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2264:HANcoder_E407_CAN_COMM_TEST.c ****       }
2265:HANcoder_E407_CAN_COMM_TEST.c **** 
2266:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S125>/Power2' */
2267:HANcoder_E407_CAN_COMM_TEST.c **** 
2268:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S125>/Divide' */
2269:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2270:HANcoder_E407_CAN_COMM_TEST.c **** 
2271:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S125>/Fix1' */
2272:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2273:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2274:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2275:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2276:HANcoder_E407_CAN_COMM_TEST.c ****       }
2277:HANcoder_E407_CAN_COMM_TEST.c **** 
2278:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S125>/Fix1' */
2279:HANcoder_E407_CAN_COMM_TEST.c **** 
2280:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S125>/Cast' incorporates:
2281:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S125>/Constant'
2282:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S125>/GreaterThan'
2283:HANcoder_E407_CAN_COMM_TEST.c ****        */
2284:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_e4 = (uint8_T)(rtb_Switch2 < 0.0);
2285:HANcoder_E407_CAN_COMM_TEST.c **** 
2286:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S125>/Bit Shift' */
2287:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_e4, &rtB.BitShift_aa);
2288:HANcoder_E407_CAN_COMM_TEST.c **** 
2289:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S125>/Bit Shift' */
2290:HANcoder_E407_CAN_COMM_TEST.c **** 
2291:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S125>/Power1' incorporates:
2292:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S125>/Constant2'
2293:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2294:HANcoder_E407_CAN_COMM_TEST.c ****        */
2295:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
2296:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
2297:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2298:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
2299:HANcoder_E407_CAN_COMM_TEST.c ****       }
2300:HANcoder_E407_CAN_COMM_TEST.c **** 
2301:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S125>/Power1' */
2302:HANcoder_E407_CAN_COMM_TEST.c **** 
2303:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S125>/Plus' incorporates:
2304:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S125>/Cast1'
2305:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S125>/Cast2'
2306:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S125>/Multiply'
2307:HANcoder_E407_CAN_COMM_TEST.c ****        */
2308:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded2_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2309:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aa.y) + (uint8_T)rtb_Fix1);
2310:HANcoder_E407_CAN_COMM_TEST.c **** 
2311:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S125>/LessThanOrEqual' */
2312:HANcoder_E407_CAN_COMM_TEST.c ****       OF2_CAN1 = (rtb_Fix >= rtb_Power2);
2313:HANcoder_E407_CAN_COMM_TEST.c **** 
2314:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S126>/Switch2' incorporates:
2315:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant2'
2316:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant3'
2317:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude'
2318:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S126>/LessThanOrEqual1'
2319:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S126>/LessThanOrEqual2'
2320:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S126>/Switch1'
2321:HANcoder_E407_CAN_COMM_TEST.c ****        */
2322:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN1 < Tx_Buffer_1_CAN1) {
2323:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S126>/Switch' */
2324:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN1;
2325:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_1_CAN1 >= Tx_Min_CAN1) {
2326:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S126>/Switch1' */
2327:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_1_CAN1;
2328:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2329:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN1;
2330:HANcoder_E407_CAN_COMM_TEST.c ****       }
2331:HANcoder_E407_CAN_COMM_TEST.c **** 
2332:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S126>/Switch2' */
2333:HANcoder_E407_CAN_COMM_TEST.c **** 
2334:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S126>/Abs' */
2335:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2336:HANcoder_E407_CAN_COMM_TEST.c **** 
2337:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S126>/Fix' */
2338:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2339:HANcoder_E407_CAN_COMM_TEST.c **** 
2340:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S126>/Minus' */
2341:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2342:HANcoder_E407_CAN_COMM_TEST.c **** 
2343:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S126>/Gain' incorporates:
2344:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2345:HANcoder_E407_CAN_COMM_TEST.c ****        */
2346:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN1;
2347:HANcoder_E407_CAN_COMM_TEST.c **** 
2348:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S126>/Power' incorporates:
2349:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S126>/Constant1'
2350:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S126>/Gain'
2351:HANcoder_E407_CAN_COMM_TEST.c ****        */
2352:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2353:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2354:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2355:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2356:HANcoder_E407_CAN_COMM_TEST.c ****       }
2357:HANcoder_E407_CAN_COMM_TEST.c **** 
2358:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S126>/Power' */
2359:HANcoder_E407_CAN_COMM_TEST.c **** 
2360:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S126>/Power2' incorporates:
2361:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S126>/Constant4'
2362:HANcoder_E407_CAN_COMM_TEST.c ****        */
2363:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2364:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2365:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2366:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2367:HANcoder_E407_CAN_COMM_TEST.c ****       }
2368:HANcoder_E407_CAN_COMM_TEST.c **** 
2369:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S126>/Power2' */
2370:HANcoder_E407_CAN_COMM_TEST.c **** 
2371:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S126>/Divide' */
2372:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2373:HANcoder_E407_CAN_COMM_TEST.c **** 
2374:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S126>/Fix1' */
2375:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2376:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2377:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2378:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2379:HANcoder_E407_CAN_COMM_TEST.c ****       }
2380:HANcoder_E407_CAN_COMM_TEST.c **** 
2381:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S126>/Fix1' */
2382:HANcoder_E407_CAN_COMM_TEST.c **** 
2383:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S126>/Cast' incorporates:
2384:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S126>/Constant'
2385:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S126>/GreaterThan'
2386:HANcoder_E407_CAN_COMM_TEST.c ****        */
2387:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_eg = (uint8_T)(rtb_Switch2 < 0.0);
2388:HANcoder_E407_CAN_COMM_TEST.c **** 
2389:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S126>/Bit Shift' */
2390:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_eg, &rtB.BitShift_p1);
2391:HANcoder_E407_CAN_COMM_TEST.c **** 
2392:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S126>/Bit Shift' */
2393:HANcoder_E407_CAN_COMM_TEST.c **** 
2394:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S126>/Power1' incorporates:
2395:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S126>/Constant2'
2396:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant4'
2397:HANcoder_E407_CAN_COMM_TEST.c ****        */
2398:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > floor(precision_CAN1))) {
2399:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN1);
2400:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2401:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN1);
2402:HANcoder_E407_CAN_COMM_TEST.c ****       }
2403:HANcoder_E407_CAN_COMM_TEST.c **** 
2404:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S126>/Power1' */
2405:HANcoder_E407_CAN_COMM_TEST.c **** 
2406:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S126>/Plus' incorporates:
2407:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S126>/Cast1'
2408:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S126>/Cast2'
2409:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S126>/Multiply'
2410:HANcoder_E407_CAN_COMM_TEST.c ****        */
2411:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded1_CAN1 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2412:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_p1.y) + (uint8_T)rtb_Fix1);
2413:HANcoder_E407_CAN_COMM_TEST.c **** 
2414:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S126>/LessThanOrEqual' */
2415:HANcoder_E407_CAN_COMM_TEST.c ****       OF1_CAN1 = (rtb_Fix >= rtb_Power2);
2416:HANcoder_E407_CAN_COMM_TEST.c **** 
2417:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S113>/Switch2' incorporates:
2418:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2419:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2420:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude9'
2421:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S113>/LessThanOrEqual1'
2422:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S113>/LessThanOrEqual2'
2423:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S113>/Switch1'
2424:HANcoder_E407_CAN_COMM_TEST.c ****        */
2425:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_2_CAN2) {
2426:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S113>/Switch' */
2427:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2428:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_2_CAN2 >= Tx_Min_CAN2) {
2429:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S113>/Switch1' */
2430:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_2_CAN2;
2431:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2432:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2433:HANcoder_E407_CAN_COMM_TEST.c ****       }
2434:HANcoder_E407_CAN_COMM_TEST.c **** 
2435:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S113>/Switch2' */
2436:HANcoder_E407_CAN_COMM_TEST.c **** 
2437:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S113>/Abs' */
2438:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2439:HANcoder_E407_CAN_COMM_TEST.c **** 
2440:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S113>/Fix' */
2441:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2442:HANcoder_E407_CAN_COMM_TEST.c **** 
2443:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S113>/Minus' */
2444:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2445:HANcoder_E407_CAN_COMM_TEST.c **** 
2446:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S113>/Minus1' incorporates:
2447:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S113>/Constant3'
2448:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2449:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S114>/Minus1'
2450:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S115>/Minus1'
2451:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S116>/Minus1'
2452:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S117>/Minus1'
2453:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S118>/Minus1'
2454:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S119>/Minus1'
2455:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S127>/Minus1'
2456:HANcoder_E407_CAN_COMM_TEST.c ****        */
2457:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1_tmp = 7.0 - precision_CAN2;
2458:HANcoder_E407_CAN_COMM_TEST.c **** 
2459:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S113>/Gain' incorporates:
2460:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2461:HANcoder_E407_CAN_COMM_TEST.c ****        */
2462:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2463:HANcoder_E407_CAN_COMM_TEST.c **** 
2464:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S113>/Power' incorporates:
2465:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S113>/Constant1'
2466:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S113>/Gain'
2467:HANcoder_E407_CAN_COMM_TEST.c ****        */
2468:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2469:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2470:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2471:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2472:HANcoder_E407_CAN_COMM_TEST.c ****       }
2473:HANcoder_E407_CAN_COMM_TEST.c **** 
2474:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S113>/Power' */
2475:HANcoder_E407_CAN_COMM_TEST.c **** 
2476:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S113>/Power2' incorporates:
2477:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S113>/Constant4'
2478:HANcoder_E407_CAN_COMM_TEST.c ****        *  Sum: '<S113>/Minus1'
2479:HANcoder_E407_CAN_COMM_TEST.c ****        */
2480:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2481:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2482:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2483:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2484:HANcoder_E407_CAN_COMM_TEST.c ****       }
2485:HANcoder_E407_CAN_COMM_TEST.c **** 
2486:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S113>/Power2' */
2487:HANcoder_E407_CAN_COMM_TEST.c **** 
2488:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S113>/Divide' */
2489:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2490:HANcoder_E407_CAN_COMM_TEST.c **** 
2491:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S113>/Fix1' */
2492:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2493:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2494:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2495:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2496:HANcoder_E407_CAN_COMM_TEST.c ****       }
2497:HANcoder_E407_CAN_COMM_TEST.c **** 
2498:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S113>/Fix1' */
2499:HANcoder_E407_CAN_COMM_TEST.c **** 
2500:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S113>/Cast' incorporates:
2501:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S113>/Constant'
2502:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S113>/GreaterThan'
2503:HANcoder_E407_CAN_COMM_TEST.c ****        */
2504:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_h = (uint8_T)(rtb_Switch2 < 0.0);
2505:HANcoder_E407_CAN_COMM_TEST.c **** 
2506:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S113>/Bit Shift' */
2507:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_h, &rtB.BitShift_kb);
2508:HANcoder_E407_CAN_COMM_TEST.c **** 
2509:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S113>/Bit Shift' */
2510:HANcoder_E407_CAN_COMM_TEST.c **** 
2511:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S113>/Power1' incorporates:
2512:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S113>/Constant2'
2513:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2514:HANcoder_E407_CAN_COMM_TEST.c ****        */
2515:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
2516:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
2517:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2518:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
2519:HANcoder_E407_CAN_COMM_TEST.c ****       }
2520:HANcoder_E407_CAN_COMM_TEST.c **** 
2521:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S113>/Power1' */
2522:HANcoder_E407_CAN_COMM_TEST.c **** 
2523:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S113>/Plus' incorporates:
2524:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S113>/Cast1'
2525:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S113>/Cast2'
2526:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S113>/Multiply'
2527:HANcoder_E407_CAN_COMM_TEST.c ****        */
2528:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded2_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2529:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_kb.y) + (uint8_T)rtb_Fix1);
2530:HANcoder_E407_CAN_COMM_TEST.c **** 
2531:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S113>/LessThanOrEqual' */
2532:HANcoder_E407_CAN_COMM_TEST.c ****       OF2_CAN2 = (rtb_Fix >= rtb_Power2);
2533:HANcoder_E407_CAN_COMM_TEST.c **** 
2534:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S114>/Switch2' incorporates:
2535:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2536:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2537:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude10'
2538:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S114>/LessThanOrEqual1'
2539:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S114>/LessThanOrEqual2'
2540:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S114>/Switch1'
2541:HANcoder_E407_CAN_COMM_TEST.c ****        */
2542:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_3_CAN2) {
2543:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S114>/Switch' */
2544:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2545:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_3_CAN2 >= Tx_Min_CAN2) {
2546:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S114>/Switch1' */
2547:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_3_CAN2;
2548:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2549:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2550:HANcoder_E407_CAN_COMM_TEST.c ****       }
2551:HANcoder_E407_CAN_COMM_TEST.c **** 
2552:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S114>/Switch2' */
2553:HANcoder_E407_CAN_COMM_TEST.c **** 
2554:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S114>/Abs' */
2555:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2556:HANcoder_E407_CAN_COMM_TEST.c **** 
2557:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S114>/Fix' */
2558:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2559:HANcoder_E407_CAN_COMM_TEST.c **** 
2560:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S114>/Minus' */
2561:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2562:HANcoder_E407_CAN_COMM_TEST.c **** 
2563:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S114>/Gain' incorporates:
2564:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2565:HANcoder_E407_CAN_COMM_TEST.c ****        */
2566:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2567:HANcoder_E407_CAN_COMM_TEST.c **** 
2568:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S114>/Power' incorporates:
2569:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S114>/Constant1'
2570:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S114>/Gain'
2571:HANcoder_E407_CAN_COMM_TEST.c ****        */
2572:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2573:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2574:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2575:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2576:HANcoder_E407_CAN_COMM_TEST.c ****       }
2577:HANcoder_E407_CAN_COMM_TEST.c **** 
2578:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S114>/Power' */
2579:HANcoder_E407_CAN_COMM_TEST.c **** 
2580:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S114>/Power2' incorporates:
2581:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S114>/Constant4'
2582:HANcoder_E407_CAN_COMM_TEST.c ****        */
2583:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2584:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2585:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2586:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2587:HANcoder_E407_CAN_COMM_TEST.c ****       }
2588:HANcoder_E407_CAN_COMM_TEST.c **** 
2589:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S114>/Power2' */
2590:HANcoder_E407_CAN_COMM_TEST.c **** 
2591:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S114>/Divide' */
2592:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2593:HANcoder_E407_CAN_COMM_TEST.c **** 
2594:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S114>/Fix1' */
2595:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2596:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2597:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2598:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2599:HANcoder_E407_CAN_COMM_TEST.c ****       }
2600:HANcoder_E407_CAN_COMM_TEST.c **** 
2601:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S114>/Fix1' */
2602:HANcoder_E407_CAN_COMM_TEST.c **** 
2603:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S114>/Cast' incorporates:
2604:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S114>/Constant'
2605:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S114>/GreaterThan'
2606:HANcoder_E407_CAN_COMM_TEST.c ****        */
2607:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_ga = (uint8_T)(rtb_Switch2 < 0.0);
2608:HANcoder_E407_CAN_COMM_TEST.c **** 
2609:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S114>/Bit Shift' */
2610:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_ga, &rtB.BitShift_dt);
2611:HANcoder_E407_CAN_COMM_TEST.c **** 
2612:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S114>/Bit Shift' */
2613:HANcoder_E407_CAN_COMM_TEST.c **** 
2614:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S114>/Power1' incorporates:
2615:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S114>/Constant2'
2616:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2617:HANcoder_E407_CAN_COMM_TEST.c ****        */
2618:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
2619:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
2620:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2621:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
2622:HANcoder_E407_CAN_COMM_TEST.c ****       }
2623:HANcoder_E407_CAN_COMM_TEST.c **** 
2624:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S114>/Power1' */
2625:HANcoder_E407_CAN_COMM_TEST.c **** 
2626:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S114>/Plus' incorporates:
2627:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S114>/Cast1'
2628:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S114>/Cast2'
2629:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S114>/Multiply'
2630:HANcoder_E407_CAN_COMM_TEST.c ****        */
2631:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded3_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2632:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_dt.y) + (uint8_T)rtb_Fix1);
2633:HANcoder_E407_CAN_COMM_TEST.c **** 
2634:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S114>/LessThanOrEqual' */
2635:HANcoder_E407_CAN_COMM_TEST.c ****       OF3_CAN2 = (rtb_Fix >= rtb_Power2);
2636:HANcoder_E407_CAN_COMM_TEST.c **** 
2637:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S115>/Switch2' incorporates:
2638:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2639:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2640:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude11'
2641:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S115>/LessThanOrEqual1'
2642:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S115>/LessThanOrEqual2'
2643:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S115>/Switch1'
2644:HANcoder_E407_CAN_COMM_TEST.c ****        */
2645:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_4_CAN2) {
2646:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S115>/Switch' */
2647:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2648:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_4_CAN2 >= Tx_Min_CAN2) {
2649:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S115>/Switch1' */
2650:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_4_CAN2;
2651:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2652:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2653:HANcoder_E407_CAN_COMM_TEST.c ****       }
2654:HANcoder_E407_CAN_COMM_TEST.c **** 
2655:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S115>/Switch2' */
2656:HANcoder_E407_CAN_COMM_TEST.c **** 
2657:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S115>/Abs' */
2658:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2659:HANcoder_E407_CAN_COMM_TEST.c **** 
2660:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S115>/Fix' */
2661:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2662:HANcoder_E407_CAN_COMM_TEST.c **** 
2663:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S115>/Minus' */
2664:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2665:HANcoder_E407_CAN_COMM_TEST.c **** 
2666:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S115>/Gain' incorporates:
2667:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2668:HANcoder_E407_CAN_COMM_TEST.c ****        */
2669:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2670:HANcoder_E407_CAN_COMM_TEST.c **** 
2671:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S115>/Power' incorporates:
2672:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S115>/Constant1'
2673:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S115>/Gain'
2674:HANcoder_E407_CAN_COMM_TEST.c ****        */
2675:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2676:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2677:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2678:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2679:HANcoder_E407_CAN_COMM_TEST.c ****       }
2680:HANcoder_E407_CAN_COMM_TEST.c **** 
2681:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S115>/Power' */
2682:HANcoder_E407_CAN_COMM_TEST.c **** 
2683:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S115>/Power2' incorporates:
2684:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S115>/Constant4'
2685:HANcoder_E407_CAN_COMM_TEST.c ****        */
2686:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2687:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2688:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2689:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2690:HANcoder_E407_CAN_COMM_TEST.c ****       }
2691:HANcoder_E407_CAN_COMM_TEST.c **** 
2692:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S115>/Power2' */
2693:HANcoder_E407_CAN_COMM_TEST.c **** 
2694:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S115>/Divide' */
2695:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2696:HANcoder_E407_CAN_COMM_TEST.c **** 
2697:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S115>/Fix1' */
2698:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2699:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2700:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2701:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2702:HANcoder_E407_CAN_COMM_TEST.c ****       }
2703:HANcoder_E407_CAN_COMM_TEST.c **** 
2704:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S115>/Fix1' */
2705:HANcoder_E407_CAN_COMM_TEST.c **** 
2706:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S115>/Cast' incorporates:
2707:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S115>/Constant'
2708:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S115>/GreaterThan'
2709:HANcoder_E407_CAN_COMM_TEST.c ****        */
2710:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_o = (uint8_T)(rtb_Switch2 < 0.0);
2711:HANcoder_E407_CAN_COMM_TEST.c **** 
2712:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S115>/Bit Shift' */
2713:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_o, &rtB.BitShift_ks);
2714:HANcoder_E407_CAN_COMM_TEST.c **** 
2715:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S115>/Bit Shift' */
2716:HANcoder_E407_CAN_COMM_TEST.c **** 
2717:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S115>/Power1' incorporates:
2718:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S115>/Constant2'
2719:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2720:HANcoder_E407_CAN_COMM_TEST.c ****        */
2721:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
2722:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
2723:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2724:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
2725:HANcoder_E407_CAN_COMM_TEST.c ****       }
2726:HANcoder_E407_CAN_COMM_TEST.c **** 
2727:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S115>/Power1' */
2728:HANcoder_E407_CAN_COMM_TEST.c **** 
2729:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S115>/Plus' incorporates:
2730:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S115>/Cast1'
2731:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S115>/Cast2'
2732:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S115>/Multiply'
2733:HANcoder_E407_CAN_COMM_TEST.c ****        */
2734:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded4_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2735:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ks.y) + (uint8_T)rtb_Fix1);
2736:HANcoder_E407_CAN_COMM_TEST.c **** 
2737:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S115>/LessThanOrEqual' */
2738:HANcoder_E407_CAN_COMM_TEST.c ****       OF4_CAN2 = (rtb_Fix >= rtb_Power2);
2739:HANcoder_E407_CAN_COMM_TEST.c **** 
2740:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S116>/Switch2' incorporates:
2741:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2742:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2743:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude12'
2744:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S116>/LessThanOrEqual1'
2745:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S116>/LessThanOrEqual2'
2746:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S116>/Switch1'
2747:HANcoder_E407_CAN_COMM_TEST.c ****        */
2748:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_5_CAN2) {
2749:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S116>/Switch' */
2750:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2751:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_5_CAN2 >= Tx_Min_CAN2) {
2752:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S116>/Switch1' */
2753:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_5_CAN2;
2754:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2755:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2756:HANcoder_E407_CAN_COMM_TEST.c ****       }
2757:HANcoder_E407_CAN_COMM_TEST.c **** 
2758:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S116>/Switch2' */
2759:HANcoder_E407_CAN_COMM_TEST.c **** 
2760:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S116>/Abs' */
2761:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2762:HANcoder_E407_CAN_COMM_TEST.c **** 
2763:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S116>/Fix' */
2764:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2765:HANcoder_E407_CAN_COMM_TEST.c **** 
2766:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S116>/Minus' */
2767:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2768:HANcoder_E407_CAN_COMM_TEST.c **** 
2769:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S116>/Gain' incorporates:
2770:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2771:HANcoder_E407_CAN_COMM_TEST.c ****        */
2772:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2773:HANcoder_E407_CAN_COMM_TEST.c **** 
2774:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S116>/Power' incorporates:
2775:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S116>/Constant1'
2776:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S116>/Gain'
2777:HANcoder_E407_CAN_COMM_TEST.c ****        */
2778:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2779:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2780:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2781:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2782:HANcoder_E407_CAN_COMM_TEST.c ****       }
2783:HANcoder_E407_CAN_COMM_TEST.c **** 
2784:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S116>/Power' */
2785:HANcoder_E407_CAN_COMM_TEST.c **** 
2786:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S116>/Power2' incorporates:
2787:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S116>/Constant4'
2788:HANcoder_E407_CAN_COMM_TEST.c ****        */
2789:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2790:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2791:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2792:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2793:HANcoder_E407_CAN_COMM_TEST.c ****       }
2794:HANcoder_E407_CAN_COMM_TEST.c **** 
2795:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S116>/Power2' */
2796:HANcoder_E407_CAN_COMM_TEST.c **** 
2797:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S116>/Divide' */
2798:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2799:HANcoder_E407_CAN_COMM_TEST.c **** 
2800:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S116>/Fix1' */
2801:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2802:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2803:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2804:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2805:HANcoder_E407_CAN_COMM_TEST.c ****       }
2806:HANcoder_E407_CAN_COMM_TEST.c **** 
2807:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S116>/Fix1' */
2808:HANcoder_E407_CAN_COMM_TEST.c **** 
2809:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S116>/Cast' incorporates:
2810:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S116>/Constant'
2811:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S116>/GreaterThan'
2812:HANcoder_E407_CAN_COMM_TEST.c ****        */
2813:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_f = (uint8_T)(rtb_Switch2 < 0.0);
2814:HANcoder_E407_CAN_COMM_TEST.c **** 
2815:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S116>/Bit Shift' */
2816:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_f, &rtB.BitShift_ai);
2817:HANcoder_E407_CAN_COMM_TEST.c **** 
2818:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S116>/Bit Shift' */
2819:HANcoder_E407_CAN_COMM_TEST.c **** 
2820:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S116>/Power1' incorporates:
2821:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S116>/Constant2'
2822:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2823:HANcoder_E407_CAN_COMM_TEST.c ****        */
2824:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
2825:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
2826:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2827:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
2828:HANcoder_E407_CAN_COMM_TEST.c ****       }
2829:HANcoder_E407_CAN_COMM_TEST.c **** 
2830:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S116>/Power1' */
2831:HANcoder_E407_CAN_COMM_TEST.c **** 
2832:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S116>/Plus' incorporates:
2833:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S116>/Cast1'
2834:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S116>/Cast2'
2835:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S116>/Multiply'
2836:HANcoder_E407_CAN_COMM_TEST.c ****        */
2837:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded5_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2838:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ai.y) + (uint8_T)rtb_Fix1);
2839:HANcoder_E407_CAN_COMM_TEST.c **** 
2840:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S116>/LessThanOrEqual' */
2841:HANcoder_E407_CAN_COMM_TEST.c ****       OF5_CAN2 = (rtb_Fix >= rtb_Power2);
2842:HANcoder_E407_CAN_COMM_TEST.c **** 
2843:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S117>/Switch2' incorporates:
2844:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2845:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2846:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude13'
2847:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S117>/LessThanOrEqual1'
2848:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S117>/LessThanOrEqual2'
2849:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S117>/Switch1'
2850:HANcoder_E407_CAN_COMM_TEST.c ****        */
2851:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_6_CAN2) {
2852:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S117>/Switch' */
2853:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2854:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_6_CAN2 >= Tx_Min_CAN2) {
2855:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S117>/Switch1' */
2856:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_6_CAN2;
2857:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2858:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2859:HANcoder_E407_CAN_COMM_TEST.c ****       }
2860:HANcoder_E407_CAN_COMM_TEST.c **** 
2861:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S117>/Switch2' */
2862:HANcoder_E407_CAN_COMM_TEST.c **** 
2863:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S117>/Abs' */
2864:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2865:HANcoder_E407_CAN_COMM_TEST.c **** 
2866:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S117>/Fix' */
2867:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2868:HANcoder_E407_CAN_COMM_TEST.c **** 
2869:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S117>/Minus' */
2870:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2871:HANcoder_E407_CAN_COMM_TEST.c **** 
2872:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S117>/Gain' incorporates:
2873:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2874:HANcoder_E407_CAN_COMM_TEST.c ****        */
2875:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2876:HANcoder_E407_CAN_COMM_TEST.c **** 
2877:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S117>/Power' incorporates:
2878:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S117>/Constant1'
2879:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S117>/Gain'
2880:HANcoder_E407_CAN_COMM_TEST.c ****        */
2881:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2882:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2883:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2884:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2885:HANcoder_E407_CAN_COMM_TEST.c ****       }
2886:HANcoder_E407_CAN_COMM_TEST.c **** 
2887:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S117>/Power' */
2888:HANcoder_E407_CAN_COMM_TEST.c **** 
2889:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S117>/Power2' incorporates:
2890:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S117>/Constant4'
2891:HANcoder_E407_CAN_COMM_TEST.c ****        */
2892:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2893:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2894:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2895:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2896:HANcoder_E407_CAN_COMM_TEST.c ****       }
2897:HANcoder_E407_CAN_COMM_TEST.c **** 
2898:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S117>/Power2' */
2899:HANcoder_E407_CAN_COMM_TEST.c **** 
2900:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S117>/Divide' */
2901:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
2902:HANcoder_E407_CAN_COMM_TEST.c **** 
2903:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S117>/Fix1' */
2904:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
2905:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
2906:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2907:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
2908:HANcoder_E407_CAN_COMM_TEST.c ****       }
2909:HANcoder_E407_CAN_COMM_TEST.c **** 
2910:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S117>/Fix1' */
2911:HANcoder_E407_CAN_COMM_TEST.c **** 
2912:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S117>/Cast' incorporates:
2913:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S117>/Constant'
2914:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S117>/GreaterThan'
2915:HANcoder_E407_CAN_COMM_TEST.c ****        */
2916:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_k2 = (uint8_T)(rtb_Switch2 < 0.0);
2917:HANcoder_E407_CAN_COMM_TEST.c **** 
2918:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S117>/Bit Shift' */
2919:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_k2, &rtB.BitShift_l);
2920:HANcoder_E407_CAN_COMM_TEST.c **** 
2921:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S117>/Bit Shift' */
2922:HANcoder_E407_CAN_COMM_TEST.c **** 
2923:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S117>/Power1' incorporates:
2924:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S117>/Constant2'
2925:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2926:HANcoder_E407_CAN_COMM_TEST.c ****        */
2927:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
2928:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
2929:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2930:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
2931:HANcoder_E407_CAN_COMM_TEST.c ****       }
2932:HANcoder_E407_CAN_COMM_TEST.c **** 
2933:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S117>/Power1' */
2934:HANcoder_E407_CAN_COMM_TEST.c **** 
2935:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S117>/Plus' incorporates:
2936:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S117>/Cast1'
2937:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S117>/Cast2'
2938:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S117>/Multiply'
2939:HANcoder_E407_CAN_COMM_TEST.c ****        */
2940:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded6_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
2941:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_l.y) + (uint8_T)rtb_Fix1);
2942:HANcoder_E407_CAN_COMM_TEST.c **** 
2943:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S117>/LessThanOrEqual' */
2944:HANcoder_E407_CAN_COMM_TEST.c ****       OF6_CAN2 = (rtb_Fix >= rtb_Power2);
2945:HANcoder_E407_CAN_COMM_TEST.c **** 
2946:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S118>/Switch2' incorporates:
2947:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
2948:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
2949:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude14'
2950:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S118>/LessThanOrEqual1'
2951:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S118>/LessThanOrEqual2'
2952:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S118>/Switch1'
2953:HANcoder_E407_CAN_COMM_TEST.c ****        */
2954:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_7_CAN2) {
2955:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S118>/Switch' */
2956:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
2957:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_7_CAN2 >= Tx_Min_CAN2) {
2958:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S118>/Switch1' */
2959:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_7_CAN2;
2960:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2961:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
2962:HANcoder_E407_CAN_COMM_TEST.c ****       }
2963:HANcoder_E407_CAN_COMM_TEST.c **** 
2964:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S118>/Switch2' */
2965:HANcoder_E407_CAN_COMM_TEST.c **** 
2966:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S118>/Abs' */
2967:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
2968:HANcoder_E407_CAN_COMM_TEST.c **** 
2969:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S118>/Fix' */
2970:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
2971:HANcoder_E407_CAN_COMM_TEST.c **** 
2972:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S118>/Minus' */
2973:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
2974:HANcoder_E407_CAN_COMM_TEST.c **** 
2975:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S118>/Gain' incorporates:
2976:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
2977:HANcoder_E407_CAN_COMM_TEST.c ****        */
2978:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
2979:HANcoder_E407_CAN_COMM_TEST.c **** 
2980:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S118>/Power' incorporates:
2981:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S118>/Constant1'
2982:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S118>/Gain'
2983:HANcoder_E407_CAN_COMM_TEST.c ****        */
2984:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
2985:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
2986:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2987:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
2988:HANcoder_E407_CAN_COMM_TEST.c ****       }
2989:HANcoder_E407_CAN_COMM_TEST.c **** 
2990:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S118>/Power' */
2991:HANcoder_E407_CAN_COMM_TEST.c **** 
2992:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S118>/Power2' incorporates:
2993:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S118>/Constant4'
2994:HANcoder_E407_CAN_COMM_TEST.c ****        */
2995:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
2996:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
2997:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
2998:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
2999:HANcoder_E407_CAN_COMM_TEST.c ****       }
3000:HANcoder_E407_CAN_COMM_TEST.c **** 
3001:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S118>/Power2' */
3002:HANcoder_E407_CAN_COMM_TEST.c **** 
3003:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S118>/Divide' */
3004:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
3005:HANcoder_E407_CAN_COMM_TEST.c **** 
3006:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S118>/Fix1' */
3007:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
3008:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
3009:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3010:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
3011:HANcoder_E407_CAN_COMM_TEST.c ****       }
3012:HANcoder_E407_CAN_COMM_TEST.c **** 
3013:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S118>/Fix1' */
3014:HANcoder_E407_CAN_COMM_TEST.c **** 
3015:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S118>/Cast' incorporates:
3016:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S118>/Constant'
3017:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S118>/GreaterThan'
3018:HANcoder_E407_CAN_COMM_TEST.c ****        */
3019:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_m = (uint8_T)(rtb_Switch2 < 0.0);
3020:HANcoder_E407_CAN_COMM_TEST.c **** 
3021:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S118>/Bit Shift' */
3022:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_m, &rtB.BitShift_de);
3023:HANcoder_E407_CAN_COMM_TEST.c **** 
3024:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S118>/Bit Shift' */
3025:HANcoder_E407_CAN_COMM_TEST.c **** 
3026:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S118>/Power1' incorporates:
3027:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S118>/Constant2'
3028:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
3029:HANcoder_E407_CAN_COMM_TEST.c ****        */
3030:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
3031:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
3032:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3033:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
3034:HANcoder_E407_CAN_COMM_TEST.c ****       }
3035:HANcoder_E407_CAN_COMM_TEST.c **** 
3036:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S118>/Power1' */
3037:HANcoder_E407_CAN_COMM_TEST.c **** 
3038:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S118>/Plus' incorporates:
3039:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S118>/Cast1'
3040:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S118>/Cast2'
3041:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S118>/Multiply'
3042:HANcoder_E407_CAN_COMM_TEST.c ****        */
3043:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded7_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
3044:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_de.y) + (uint8_T)rtb_Fix1);
3045:HANcoder_E407_CAN_COMM_TEST.c **** 
3046:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S118>/LessThanOrEqual' */
3047:HANcoder_E407_CAN_COMM_TEST.c ****       OF7_CAN2 = (rtb_Fix >= rtb_Power2);
3048:HANcoder_E407_CAN_COMM_TEST.c **** 
3049:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S119>/Switch2' incorporates:
3050:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
3051:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
3052:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude15'
3053:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S119>/LessThanOrEqual1'
3054:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S119>/LessThanOrEqual2'
3055:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S119>/Switch1'
3056:HANcoder_E407_CAN_COMM_TEST.c ****        */
3057:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_8_CAN2) {
3058:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S119>/Switch' */
3059:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
3060:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_8_CAN2 >= Tx_Min_CAN2) {
3061:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S119>/Switch1' */
3062:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_8_CAN2;
3063:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3064:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
3065:HANcoder_E407_CAN_COMM_TEST.c ****       }
3066:HANcoder_E407_CAN_COMM_TEST.c **** 
3067:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S119>/Switch2' */
3068:HANcoder_E407_CAN_COMM_TEST.c **** 
3069:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S119>/Abs' */
3070:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
3071:HANcoder_E407_CAN_COMM_TEST.c **** 
3072:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S119>/Fix' */
3073:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
3074:HANcoder_E407_CAN_COMM_TEST.c **** 
3075:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S119>/Minus' */
3076:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
3077:HANcoder_E407_CAN_COMM_TEST.c **** 
3078:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S119>/Gain' incorporates:
3079:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
3080:HANcoder_E407_CAN_COMM_TEST.c ****        */
3081:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
3082:HANcoder_E407_CAN_COMM_TEST.c **** 
3083:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S119>/Power' incorporates:
3084:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S119>/Constant1'
3085:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S119>/Gain'
3086:HANcoder_E407_CAN_COMM_TEST.c ****        */
3087:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
3088:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
3089:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3090:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
3091:HANcoder_E407_CAN_COMM_TEST.c ****       }
3092:HANcoder_E407_CAN_COMM_TEST.c **** 
3093:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S119>/Power' */
3094:HANcoder_E407_CAN_COMM_TEST.c **** 
3095:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S119>/Power2' incorporates:
3096:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S119>/Constant4'
3097:HANcoder_E407_CAN_COMM_TEST.c ****        */
3098:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
3099:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
3100:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3101:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
3102:HANcoder_E407_CAN_COMM_TEST.c ****       }
3103:HANcoder_E407_CAN_COMM_TEST.c **** 
3104:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S119>/Power2' */
3105:HANcoder_E407_CAN_COMM_TEST.c **** 
3106:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S119>/Divide' */
3107:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
3108:HANcoder_E407_CAN_COMM_TEST.c **** 
3109:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S119>/Fix1' */
3110:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
3111:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
3112:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3113:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
3114:HANcoder_E407_CAN_COMM_TEST.c ****       }
3115:HANcoder_E407_CAN_COMM_TEST.c **** 
3116:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S119>/Fix1' */
3117:HANcoder_E407_CAN_COMM_TEST.c **** 
3118:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S119>/Cast' incorporates:
3119:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S119>/Constant'
3120:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S119>/GreaterThan'
3121:HANcoder_E407_CAN_COMM_TEST.c ****        */
3122:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_g = (uint8_T)(rtb_Switch2 < 0.0);
3123:HANcoder_E407_CAN_COMM_TEST.c **** 
3124:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S119>/Bit Shift' */
3125:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_g, &rtB.BitShift_cx);
3126:HANcoder_E407_CAN_COMM_TEST.c **** 
3127:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S119>/Bit Shift' */
3128:HANcoder_E407_CAN_COMM_TEST.c **** 
3129:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S119>/Power1' incorporates:
3130:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S119>/Constant2'
3131:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
3132:HANcoder_E407_CAN_COMM_TEST.c ****        */
3133:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
3134:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
3135:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3136:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
3137:HANcoder_E407_CAN_COMM_TEST.c ****       }
3138:HANcoder_E407_CAN_COMM_TEST.c **** 
3139:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S119>/Power1' */
3140:HANcoder_E407_CAN_COMM_TEST.c **** 
3141:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S119>/Plus' incorporates:
3142:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S119>/Cast1'
3143:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S119>/Cast2'
3144:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S119>/Multiply'
3145:HANcoder_E407_CAN_COMM_TEST.c ****        */
3146:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded8_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
3147:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_cx.y) + (uint8_T)rtb_Fix1);
3148:HANcoder_E407_CAN_COMM_TEST.c **** 
3149:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S119>/LessThanOrEqual' */
3150:HANcoder_E407_CAN_COMM_TEST.c ****       OF8_CAN2 = (rtb_Fix >= rtb_Power2);
3151:HANcoder_E407_CAN_COMM_TEST.c **** 
3152:HANcoder_E407_CAN_COMM_TEST.c ****       /* Switch: '<S127>/Switch2' incorporates:
3153:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant5'
3154:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant6'
3155:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/magnitude8'
3156:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S127>/LessThanOrEqual1'
3157:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S127>/LessThanOrEqual2'
3158:HANcoder_E407_CAN_COMM_TEST.c ****        *  Switch: '<S127>/Switch1'
3159:HANcoder_E407_CAN_COMM_TEST.c ****        */
3160:HANcoder_E407_CAN_COMM_TEST.c ****       if (Tx_Max_CAN2 < Tx_Buffer_1_CAN2) {
3161:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S127>/Switch' */
3162:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Max_CAN2;
3163:HANcoder_E407_CAN_COMM_TEST.c ****       } else if (Tx_Buffer_1_CAN2 >= Tx_Min_CAN2) {
3164:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S127>/Switch1' */
3165:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Buffer_1_CAN2;
3166:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3167:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Switch2 = Tx_Min_CAN2;
3168:HANcoder_E407_CAN_COMM_TEST.c ****       }
3169:HANcoder_E407_CAN_COMM_TEST.c **** 
3170:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Switch: '<S127>/Switch2' */
3171:HANcoder_E407_CAN_COMM_TEST.c **** 
3172:HANcoder_E407_CAN_COMM_TEST.c ****       /* Abs: '<S127>/Abs' */
3173:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Power2 = fabs(rtb_Switch2);
3174:HANcoder_E407_CAN_COMM_TEST.c **** 
3175:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S127>/Fix' */
3176:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix = floor(rtb_Power2);
3177:HANcoder_E407_CAN_COMM_TEST.c **** 
3178:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S127>/Minus' */
3179:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Minus = rtb_Power2 - rtb_Fix;
3180:HANcoder_E407_CAN_COMM_TEST.c **** 
3181:HANcoder_E407_CAN_COMM_TEST.c ****       /* Gain: '<S127>/Gain' incorporates:
3182:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
3183:HANcoder_E407_CAN_COMM_TEST.c ****        */
3184:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = (-1.0) * precision_CAN2;
3185:HANcoder_E407_CAN_COMM_TEST.c **** 
3186:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S127>/Power' incorporates:
3187:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S127>/Constant1'
3188:HANcoder_E407_CAN_COMM_TEST.c ****        *  Gain: '<S127>/Gain'
3189:HANcoder_E407_CAN_COMM_TEST.c ****        */
3190:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1 > floor(rtb_Fix1))) {
3191:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = -pow(-2.0, rtb_Fix1);
3192:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3193:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = pow(2.0, rtb_Fix1);
3194:HANcoder_E407_CAN_COMM_TEST.c ****       }
3195:HANcoder_E407_CAN_COMM_TEST.c **** 
3196:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S127>/Power' */
3197:HANcoder_E407_CAN_COMM_TEST.c **** 
3198:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S127>/Power2' incorporates:
3199:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S127>/Constant4'
3200:HANcoder_E407_CAN_COMM_TEST.c ****        */
3201:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (rtb_Fix1_tmp > floor(rtb_Fix1_tmp))) {
3202:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = -pow(-2.0, rtb_Fix1_tmp);
3203:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3204:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = pow(2.0, rtb_Fix1_tmp);
3205:HANcoder_E407_CAN_COMM_TEST.c ****       }
3206:HANcoder_E407_CAN_COMM_TEST.c **** 
3207:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S127>/Power2' */
3208:HANcoder_E407_CAN_COMM_TEST.c **** 
3209:HANcoder_E407_CAN_COMM_TEST.c ****       /* Product: '<S127>/Divide' */
3210:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Fix1 = rtb_Minus / rtb_Fix1;
3211:HANcoder_E407_CAN_COMM_TEST.c **** 
3212:HANcoder_E407_CAN_COMM_TEST.c ****       /* Rounding: '<S127>/Fix1' */
3213:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtb_Fix1 < 0.0) {
3214:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
3215:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3216:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = floor(rtb_Fix1);
3217:HANcoder_E407_CAN_COMM_TEST.c ****       }
3218:HANcoder_E407_CAN_COMM_TEST.c **** 
3219:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Rounding: '<S127>/Fix1' */
3220:HANcoder_E407_CAN_COMM_TEST.c **** 
3221:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S127>/Cast' incorporates:
3222:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S127>/Constant'
3223:HANcoder_E407_CAN_COMM_TEST.c ****        *  RelationalOperator: '<S127>/GreaterThan'
3224:HANcoder_E407_CAN_COMM_TEST.c ****        */
3225:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_Cast_k = (uint8_T)(rtb_Switch2 < 0.0);
3226:HANcoder_E407_CAN_COMM_TEST.c **** 
3227:HANcoder_E407_CAN_COMM_TEST.c ****       /* Outputs for Atomic SubSystem: '<S127>/Bit Shift' */
3228:HANcoder_E407_CAN_COMM_TEST.c ****       BitShift1(rtb_Cast_k, &rtB.BitShift_aq);
3229:HANcoder_E407_CAN_COMM_TEST.c **** 
3230:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Outputs for SubSystem: '<S127>/Bit Shift' */
3231:HANcoder_E407_CAN_COMM_TEST.c **** 
3232:HANcoder_E407_CAN_COMM_TEST.c ****       /* Math: '<S127>/Power1' incorporates:
3233:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S127>/Constant2'
3234:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant7'
3235:HANcoder_E407_CAN_COMM_TEST.c ****        */
3236:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > floor(precision_CAN2))) {
3237:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = -pow(-2.0, precision_CAN2);
3238:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
3239:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Minus = pow(2.0, precision_CAN2);
3240:HANcoder_E407_CAN_COMM_TEST.c ****       }
3241:HANcoder_E407_CAN_COMM_TEST.c **** 
3242:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Math: '<S127>/Power1' */
3243:HANcoder_E407_CAN_COMM_TEST.c **** 
3244:HANcoder_E407_CAN_COMM_TEST.c ****       /* Sum: '<S127>/Plus' incorporates:
3245:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S127>/Cast1'
3246:HANcoder_E407_CAN_COMM_TEST.c ****        *  DataTypeConversion: '<S127>/Cast2'
3247:HANcoder_E407_CAN_COMM_TEST.c ****        *  Product: '<S127>/Multiply'
3248:HANcoder_E407_CAN_COMM_TEST.c ****        */
3249:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_coded1_CAN2 = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtb_Fix
3250:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aq.y) + (uint8_T)rtb_Fix1);
3251:HANcoder_E407_CAN_COMM_TEST.c **** 
3252:HANcoder_E407_CAN_COMM_TEST.c ****       /* RelationalOperator: '<S127>/LessThanOrEqual' */
3253:HANcoder_E407_CAN_COMM_TEST.c ****       OF1_CAN2 = (rtb_Fix >= rtb_Power2);
3254:HANcoder_E407_CAN_COMM_TEST.c **** 
3255:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S12>/Data Type Conversion1' incorporates:
3256:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant'
3257:HANcoder_E407_CAN_COMM_TEST.c ****        */
3258:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_ID_CAN1_s = (uint32_T)Tx_ID_CAN1;
3259:HANcoder_E407_CAN_COMM_TEST.c **** 
3260:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S12>/Data Type Conversion2' incorporates:
3261:HANcoder_E407_CAN_COMM_TEST.c ****        *  Constant: '<S12>/Constant1'
3262:HANcoder_E407_CAN_COMM_TEST.c ****        */
3263:HANcoder_E407_CAN_COMM_TEST.c ****       Tx_ID_CAN2_s = (uint32_T)Tx_ID_CAN2;
3264:HANcoder_E407_CAN_COMM_TEST.c **** 
3265:HANcoder_E407_CAN_COMM_TEST.c ****       /* Update for M-S-Function: '<S110>/S-Function' */
3266:HANcoder_E407_CAN_COMM_TEST.c ****       {
3267:HANcoder_E407_CAN_COMM_TEST.c ****         /* prepare the data */
3268:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[0] = Tx_coded1_CAN1;
3269:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN1;
3270:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN1;
3271:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN1;
3272:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN1;
3273:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN1;
3274:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN1;
3275:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN1;
3276:HANcoder_E407_CAN_COMM_TEST.c **** 
3277:HANcoder_E407_CAN_COMM_TEST.c ****         /* send the data */
3278:HANcoder_E407_CAN_COMM_TEST.c ****         CanTransmit(0, constant_ID_TXCAN1, 8, &canTxData.uint8_T_info[0]);
3279:HANcoder_E407_CAN_COMM_TEST.c ****       }
3280:HANcoder_E407_CAN_COMM_TEST.c **** 
3281:HANcoder_E407_CAN_COMM_TEST.c ****       /* Update for M-S-Function: '<S111>/S-Function' */
3282:HANcoder_E407_CAN_COMM_TEST.c ****       {
3283:HANcoder_E407_CAN_COMM_TEST.c ****         /* prepare the data */
3284:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[0] = Tx_coded1_CAN2;
3285:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN2;
3286:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN2;
3287:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN2;
3288:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN2;
3289:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN2;
3290:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN2;
3291:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN2;
3292:HANcoder_E407_CAN_COMM_TEST.c **** 
3293:HANcoder_E407_CAN_COMM_TEST.c ****         /* send the data */
3294:HANcoder_E407_CAN_COMM_TEST.c ****         CanTransmit(1, constant_ID_TXCAN2, 8, &canTxData.uint8_T_info[0]);
3295:HANcoder_E407_CAN_COMM_TEST.c ****       }
3296:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
3297:HANcoder_E407_CAN_COMM_TEST.c ****       if (rtDWork.TxCAN_MODE) {
3298:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.TxCAN_MODE = false;
3299:HANcoder_E407_CAN_COMM_TEST.c ****       }
3300:HANcoder_E407_CAN_COMM_TEST.c ****     }
3301:HANcoder_E407_CAN_COMM_TEST.c **** 
3302:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Logic: '<S1>/AND3' */
3303:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Outputs for SubSystem: '<S1>/Tx CAN' */
3304:HANcoder_E407_CAN_COMM_TEST.c **** 
3305:HANcoder_E407_CAN_COMM_TEST.c ****     /* UnitDelay: '<S15>/Output' */
3306:HANcoder_E407_CAN_COMM_TEST.c ****     rtb_Output = rtDWork.Output_DSTATE;
3307:HANcoder_E407_CAN_COMM_TEST.c **** 
3308:HANcoder_E407_CAN_COMM_TEST.c ****     /* Sum: '<S17>/FixPt Sum1' incorporates:
3309:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S17>/FixPt Constant'
3310:HANcoder_E407_CAN_COMM_TEST.c ****      *  UnitDelay: '<S15>/Output'
3311:HANcoder_E407_CAN_COMM_TEST.c ****      */
3312:HANcoder_E407_CAN_COMM_TEST.c ****     rtb_FixPtSum1 = (uint8_T)((uint32_T)rtDWork.Output_DSTATE + ((uint8_T)1U));
3313:HANcoder_E407_CAN_COMM_TEST.c **** 
3314:HANcoder_E407_CAN_COMM_TEST.c ****     /* Switch: '<S18>/FixPt Switch' incorporates:
3315:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S18>/Constant'
3316:HANcoder_E407_CAN_COMM_TEST.c ****      */
3317:HANcoder_E407_CAN_COMM_TEST.c ****     if (rtb_FixPtSum1 > ((uint8_T)1U)) {
3318:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_FixPtSum1 = ((uint8_T)0U);
3319:HANcoder_E407_CAN_COMM_TEST.c ****     }
3320:HANcoder_E407_CAN_COMM_TEST.c **** 
3321:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Switch: '<S18>/FixPt Switch' */
3322:HANcoder_E407_CAN_COMM_TEST.c ****   }
3323:HANcoder_E407_CAN_COMM_TEST.c **** 
3324:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[2] == 0) {
 177              		.loc 1 3324 0
 178 0012 9AF80230 		ldrb	r3, [r10, #2]	@ zero_extendqisi2
 179 0016 002B     		cmp	r3, #0
 180 0018 3BD0     		beq	.L231
 181              	.L219:
3325:HANcoder_E407_CAN_COMM_TEST.c ****     /* UnitDelay: '<S16>/Output' */
3326:HANcoder_E407_CAN_COMM_TEST.c ****     rtB.Output = rtDWork.Output_DSTATE_k;
3327:HANcoder_E407_CAN_COMM_TEST.c **** 
3328:HANcoder_E407_CAN_COMM_TEST.c ****     /* Sum: '<S19>/FixPt Sum1' incorporates:
3329:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S19>/FixPt Constant'
3330:HANcoder_E407_CAN_COMM_TEST.c ****      */
3331:HANcoder_E407_CAN_COMM_TEST.c ****     rtb_FixPtSum1_b = (uint8_T)((uint32_T)rtB.Output + ((uint8_T)1U));
3332:HANcoder_E407_CAN_COMM_TEST.c **** 
3333:HANcoder_E407_CAN_COMM_TEST.c ****     /* Switch: '<S20>/FixPt Switch' incorporates:
3334:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S20>/Constant'
3335:HANcoder_E407_CAN_COMM_TEST.c ****      */
3336:HANcoder_E407_CAN_COMM_TEST.c ****     if (rtb_FixPtSum1_b > ((uint8_T)1U)) {
3337:HANcoder_E407_CAN_COMM_TEST.c ****       rtb_FixPtSum1_b = ((uint8_T)0U);
3338:HANcoder_E407_CAN_COMM_TEST.c ****     }
3339:HANcoder_E407_CAN_COMM_TEST.c **** 
3340:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Switch: '<S20>/FixPt Switch' */
3341:HANcoder_E407_CAN_COMM_TEST.c ****   }
3342:HANcoder_E407_CAN_COMM_TEST.c **** 
3343:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[1] == 0) {
3344:HANcoder_E407_CAN_COMM_TEST.c ****     /* Switch: '<S2>/Switch' incorporates:
3345:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S2>/Constant'
3346:HANcoder_E407_CAN_COMM_TEST.c ****      *  Logic: '<S2>/Logical Operator'
3347:HANcoder_E407_CAN_COMM_TEST.c ****      */
3348:HANcoder_E407_CAN_COMM_TEST.c ****     if (HANtuneOverride || WKUP_button) {
3349:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S2>/Data Type Conversion' */
3350:HANcoder_E407_CAN_COMM_TEST.c ****       LedValue = (rtb_Output != 0);
3351:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
3352:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S2>/Data Type Conversion' */
3353:HANcoder_E407_CAN_COMM_TEST.c ****       LedValue = (rtB.Output != 0);
3354:HANcoder_E407_CAN_COMM_TEST.c ****     }
3355:HANcoder_E407_CAN_COMM_TEST.c **** 
3356:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of Switch: '<S2>/Switch' */
3357:HANcoder_E407_CAN_COMM_TEST.c ****   }
3358:HANcoder_E407_CAN_COMM_TEST.c **** 
3359:HANcoder_E407_CAN_COMM_TEST.c ****   /* M-S-Function: '<S107>/Level-2 M-file S-Function' */
3360:HANcoder_E407_CAN_COMM_TEST.c ****   /* read the current CPU load */
3361:HANcoder_E407_CAN_COMM_TEST.c ****   SI_CPUload = OsGetCpuLoad();
 182              		.loc 1 3361 0
 183 001a FFF7FEFF 		bl	OsGetCpuLoad
 184              	.LVL13:
 185 001e 264B     		ldr	r3, .L420
 186 0020 1870     		strb	r0, [r3]
3362:HANcoder_E407_CAN_COMM_TEST.c **** 
3363:HANcoder_E407_CAN_COMM_TEST.c ****   /* M-S-Function: '<S108>/Level-2 M-file S-Function' */
3364:HANcoder_E407_CAN_COMM_TEST.c ****   /* read the free heap size */
3365:HANcoder_E407_CAN_COMM_TEST.c ****   SI_FreeHeap = OsGetFreeHeapSize();
 187              		.loc 1 3365 0
 188 0022 FFF7FEFF 		bl	OsGetFreeHeapSize
 189              	.LVL14:
 190 0026 254B     		ldr	r3, .L420+4
 191 0028 1860     		str	r0, [r3]
3366:HANcoder_E407_CAN_COMM_TEST.c **** 
3367:HANcoder_E407_CAN_COMM_TEST.c ****   /* M-S-Function: '<S109>/Level-2 M-file S-Function' */
3368:HANcoder_E407_CAN_COMM_TEST.c ****   /* read the task's free stack size */
3369:HANcoder_E407_CAN_COMM_TEST.c ****   SI_FreeStack = OsGetTaskFreeStackSize("AppCtrlTask");
 192              		.loc 1 3369 0
 193 002a 2548     		ldr	r0, .L420+8
 194 002c FFF7FEFF 		bl	OsGetTaskFreeStackSize
 195              	.LVL15:
 196 0030 244A     		ldr	r2, .L420+12
3370:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[1] == 0) {
 197              		.loc 1 3370 0
 198 0032 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
3369:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[1] == 0) {
 199              		.loc 1 3369 0
 200 0036 1060     		str	r0, [r2]
 201              		.loc 1 3370 0
 202 0038 53B9     		cbnz	r3, .L222
3371:HANcoder_E407_CAN_COMM_TEST.c ****     /* Update for M-S-Function: '<S22>/Level-2 M-file S-Function' */
3372:HANcoder_E407_CAN_COMM_TEST.c ****     /* update digital output */
3373:HANcoder_E407_CAN_COMM_TEST.c ****     if (LedValue == 0) {
 203              		.loc 1 3373 0
 204 003a 234B     		ldr	r3, .L420+16
 205 003c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 206 003e 0029     		cmp	r1, #0
 207 0040 37D1     		bne	.L334
 208              	.L332:
3374:HANcoder_E407_CAN_COMM_TEST.c ****       DigoutSet(DIGOUT_PORTC_PIN13, DIGOUT_LOW);
3375:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
3376:HANcoder_E407_CAN_COMM_TEST.c ****       DigoutSet(DIGOUT_PORTC_PIN13, DIGOUT_HIGH);
 209              		.loc 1 3376 0
 210 0042 4720     		movs	r0, #71
 211 0044 FFF7FEFF 		bl	DigoutSet
 212              	.LVL16:
3377:HANcoder_E407_CAN_COMM_TEST.c ****     }
3378:HANcoder_E407_CAN_COMM_TEST.c **** 
3379:HANcoder_E407_CAN_COMM_TEST.c ****     /* Update for UnitDelay: '<S15>/Output' */
3380:HANcoder_E407_CAN_COMM_TEST.c ****     rtDWork.Output_DSTATE = rtb_FixPtSum1;
 213              		.loc 1 3380 0
 214 0048 204A     		ldr	r2, .L420+20
 215 004a 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 216 004e 1472     		strb	r4, [r2, #8]
 217              	.L222:
3381:HANcoder_E407_CAN_COMM_TEST.c ****   }
3382:HANcoder_E407_CAN_COMM_TEST.c **** 
3383:HANcoder_E407_CAN_COMM_TEST.c ****   if (rtM->Timing.TaskCounters.TID[2] == 0) {
 218              		.loc 1 3383 0
 219 0050 9AF80220 		ldrb	r2, [r10, #2]	@ zero_extendqisi2
 220 0054 1E49     		ldr	r1, .L420+24
 221              	.LBB106:
 222              	.LBB107:
 247:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 223              		.loc 1 247 0
 224 0056 0133     		adds	r3, r3, #1
 225              	.LBE107:
 226              	.LBE106:
 227              		.loc 1 3383 0
 228 0058 B2B9     		cbnz	r2, .L225
 229              	.LBB113:
 230              	.LBB108:
 247:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 231              		.loc 1 247 0
 232 005a DBB2     		uxtb	r3, r3
 233              	.LBE108:
 234              	.LBE113:
3384:HANcoder_E407_CAN_COMM_TEST.c ****     /* Update for UnitDelay: '<S16>/Output' */
3385:HANcoder_E407_CAN_COMM_TEST.c ****     rtDWork.Output_DSTATE_k = rtb_FixPtSum1_b;
 235              		.loc 1 3385 0
 236 005c 1B48     		ldr	r0, .L420+20
 237 005e 9DF82840 		ldrb	r4, [sp, #40]	@ zero_extendqisi2
 238              	.LBB114:
 239              	.LBB109:
 247:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 240              		.loc 1 247 0
 241 0062 4B70     		strb	r3, [r1, #1]
 248:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[1] = 0;
 242              		.loc 1 248 0
 243 0064 092B     		cmp	r3, #9
 244              	.LBE109:
 245              	.LBE114:
 246              		.loc 1 3385 0
 247 0066 4472     		strb	r4, [r0, #9]
 248              	.LBB115:
 249              	.LBB110:
 248:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[1] = 0;
 250              		.loc 1 248 0
 251 0068 1ED9     		bls	.L226
 252              	.L228:
 249:HANcoder_E407_CAN_COMM_TEST.c ****   }
 253              		.loc 1 249 0
 254 006a 0023     		movs	r3, #0
 255 006c 8AF80130 		strb	r3, [r10, #1]
 256              	.L227:
 252:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[2]) > 19) {/* Sample time: [0.2s, 0.0s] */
 257              		.loc 1 252 0
 258 0070 0132     		adds	r2, r2, #1
 259 0072 D2B2     		uxtb	r2, r2
 253:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[2] = 0;
 260              		.loc 1 253 0
 261 0074 132A     		cmp	r2, #19
 254:HANcoder_E407_CAN_COMM_TEST.c ****   }
 262              		.loc 1 254 0
 263 0076 8ABF     		itet	hi
 264 0078 0023     		movhi	r3, #0
 252:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[2]) > 19) {/* Sample time: [0.2s, 0.0s] */
 265              		.loc 1 252 0
 266 007a 8AF80220 		strbls	r2, [r10, #2]
 254:HANcoder_E407_CAN_COMM_TEST.c ****   }
 267              		.loc 1 254 0
 268 007e 8AF80230 		strbhi	r3, [r10, #2]
 269              	.LBE110:
 270              	.LBE115:
3386:HANcoder_E407_CAN_COMM_TEST.c ****   }
3387:HANcoder_E407_CAN_COMM_TEST.c **** 
3388:HANcoder_E407_CAN_COMM_TEST.c ****   rate_scheduler();
3389:HANcoder_E407_CAN_COMM_TEST.c **** }
 271              		.loc 1 3389 0
 272 0082 11B0     		add	sp, sp, #68
 273              		.cfi_remember_state
 274              		.cfi_def_cfa_offset 36
 275              		@ sp needed
 276 0084 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 277              	.L225:
 278              		.cfi_restore_state
 279              	.LBB116:
 280              	.LBB111:
 247:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 281              		.loc 1 247 0
 282 0088 DBB2     		uxtb	r3, r3
 248:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[1] = 0;
 283              		.loc 1 248 0
 284 008a 092B     		cmp	r3, #9
 247:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.1s, 0.0s] */
 285              		.loc 1 247 0
 286 008c 4B70     		strb	r3, [r1, #1]
 248:HANcoder_E407_CAN_COMM_TEST.c ****     rtM->Timing.TaskCounters.TID[1] = 0;
 287              		.loc 1 248 0
 288 008e ECD8     		bhi	.L228
 289 0090 EEE7     		b	.L227
 290              	.L231:
 291              	.LBE111:
 292              	.LBE116:
3326:HANcoder_E407_CAN_COMM_TEST.c **** 
 293              		.loc 1 3326 0
 294 0092 0E4B     		ldr	r3, .L420+20
 295 0094 0F4A     		ldr	r2, .L420+28
 296 0096 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 297 0098 1370     		strb	r3, [r2]
3331:HANcoder_E407_CAN_COMM_TEST.c **** 
 298              		.loc 1 3331 0
 299 009a 0133     		adds	r3, r3, #1
 300 009c DBB2     		uxtb	r3, r3
 301              	.LVL17:
3337:HANcoder_E407_CAN_COMM_TEST.c ****     }
 302              		.loc 1 3337 0
 303 009e 022B     		cmp	r3, #2
 304 00a0 28BF     		it	cs
 305 00a2 0023     		movcs	r3, #0
 306              	.LVL18:
 307 00a4 0A93     		str	r3, [sp, #40]
 308 00a6 B8E7     		b	.L219
 309              	.LVL19:
 310              	.L226:
 311              	.LBB117:
 312              	.LBB112:
 252:HANcoder_E407_CAN_COMM_TEST.c ****   if ((rtM->Timing.TaskCounters.TID[2]) > 19) {/* Sample time: [0.2s, 0.0s] */
 313              		.loc 1 252 0
 314 00a8 0123     		movs	r3, #1
 315 00aa 8B70     		strb	r3, [r1, #2]
 316              	.LBE112:
 317              	.LBE117:
 318              		.loc 1 3389 0
 319 00ac 11B0     		add	sp, sp, #68
 320              		.cfi_remember_state
 321              		.cfi_def_cfa_offset 36
 322              		@ sp needed
 323 00ae BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 324              	.L334:
 325              		.cfi_restore_state
3376:HANcoder_E407_CAN_COMM_TEST.c ****     }
 326              		.loc 1 3376 0
 327 00b2 0121     		movs	r1, #1
 328 00b4 C5E7     		b	.L332
 329              	.L421:
 330 00b6 00BF     		.align	2
 331              	.L420:
 332 00b8 00000000 		.word	SI_CPUload
 333 00bc 00000000 		.word	SI_FreeHeap
 334 00c0 00000000 		.word	.LC0
 335 00c4 00000000 		.word	SI_FreeStack
 336 00c8 00000000 		.word	LedValue
 337 00cc 00000000 		.word	rtDWork
 338 00d0 00000000 		.word	rtM_
 339 00d4 00000000 		.word	rtB
 340              	.L333:
 350:HANcoder_E407_CAN_COMM_TEST.c **** 
 341              		.loc 1 350 0
 342 00d8 4720     		movs	r0, #71
 343 00da FFF7FEFF 		bl	DiginGet
 344              	.LVL20:
 345 00de C44B     		ldr	r3, .L422+8
 346 00e0 1870     		strb	r0, [r3]
 354:HANcoder_E407_CAN_COMM_TEST.c **** 
 347              		.loc 1 354 0
 348 00e2 0920     		movs	r0, #9
 349 00e4 FFF7FEFF 		bl	DiginGet
 350              	.LVL21:
 363:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.RxCAN_MODE) {
 351              		.loc 1 363 0
 352 00e8 C14B     		ldr	r3, .L422+8
 354:HANcoder_E407_CAN_COMM_TEST.c **** 
 353              		.loc 1 354 0
 354 00ea C24A     		ldr	r2, .L422+12
 363:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.RxCAN_MODE) {
 355              		.loc 1 363 0
 356 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354:HANcoder_E407_CAN_COMM_TEST.c **** 
 357              		.loc 1 354 0
 358 00ee 1070     		strb	r0, [r2]
 363:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.RxCAN_MODE) {
 359              		.loc 1 363 0
 360 00f0 002B     		cmp	r3, #0
 361 00f2 01F06787 		beq	.L14
 363:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.RxCAN_MODE) {
 362              		.loc 1 363 0 is_stmt 0 discriminator 1
 363 00f6 0028     		cmp	r0, #0
 364 00f8 01F06487 		beq	.L14
 364:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.RxCAN_MODE = true;
 365              		.loc 1 364 0 is_stmt 1
 366 00fc BE4B     		ldr	r3, .L422+16
 367 00fe 0393     		str	r3, [sp, #12]
 368 0100 1946     		mov	r1, r3
 369 0102 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 370 0104 002B     		cmp	r3, #0
 371 0106 02F01C81 		beq	.L335
 372              	.L15:
 371:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_0_constant_ID_RXCAN1.uint8_T_info[0], NULL);
 373              		.loc 1 371 0
 374 010a BC4B     		ldr	r3, .L422+20
 375 010c BC4C     		ldr	r4, .L422+24
 376 010e 1968     		ldr	r1, [r3]
 377 0110 0022     		movs	r2, #0
 378 0112 2346     		mov	r3, r4
 379 0114 0092     		str	r2, [sp]
 380 0116 1046     		mov	r0, r2
 381 0118 FFF7FEFF 		bl	CanIoGetMessage
 382              	.LVL22:
 383 011c B94B     		ldr	r3, .L422+28
 375:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 384              		.loc 1 375 0
 385 011e 0028     		cmp	r0, #0
 371:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_0_constant_ID_RXCAN1.uint8_T_info[0], NULL);
 386              		.loc 1 371 0
 387 0120 1870     		strb	r0, [r3]
 375:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 388              		.loc 1 375 0
 389 0122 42F35F82 		ble	.L336
 397:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN1 = rtb_SFunction_o9;
 390              		.loc 1 397 0
 391 0126 B84A     		ldr	r2, .L422+32
 392:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN1 = rtb_SFunction_o4;
 392              		.loc 1 392 0
 393 0128 B849     		ldr	r1, .L422+36
 397:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN1 = rtb_SFunction_o9;
 394              		.loc 1 397 0
 395 012a 0892     		str	r2, [sp, #32]
 398:HANcoder_E407_CAN_COMM_TEST.c ****       }
 396              		.loc 1 398 0
 397 012c B84A     		ldr	r2, .L422+40
 393:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN1 = rtb_SFunction_o5;
 398              		.loc 1 393 0
 399 012e B948     		ldr	r0, .L422+44
 398:HANcoder_E407_CAN_COMM_TEST.c ****       }
 400              		.loc 1 398 0
 401 0130 0692     		str	r2, [sp, #24]
 378:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o4 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[2];
 402              		.loc 1 378 0
 403 0132 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 392:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN1 = rtb_SFunction_o4;
 404              		.loc 1 392 0
 405 0134 0A70     		strb	r2, [r1]
 394:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN1 = rtb_SFunction_o6;
 406              		.loc 1 394 0
 407 0136 B84D     		ldr	r5, .L422+48
 379:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o5 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[3];
 408              		.loc 1 379 0
 409 0138 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 393:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN1 = rtb_SFunction_o5;
 410              		.loc 1 393 0
 411 013a 0270     		strb	r2, [r0]
 395:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN1 = rtb_SFunction_o7;
 412              		.loc 1 395 0
 413 013c B74E     		ldr	r6, .L422+52
 380:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o6 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[4];
 414              		.loc 1 380 0
 415 013e E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 393:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN1 = rtb_SFunction_o5;
 416              		.loc 1 393 0
 417 0140 0E90     		str	r0, [sp, #56]
 397:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN1 = rtb_SFunction_o9;
 418              		.loc 1 397 0
 419 0142 B148     		ldr	r0, .L422+32
 396:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN1 = rtb_SFunction_o8;
 420              		.loc 1 396 0
 421 0144 B64F     		ldr	r7, .L422+56
 392:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN1 = rtb_SFunction_o4;
 422              		.loc 1 392 0
 423 0146 0D91     		str	r1, [sp, #52]
 394:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN1 = rtb_SFunction_o6;
 424              		.loc 1 394 0
 425 0148 2A70     		strb	r2, [r5]
 383:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o9 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[7];
 426              		.loc 1 383 0
 427 014a A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 381:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o7 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[5];
 428              		.loc 1 381 0
 429 014c 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 391:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN1 = rtb_SFunction_o3;
 430              		.loc 1 391 0
 431 014e DFF8E4E2 		ldr	lr, .L422+76
 395:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN1 = rtb_SFunction_o7;
 432              		.loc 1 395 0
 433 0152 3270     		strb	r2, [r6]
 397:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN1 = rtb_SFunction_o9;
 434              		.loc 1 397 0
 435 0154 0170     		strb	r1, [r0]
 382:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o8 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[6];
 436              		.loc 1 382 0
 437 0156 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 398:HANcoder_E407_CAN_COMM_TEST.c ****       }
 438              		.loc 1 398 0
 439 0158 AD49     		ldr	r1, .L422+40
 377:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o3 = canRxData_0_constant_ID_RXCAN1.uint8_T_info[1];
 440              		.loc 1 377 0
 441 015a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 442              	.LVL23:
 396:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN1 = rtb_SFunction_o8;
 443              		.loc 1 396 0
 444 015c 3A70     		strb	r2, [r7]
 384:HANcoder_E407_CAN_COMM_TEST.c ****       }
 445              		.loc 1 384 0
 446 015e E279     		ldrb	r2, [r4, #7]	@ zero_extendqisi2
 447              	.LVL24:
 394:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN1 = rtb_SFunction_o6;
 448              		.loc 1 394 0
 449 0160 0F95     		str	r5, [sp, #60]
 395:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN1 = rtb_SFunction_o7;
 450              		.loc 1 395 0
 451 0162 0B96     		str	r6, [sp, #44]
 396:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN1 = rtb_SFunction_o8;
 452              		.loc 1 396 0
 453 0164 0C97     		str	r7, [sp, #48]
 391:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN1 = rtb_SFunction_o3;
 454              		.loc 1 391 0
 455 0166 8EF80030 		strb	r3, [lr]
 398:HANcoder_E407_CAN_COMM_TEST.c ****       }
 456              		.loc 1 398 0
 457 016a 0A70     		strb	r2, [r1]
 458              	.LVL25:
 459              	.L17:
 460              	.LBB118:
 461              	.LBB119:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 462              		.loc 1 277 0
 463 016c DA09     		lsrs	r2, r3, #7
 464 016e AD49     		ldr	r1, .L422+60
 465 0170 0291     		str	r1, [sp, #8]
 466              	.LBE119:
 467              	.LBE118:
 468              	.LBB121:
 469              	.LBB122:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 470              		.loc 1 299 0
 471 0172 D001     		lsls	r0, r2, #7
 472 0174 C0B2     		uxtb	r0, r0
 473 0176 81F82F00 		strb	r0, [r1, #47]
 474              	.LBE122:
 475              	.LBE121:
 476              	.LBB123:
 477              	.LBB120:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 478              		.loc 1 277 0
 479 017a 81F83020 		strb	r2, [r1, #48]
 480              	.LBE120:
 481              	.LBE123:
 424:HANcoder_E407_CAN_COMM_TEST.c **** 
 482              		.loc 1 424 0
 483 017e 181A     		subs	r0, r3, r0
 484              	.LVL26:
 485 0180 FFF7FEFF 		bl	__aeabi_i2d
 486              	.LVL27:
 437:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN1 > rtb_Minus)) {
 487              		.loc 1 437 0
 488 0184 DFF8B0B2 		ldr	fp, .L422+80
 424:HANcoder_E407_CAN_COMM_TEST.c **** 
 489              		.loc 1 424 0
 490 0188 8046     		mov	r8, r0
 441:HANcoder_E407_CAN_COMM_TEST.c ****       }
 491              		.loc 1 441 0
 492 018a DBE90023 		ldrd	r2, [fp]
 424:HANcoder_E407_CAN_COMM_TEST.c **** 
 493              		.loc 1 424 0
 494 018e 8946     		mov	r9, r1
 495              	.LVL28:
 441:HANcoder_E407_CAN_COMM_TEST.c ****       }
 496              		.loc 1 441 0
 497 0190 0020     		movs	r0, #0
 498 0192 4FF08041 		mov	r1, #1073741824
 499 0196 FFF7FEFF 		bl	pow
 500              	.LVL29:
 447:HANcoder_E407_CAN_COMM_TEST.c **** 
 501              		.loc 1 447 0
 502 019a 0246     		mov	r2, r0
 503 019c 0B46     		mov	r3, r1
 441:HANcoder_E407_CAN_COMM_TEST.c ****       }
 504              		.loc 1 441 0
 505 019e 0446     		mov	r4, r0
 506 01a0 0D46     		mov	r5, r1
 507              	.LVL30:
 447:HANcoder_E407_CAN_COMM_TEST.c **** 
 508              		.loc 1 447 0
 509 01a2 4046     		mov	r0, r8
 510 01a4 4946     		mov	r1, r9
 511 01a6 FFF7FEFF 		bl	__aeabi_ddiv
 512              	.LVL31:
 450:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 513              		.loc 1 450 0
 514 01aa 0022     		movs	r2, #0
 515 01ac 0023     		movs	r3, #0
 447:HANcoder_E407_CAN_COMM_TEST.c **** 
 516              		.loc 1 447 0
 517 01ae 0646     		mov	r6, r0
 518 01b0 0F46     		mov	r7, r1
 519              	.LVL32:
 450:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 520              		.loc 1 450 0
 521 01b2 FFF7FEFF 		bl	__aeabi_dcmplt
 522              	.LVL33:
 523 01b6 0028     		cmp	r0, #0
 524 01b8 42F00C82 		bne	.L337
 453:HANcoder_E407_CAN_COMM_TEST.c ****       }
 525              		.loc 1 453 0
 526 01bc 3046     		mov	r0, r6
 527 01be 3946     		mov	r1, r7
 528 01c0 FFF7FEFF 		bl	floor
 529              	.LVL34:
 530 01c4 0646     		mov	r6, r0
 531              	.LVL35:
 532 01c6 0F46     		mov	r7, r1
 533              	.LVL36:
 534              	.L20:
 473:HANcoder_E407_CAN_COMM_TEST.c **** 
 535              		.loc 1 473 0
 536 01c8 9FED877B 		vldr.64	d7, .L422
 461:HANcoder_E407_CAN_COMM_TEST.c **** 
 537              		.loc 1 461 0
 538 01cc 2246     		mov	r2, r4
 539 01ce 2B46     		mov	r3, r5
 540 01d0 3046     		mov	r0, r6
 541 01d2 3946     		mov	r1, r7
 473:HANcoder_E407_CAN_COMM_TEST.c **** 
 542              		.loc 1 473 0
 543 01d4 8DED047B 		vstr.64	d7, [sp, #16]
 461:HANcoder_E407_CAN_COMM_TEST.c **** 
 544              		.loc 1 461 0
 545 01d8 FFF7FEFF 		bl	__aeabi_dmul
 546              	.LVL37:
 547 01dc 0246     		mov	r2, r0
 548 01de 0B46     		mov	r3, r1
 549 01e0 4046     		mov	r0, r8
 550 01e2 4946     		mov	r1, r9
 551 01e4 FFF7FEFF 		bl	__aeabi_dsub
 552              	.LVL38:
 473:HANcoder_E407_CAN_COMM_TEST.c **** 
 553              		.loc 1 473 0
 554 01e8 DBF80030 		ldr	r3, [fp]
 555 01ec 0493     		str	r3, [sp, #16]
 556 01ee DBF80430 		ldr	r3, [fp, #4]
 557 01f2 03F10043 		add	r3, r3, #-2147483648
 558 01f6 0593     		str	r3, [sp, #20]
 482:HANcoder_E407_CAN_COMM_TEST.c ****       }
 559              		.loc 1 482 0
 560 01f8 DDE90423 		ldrd	r2, [sp, #16]
 461:HANcoder_E407_CAN_COMM_TEST.c **** 
 561              		.loc 1 461 0
 562 01fc 0446     		mov	r4, r0
 563              	.LVL39:
 564 01fe 0D46     		mov	r5, r1
 565              	.LVL40:
 482:HANcoder_E407_CAN_COMM_TEST.c ****       }
 566              		.loc 1 482 0
 567 0200 0020     		movs	r0, #0
 568 0202 4FF08041 		mov	r1, #1073741824
 569 0206 FFF7FEFF 		bl	pow
 570              	.LVL41:
 571 020a 0B46     		mov	r3, r1
 492:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 572              		.loc 1 492 0
 573 020c 0299     		ldr	r1, [sp, #8]
 574 020e 91F83010 		ldrb	r1, [r1, #48]	@ zero_extendqisi2
 482:HANcoder_E407_CAN_COMM_TEST.c ****       }
 575              		.loc 1 482 0
 576 0212 0246     		mov	r2, r0
 577              	.LVL42:
 493:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 578              		.loc 1 493 0
 579 0214 2046     		mov	r0, r4
 492:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 580              		.loc 1 492 0
 581 0216 0029     		cmp	r1, #0
 582 0218 41F0F086 		bne	.L338
 495:HANcoder_E407_CAN_COMM_TEST.c ****       }
 583              		.loc 1 495 0
 584 021c 2946     		mov	r1, r5
 585 021e FFF7FEFF 		bl	__aeabi_dmul
 586              	.LVL43:
 587 0222 3B46     		mov	r3, r7
 588 0224 3246     		mov	r2, r6
 589 0226 FFF7FEFF 		bl	__aeabi_dadd
 590              	.LVL44:
 591 022a 7F4B     		ldr	r3, .L422+64
 592 022c C3E90001 		strd	r0, [r3]
 593              	.L22:
 501:HANcoder_E407_CAN_COMM_TEST.c **** 
 594              		.loc 1 501 0
 595 0230 069B     		ldr	r3, [sp, #24]
 596              	.LBB124:
 597              	.LBB125:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 598              		.loc 1 277 0
 599 0232 029C     		ldr	r4, [sp, #8]
 600              	.LVL45:
 601              	.LBE125:
 602              	.LBE124:
 501:HANcoder_E407_CAN_COMM_TEST.c **** 
 603              		.loc 1 501 0
 604 0234 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 605              	.LVL46:
 606              	.LBB128:
 607              	.LBB126:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 608              		.loc 1 277 0
 609 0236 C209     		lsrs	r2, r0, #7
 610              	.LBE126:
 611              	.LBE128:
 612              	.LBB129:
 613              	.LBB130:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 614              		.loc 1 299 0
 615 0238 D301     		lsls	r3, r2, #7
 616 023a DBB2     		uxtb	r3, r3
 617              	.LBE130:
 618              	.LBE129:
 619              	.LBB132:
 620              	.LBB127:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 621              		.loc 1 277 0
 622 023c 84F82220 		strb	r2, [r4, #34]
 623              	.LBE127:
 624              	.LBE132:
 625              	.LBB133:
 626              	.LBB131:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 627              		.loc 1 299 0
 628 0240 84F82130 		strb	r3, [r4, #33]
 629              	.LBE131:
 630              	.LBE133:
 513:HANcoder_E407_CAN_COMM_TEST.c **** 
 631              		.loc 1 513 0
 632 0244 C01A     		subs	r0, r0, r3
 633              	.LVL47:
 634 0246 FFF7FEFF 		bl	__aeabi_i2d
 635              	.LVL48:
 522:HANcoder_E407_CAN_COMM_TEST.c ****       }
 636              		.loc 1 522 0
 637 024a DBE90023 		ldrd	r2, [fp]
 513:HANcoder_E407_CAN_COMM_TEST.c **** 
 638              		.loc 1 513 0
 639 024e 8046     		mov	r8, r0
 640 0250 8946     		mov	r9, r1
 641              	.LVL49:
 522:HANcoder_E407_CAN_COMM_TEST.c ****       }
 642              		.loc 1 522 0
 643 0252 0020     		movs	r0, #0
 644 0254 4FF08041 		mov	r1, #1073741824
 645 0258 FFF7FEFF 		bl	pow
 646              	.LVL50:
 526:HANcoder_E407_CAN_COMM_TEST.c **** 
 647              		.loc 1 526 0
 648 025c 0246     		mov	r2, r0
 649 025e 0B46     		mov	r3, r1
 522:HANcoder_E407_CAN_COMM_TEST.c ****       }
 650              		.loc 1 522 0
 651 0260 0446     		mov	r4, r0
 652 0262 0D46     		mov	r5, r1
 653              	.LVL51:
 526:HANcoder_E407_CAN_COMM_TEST.c **** 
 654              		.loc 1 526 0
 655 0264 4046     		mov	r0, r8
 656 0266 4946     		mov	r1, r9
 657 0268 FFF7FEFF 		bl	__aeabi_ddiv
 658              	.LVL52:
 529:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 659              		.loc 1 529 0
 660 026c 0022     		movs	r2, #0
 661 026e 0023     		movs	r3, #0
 526:HANcoder_E407_CAN_COMM_TEST.c **** 
 662              		.loc 1 526 0
 663 0270 0646     		mov	r6, r0
 664              	.LVL53:
 665 0272 0F46     		mov	r7, r1
 666              	.LVL54:
 529:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 667              		.loc 1 529 0
 668 0274 FFF7FEFF 		bl	__aeabi_dcmplt
 669              	.LVL55:
 670 0278 0028     		cmp	r0, #0
 671 027a 42F08B81 		bne	.L339
 532:HANcoder_E407_CAN_COMM_TEST.c ****       }
 672              		.loc 1 532 0
 673 027e 3046     		mov	r0, r6
 674 0280 3946     		mov	r1, r7
 675 0282 FFF7FEFF 		bl	floor
 676              	.LVL56:
 677 0286 0646     		mov	r6, r0
 678              	.LVL57:
 679 0288 0F46     		mov	r7, r1
 680              	.LVL58:
 681              	.L25:
 540:HANcoder_E407_CAN_COMM_TEST.c **** 
 682              		.loc 1 540 0
 683 028a 2246     		mov	r2, r4
 684 028c 2B46     		mov	r3, r5
 685 028e 3046     		mov	r0, r6
 686 0290 3946     		mov	r1, r7
 687 0292 FFF7FEFF 		bl	__aeabi_dmul
 688              	.LVL59:
 689 0296 0246     		mov	r2, r0
 690 0298 0B46     		mov	r3, r1
 691 029a 4046     		mov	r0, r8
 692 029c 4946     		mov	r1, r9
 693 029e FFF7FEFF 		bl	__aeabi_dsub
 694              	.LVL60:
 548:HANcoder_E407_CAN_COMM_TEST.c ****       }
 695              		.loc 1 548 0
 696 02a2 DDE90423 		ldrd	r2, [sp, #16]
 540:HANcoder_E407_CAN_COMM_TEST.c **** 
 697              		.loc 1 540 0
 698 02a6 0446     		mov	r4, r0
 699              	.LVL61:
 700 02a8 0D46     		mov	r5, r1
 701              	.LVL62:
 548:HANcoder_E407_CAN_COMM_TEST.c ****       }
 702              		.loc 1 548 0
 703 02aa 0020     		movs	r0, #0
 704 02ac 4FF08041 		mov	r1, #1073741824
 705 02b0 FFF7FEFF 		bl	pow
 706              	.LVL63:
 707 02b4 0B46     		mov	r3, r1
 558:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 708              		.loc 1 558 0
 709 02b6 0299     		ldr	r1, [sp, #8]
 710 02b8 91F82210 		ldrb	r1, [r1, #34]	@ zero_extendqisi2
 548:HANcoder_E407_CAN_COMM_TEST.c ****       }
 711              		.loc 1 548 0
 712 02bc 0246     		mov	r2, r0
 713              	.LVL64:
 559:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 714              		.loc 1 559 0
 715 02be 2046     		mov	r0, r4
 558:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 716              		.loc 1 558 0
 717 02c0 0029     		cmp	r1, #0
 718 02c2 02F06680 		beq	.L26
 559:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 719              		.loc 1 559 0
 720 02c6 2946     		mov	r1, r5
 721 02c8 FFF7FEFF 		bl	__aeabi_dmul
 722              	.LVL65:
 723 02cc 3246     		mov	r2, r6
 724 02ce 3B46     		mov	r3, r7
 725 02d0 FFF7FEFF 		bl	__aeabi_dadd
 726              	.LVL66:
 727 02d4 554B     		ldr	r3, .L422+68
 728 02d6 01F10042 		add	r2, r1, #-2147483648
 729 02da 83E80500 		stmia	r3, {r0, r2}
 730              	.L27:
 567:HANcoder_E407_CAN_COMM_TEST.c **** 
 731              		.loc 1 567 0
 732 02de 0D9B     		ldr	r3, [sp, #52]
 733              	.LBB134:
 734              	.LBB135:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 735              		.loc 1 277 0
 736 02e0 029C     		ldr	r4, [sp, #8]
 737              	.LVL67:
 738              	.LBE135:
 739              	.LBE134:
 567:HANcoder_E407_CAN_COMM_TEST.c **** 
 740              		.loc 1 567 0
 741 02e2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 742              	.LVL68:
 743              	.LBB138:
 744              	.LBB136:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 745              		.loc 1 277 0
 746 02e4 C209     		lsrs	r2, r0, #7
 747              	.LBE136:
 748              	.LBE138:
 749              	.LBB139:
 750              	.LBB140:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 751              		.loc 1 299 0
 752 02e6 D301     		lsls	r3, r2, #7
 753 02e8 DBB2     		uxtb	r3, r3
 754              	.LBE140:
 755              	.LBE139:
 756              	.LBB142:
 757              	.LBB137:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 758              		.loc 1 277 0
 759 02ea 84F82020 		strb	r2, [r4, #32]
 760              	.LBE137:
 761              	.LBE142:
 762              	.LBB143:
 763              	.LBB141:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 764              		.loc 1 299 0
 765 02ee E377     		strb	r3, [r4, #31]
 766              	.LBE141:
 767              	.LBE143:
 579:HANcoder_E407_CAN_COMM_TEST.c **** 
 768              		.loc 1 579 0
 769 02f0 C01A     		subs	r0, r0, r3
 770              	.LVL69:
 771 02f2 FFF7FEFF 		bl	__aeabi_i2d
 772              	.LVL70:
 588:HANcoder_E407_CAN_COMM_TEST.c ****       }
 773              		.loc 1 588 0
 774 02f6 DBE90023 		ldrd	r2, [fp]
 579:HANcoder_E407_CAN_COMM_TEST.c **** 
 775              		.loc 1 579 0
 776 02fa 8046     		mov	r8, r0
 777 02fc 8946     		mov	r9, r1
 778              	.LVL71:
 588:HANcoder_E407_CAN_COMM_TEST.c ****       }
 779              		.loc 1 588 0
 780 02fe 0020     		movs	r0, #0
 781 0300 4FF08041 		mov	r1, #1073741824
 782 0304 FFF7FEFF 		bl	pow
 783              	.LVL72:
 592:HANcoder_E407_CAN_COMM_TEST.c **** 
 784              		.loc 1 592 0
 785 0308 0246     		mov	r2, r0
 786 030a 0B46     		mov	r3, r1
 588:HANcoder_E407_CAN_COMM_TEST.c ****       }
 787              		.loc 1 588 0
 788 030c 0446     		mov	r4, r0
 789 030e 0D46     		mov	r5, r1
 790              	.LVL73:
 592:HANcoder_E407_CAN_COMM_TEST.c **** 
 791              		.loc 1 592 0
 792 0310 4046     		mov	r0, r8
 793 0312 4946     		mov	r1, r9
 794 0314 FFF7FEFF 		bl	__aeabi_ddiv
 795              	.LVL74:
 595:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 796              		.loc 1 595 0
 797 0318 0022     		movs	r2, #0
 798 031a 0023     		movs	r3, #0
 592:HANcoder_E407_CAN_COMM_TEST.c **** 
 799              		.loc 1 592 0
 800 031c 0646     		mov	r6, r0
 801              	.LVL75:
 802 031e 0F46     		mov	r7, r1
 803              	.LVL76:
 595:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 804              		.loc 1 595 0
 805 0320 FFF7FEFF 		bl	__aeabi_dcmplt
 806              	.LVL77:
 807 0324 0028     		cmp	r0, #0
 808 0326 42F07781 		bne	.L340
 598:HANcoder_E407_CAN_COMM_TEST.c ****       }
 809              		.loc 1 598 0
 810 032a 3046     		mov	r0, r6
 811 032c 3946     		mov	r1, r7
 812 032e FFF7FEFF 		bl	floor
 813              	.LVL78:
 814 0332 0646     		mov	r6, r0
 815              	.LVL79:
 816 0334 0F46     		mov	r7, r1
 817              	.LVL80:
 818              	.L30:
 606:HANcoder_E407_CAN_COMM_TEST.c **** 
 819              		.loc 1 606 0
 820 0336 2246     		mov	r2, r4
 821 0338 2B46     		mov	r3, r5
 822 033a 3046     		mov	r0, r6
 823 033c 3946     		mov	r1, r7
 824 033e FFF7FEFF 		bl	__aeabi_dmul
 825              	.LVL81:
 826 0342 0246     		mov	r2, r0
 827 0344 0B46     		mov	r3, r1
 828 0346 4046     		mov	r0, r8
 829 0348 4946     		mov	r1, r9
 830 034a FFF7FEFF 		bl	__aeabi_dsub
 831              	.LVL82:
 614:HANcoder_E407_CAN_COMM_TEST.c ****       }
 832              		.loc 1 614 0
 833 034e DDE90423 		ldrd	r2, [sp, #16]
 606:HANcoder_E407_CAN_COMM_TEST.c **** 
 834              		.loc 1 606 0
 835 0352 0446     		mov	r4, r0
 836              	.LVL83:
 837 0354 0D46     		mov	r5, r1
 838              	.LVL84:
 614:HANcoder_E407_CAN_COMM_TEST.c ****       }
 839              		.loc 1 614 0
 840 0356 0020     		movs	r0, #0
 841 0358 4FF08041 		mov	r1, #1073741824
 842 035c FFF7FEFF 		bl	pow
 843              	.LVL85:
 844 0360 0B46     		mov	r3, r1
 624:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 845              		.loc 1 624 0
 846 0362 0299     		ldr	r1, [sp, #8]
 847 0364 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
 614:HANcoder_E407_CAN_COMM_TEST.c ****       }
 848              		.loc 1 614 0
 849 0368 0246     		mov	r2, r0
 850              	.LVL86:
 625:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 851              		.loc 1 625 0
 852 036a 2046     		mov	r0, r4
 624:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 853              		.loc 1 624 0
 854 036c 0029     		cmp	r1, #0
 855 036e 02F00480 		beq	.L31
 625:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 856              		.loc 1 625 0
 857 0372 2946     		mov	r1, r5
 858 0374 FFF7FEFF 		bl	__aeabi_dmul
 859              	.LVL87:
 860 0378 3246     		mov	r2, r6
 861 037a 3B46     		mov	r3, r7
 862 037c FFF7FEFF 		bl	__aeabi_dadd
 863              	.LVL88:
 864 0380 2B4B     		ldr	r3, .L422+72
 865 0382 01F10042 		add	r2, r1, #-2147483648
 866 0386 83E80500 		stmia	r3, {r0, r2}
 867              	.L32:
 633:HANcoder_E407_CAN_COMM_TEST.c **** 
 868              		.loc 1 633 0
 869 038a 0E9B     		ldr	r3, [sp, #56]
 870              	.LBB144:
 871              	.LBB145:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 872              		.loc 1 277 0
 873 038c 029C     		ldr	r4, [sp, #8]
 874              	.LVL89:
 875              	.LBE145:
 876              	.LBE144:
 633:HANcoder_E407_CAN_COMM_TEST.c **** 
 877              		.loc 1 633 0
 878 038e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 879              	.LVL90:
 880              	.LBB148:
 881              	.LBB146:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 882              		.loc 1 277 0
 883 0390 C209     		lsrs	r2, r0, #7
 884              	.LBE146:
 885              	.LBE148:
 886              	.LBB149:
 887              	.LBB150:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 888              		.loc 1 299 0
 889 0392 D301     		lsls	r3, r2, #7
 890 0394 DBB2     		uxtb	r3, r3
 891              	.LBE150:
 892              	.LBE149:
 893              	.LBB152:
 894              	.LBB147:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 895              		.loc 1 277 0
 896 0396 A277     		strb	r2, [r4, #30]
 897              	.LBE147:
 898              	.LBE152:
 899              	.LBB153:
 900              	.LBB151:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 901              		.loc 1 299 0
 902 0398 6377     		strb	r3, [r4, #29]
 903              	.LBE151:
 904              	.LBE153:
 645:HANcoder_E407_CAN_COMM_TEST.c **** 
 905              		.loc 1 645 0
 906 039a C01A     		subs	r0, r0, r3
 907              	.LVL91:
 908 039c FFF7FEFF 		bl	__aeabi_i2d
 909              	.LVL92:
 654:HANcoder_E407_CAN_COMM_TEST.c ****       }
 910              		.loc 1 654 0
 911 03a0 DBE90023 		ldrd	r2, [fp]
 645:HANcoder_E407_CAN_COMM_TEST.c **** 
 912              		.loc 1 645 0
 913 03a4 8046     		mov	r8, r0
 914 03a6 8946     		mov	r9, r1
 915              	.LVL93:
 654:HANcoder_E407_CAN_COMM_TEST.c ****       }
 916              		.loc 1 654 0
 917 03a8 0020     		movs	r0, #0
 918 03aa 4FF08041 		mov	r1, #1073741824
 919 03ae FFF7FEFF 		bl	pow
 920              	.LVL94:
 658:HANcoder_E407_CAN_COMM_TEST.c **** 
 921              		.loc 1 658 0
 922 03b2 0246     		mov	r2, r0
 923 03b4 0B46     		mov	r3, r1
 654:HANcoder_E407_CAN_COMM_TEST.c ****       }
 924              		.loc 1 654 0
 925 03b6 0446     		mov	r4, r0
 926 03b8 0D46     		mov	r5, r1
 927              	.LVL95:
 658:HANcoder_E407_CAN_COMM_TEST.c **** 
 928              		.loc 1 658 0
 929 03ba 4046     		mov	r0, r8
 930 03bc 4946     		mov	r1, r9
 931 03be FFF7FEFF 		bl	__aeabi_ddiv
 932              	.LVL96:
 661:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 933              		.loc 1 661 0
 934 03c2 0022     		movs	r2, #0
 935 03c4 0023     		movs	r3, #0
 658:HANcoder_E407_CAN_COMM_TEST.c **** 
 936              		.loc 1 658 0
 937 03c6 0646     		mov	r6, r0
 938              	.LVL97:
 939 03c8 0F46     		mov	r7, r1
 940              	.LVL98:
 661:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 941              		.loc 1 661 0
 942 03ca FFF7FEFF 		bl	__aeabi_dcmplt
 943              	.LVL99:
 944 03ce 0028     		cmp	r0, #0
 945 03d0 42F0C080 		bne	.L341
 664:HANcoder_E407_CAN_COMM_TEST.c ****       }
 946              		.loc 1 664 0
 947 03d4 3046     		mov	r0, r6
 948 03d6 3946     		mov	r1, r7
 949 03d8 FFF7FEFF 		bl	floor
 950              	.LVL100:
 951 03dc 0646     		mov	r6, r0
 952              	.LVL101:
 953 03de 0F46     		mov	r7, r1
 954 03e0 2CE0     		b	.L423
 955              	.L424:
 956 03e2 00BFAFF3 		.align	3
 956      0080
 957              	.L422:
 958 03e8 00000000 		.word	0
 959 03ec 00000000 		.word	0
 960 03f0 00000000 		.word	WKUP_button
 961 03f4 00000000 		.word	receiver_id
 962 03f8 00000000 		.word	rtDWork
 963 03fc 00000000 		.word	constant_ID_RXCAN1
 964 0400 00000000 		.word	.LANCHOR0
 965 0404 00000000 		.word	new_CAN1
 966 0408 00000000 		.word	Rx_coded7_CAN1
 967 040c 00000000 		.word	Rx_coded2_CAN1
 968 0410 00000000 		.word	Rx_coded8_CAN1
 969 0414 00000000 		.word	Rx_coded3_CAN1
 970 0418 00000000 		.word	Rx_coded4_CAN1
 971 041c 00000000 		.word	Rx_coded5_CAN1
 972 0420 00000000 		.word	Rx_coded6_CAN1
 973 0424 00000000 		.word	rtB
 974 0428 00000000 		.word	Rx_Buffer_1_CAN1
 975 042c 00000000 		.word	Rx_Buffer_8_CAN1
 976 0430 00000000 		.word	Rx_Buffer_2_CAN1
 977 0434 00000000 		.word	Rx_coded1_CAN1
 978 0438 00000000 		.word	.LANCHOR1
 979              	.L423:
 980              	.LVL102:
 981              	.L35:
 672:HANcoder_E407_CAN_COMM_TEST.c **** 
 982              		.loc 1 672 0
 983 043c 2246     		mov	r2, r4
 984 043e 2B46     		mov	r3, r5
 985 0440 3046     		mov	r0, r6
 986 0442 3946     		mov	r1, r7
 987 0444 FFF7FEFF 		bl	__aeabi_dmul
 988              	.LVL103:
 989 0448 0246     		mov	r2, r0
 990 044a 0B46     		mov	r3, r1
 991 044c 4046     		mov	r0, r8
 992 044e 4946     		mov	r1, r9
 993 0450 FFF7FEFF 		bl	__aeabi_dsub
 994              	.LVL104:
 680:HANcoder_E407_CAN_COMM_TEST.c ****       }
 995              		.loc 1 680 0
 996 0454 DDE90423 		ldrd	r2, [sp, #16]
 672:HANcoder_E407_CAN_COMM_TEST.c **** 
 997              		.loc 1 672 0
 998 0458 0446     		mov	r4, r0
 999              	.LVL105:
 1000 045a 0D46     		mov	r5, r1
 1001              	.LVL106:
 680:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1002              		.loc 1 680 0
 1003 045c 0020     		movs	r0, #0
 1004 045e 4FF08041 		mov	r1, #1073741824
 1005 0462 FFF7FEFF 		bl	pow
 1006              	.LVL107:
 1007 0466 0B46     		mov	r3, r1
 690:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1008              		.loc 1 690 0
 1009 0468 0299     		ldr	r1, [sp, #8]
 1010 046a 897F     		ldrb	r1, [r1, #30]	@ zero_extendqisi2
 680:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1011              		.loc 1 680 0
 1012 046c 0246     		mov	r2, r0
 1013              	.LVL108:
 691:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1014              		.loc 1 691 0
 1015 046e 2046     		mov	r0, r4
 690:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1016              		.loc 1 690 0
 1017 0470 0029     		cmp	r1, #0
 1018 0472 01F0BE87 		beq	.L36
 691:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1019              		.loc 1 691 0
 1020 0476 2946     		mov	r1, r5
 1021 0478 FFF7FEFF 		bl	__aeabi_dmul
 1022              	.LVL109:
 1023 047c 3246     		mov	r2, r6
 1024 047e 3B46     		mov	r3, r7
 1025 0480 FFF7FEFF 		bl	__aeabi_dadd
 1026              	.LVL110:
 1027 0484 D24B     		ldr	r3, .L425
 1028 0486 01F10042 		add	r2, r1, #-2147483648
 1029 048a 83E80500 		stmia	r3, {r0, r2}
 1030              	.L37:
 699:HANcoder_E407_CAN_COMM_TEST.c **** 
 1031              		.loc 1 699 0
 1032 048e 0F9B     		ldr	r3, [sp, #60]
 1033              	.LBB154:
 1034              	.LBB155:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1035              		.loc 1 277 0
 1036 0490 029C     		ldr	r4, [sp, #8]
 1037              	.LVL111:
 1038              	.LBE155:
 1039              	.LBE154:
 699:HANcoder_E407_CAN_COMM_TEST.c **** 
 1040              		.loc 1 699 0
 1041 0492 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1042              	.LVL112:
 1043              	.LBB158:
 1044              	.LBB156:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1045              		.loc 1 277 0
 1046 0494 C209     		lsrs	r2, r0, #7
 1047              	.LBE156:
 1048              	.LBE158:
 1049              	.LBB159:
 1050              	.LBB160:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1051              		.loc 1 299 0
 1052 0496 D301     		lsls	r3, r2, #7
 1053 0498 DBB2     		uxtb	r3, r3
 1054              	.LBE160:
 1055              	.LBE159:
 1056              	.LBB162:
 1057              	.LBB157:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1058              		.loc 1 277 0
 1059 049a 2277     		strb	r2, [r4, #28]
 1060              	.LBE157:
 1061              	.LBE162:
 1062              	.LBB163:
 1063              	.LBB161:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1064              		.loc 1 299 0
 1065 049c E376     		strb	r3, [r4, #27]
 1066              	.LBE161:
 1067              	.LBE163:
 711:HANcoder_E407_CAN_COMM_TEST.c **** 
 1068              		.loc 1 711 0
 1069 049e C01A     		subs	r0, r0, r3
 1070              	.LVL113:
 1071 04a0 FFF7FEFF 		bl	__aeabi_i2d
 1072              	.LVL114:
 720:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1073              		.loc 1 720 0
 1074 04a4 DBE90023 		ldrd	r2, [fp]
 711:HANcoder_E407_CAN_COMM_TEST.c **** 
 1075              		.loc 1 711 0
 1076 04a8 8046     		mov	r8, r0
 1077 04aa 8946     		mov	r9, r1
 1078              	.LVL115:
 720:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1079              		.loc 1 720 0
 1080 04ac 0020     		movs	r0, #0
 1081 04ae 4FF08041 		mov	r1, #1073741824
 1082 04b2 FFF7FEFF 		bl	pow
 1083              	.LVL116:
 724:HANcoder_E407_CAN_COMM_TEST.c **** 
 1084              		.loc 1 724 0
 1085 04b6 0246     		mov	r2, r0
 1086 04b8 0B46     		mov	r3, r1
 720:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1087              		.loc 1 720 0
 1088 04ba 0446     		mov	r4, r0
 1089 04bc 0D46     		mov	r5, r1
 1090              	.LVL117:
 724:HANcoder_E407_CAN_COMM_TEST.c **** 
 1091              		.loc 1 724 0
 1092 04be 4046     		mov	r0, r8
 1093 04c0 4946     		mov	r1, r9
 1094 04c2 FFF7FEFF 		bl	__aeabi_ddiv
 1095              	.LVL118:
 727:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1096              		.loc 1 727 0
 1097 04c6 0022     		movs	r2, #0
 1098 04c8 0023     		movs	r3, #0
 724:HANcoder_E407_CAN_COMM_TEST.c **** 
 1099              		.loc 1 724 0
 1100 04ca 0646     		mov	r6, r0
 1101              	.LVL119:
 1102 04cc 0F46     		mov	r7, r1
 1103              	.LVL120:
 727:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1104              		.loc 1 727 0
 1105 04ce FFF7FEFF 		bl	__aeabi_dcmplt
 1106              	.LVL121:
 1107 04d2 0028     		cmp	r0, #0
 1108 04d4 42F07680 		bne	.L342
 730:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1109              		.loc 1 730 0
 1110 04d8 3046     		mov	r0, r6
 1111 04da 3946     		mov	r1, r7
 1112 04dc FFF7FEFF 		bl	floor
 1113              	.LVL122:
 1114 04e0 0646     		mov	r6, r0
 1115              	.LVL123:
 1116 04e2 0F46     		mov	r7, r1
 1117              	.LVL124:
 1118              	.L40:
 738:HANcoder_E407_CAN_COMM_TEST.c **** 
 1119              		.loc 1 738 0
 1120 04e4 2246     		mov	r2, r4
 1121 04e6 2B46     		mov	r3, r5
 1122 04e8 3046     		mov	r0, r6
 1123 04ea 3946     		mov	r1, r7
 1124 04ec FFF7FEFF 		bl	__aeabi_dmul
 1125              	.LVL125:
 1126 04f0 0246     		mov	r2, r0
 1127 04f2 0B46     		mov	r3, r1
 1128 04f4 4046     		mov	r0, r8
 1129 04f6 4946     		mov	r1, r9
 1130 04f8 FFF7FEFF 		bl	__aeabi_dsub
 1131              	.LVL126:
 746:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1132              		.loc 1 746 0
 1133 04fc DDE90423 		ldrd	r2, [sp, #16]
 738:HANcoder_E407_CAN_COMM_TEST.c **** 
 1134              		.loc 1 738 0
 1135 0500 0446     		mov	r4, r0
 1136              	.LVL127:
 1137 0502 0D46     		mov	r5, r1
 1138              	.LVL128:
 746:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1139              		.loc 1 746 0
 1140 0504 0020     		movs	r0, #0
 1141 0506 4FF08041 		mov	r1, #1073741824
 1142 050a FFF7FEFF 		bl	pow
 1143              	.LVL129:
 1144 050e 0B46     		mov	r3, r1
 756:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1145              		.loc 1 756 0
 1146 0510 0299     		ldr	r1, [sp, #8]
 1147 0512 097F     		ldrb	r1, [r1, #28]	@ zero_extendqisi2
 746:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1148              		.loc 1 746 0
 1149 0514 0246     		mov	r2, r0
 1150              	.LVL130:
 757:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1151              		.loc 1 757 0
 1152 0516 2046     		mov	r0, r4
 756:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1153              		.loc 1 756 0
 1154 0518 0029     		cmp	r1, #0
 1155 051a 01F05E87 		beq	.L41
 757:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1156              		.loc 1 757 0
 1157 051e 2946     		mov	r1, r5
 1158 0520 FFF7FEFF 		bl	__aeabi_dmul
 1159              	.LVL131:
 1160 0524 3246     		mov	r2, r6
 1161 0526 3B46     		mov	r3, r7
 1162 0528 FFF7FEFF 		bl	__aeabi_dadd
 1163              	.LVL132:
 1164 052c A94B     		ldr	r3, .L425+4
 1165 052e 01F10042 		add	r2, r1, #-2147483648
 1166 0532 83E80500 		stmia	r3, {r0, r2}
 1167              	.L42:
 765:HANcoder_E407_CAN_COMM_TEST.c **** 
 1168              		.loc 1 765 0
 1169 0536 0B9B     		ldr	r3, [sp, #44]
 1170              	.LBB164:
 1171              	.LBB165:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1172              		.loc 1 277 0
 1173 0538 029C     		ldr	r4, [sp, #8]
 1174              	.LVL133:
 1175              	.LBE165:
 1176              	.LBE164:
 765:HANcoder_E407_CAN_COMM_TEST.c **** 
 1177              		.loc 1 765 0
 1178 053a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1179              	.LVL134:
 1180              	.LBB168:
 1181              	.LBB166:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1182              		.loc 1 277 0
 1183 053c C209     		lsrs	r2, r0, #7
 1184              	.LBE166:
 1185              	.LBE168:
 1186              	.LBB169:
 1187              	.LBB170:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1188              		.loc 1 299 0
 1189 053e D301     		lsls	r3, r2, #7
 1190 0540 DBB2     		uxtb	r3, r3
 1191              	.LBE170:
 1192              	.LBE169:
 1193              	.LBB172:
 1194              	.LBB167:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1195              		.loc 1 277 0
 1196 0542 A276     		strb	r2, [r4, #26]
 1197              	.LBE167:
 1198              	.LBE172:
 1199              	.LBB173:
 1200              	.LBB171:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1201              		.loc 1 299 0
 1202 0544 6376     		strb	r3, [r4, #25]
 1203              	.LBE171:
 1204              	.LBE173:
 777:HANcoder_E407_CAN_COMM_TEST.c **** 
 1205              		.loc 1 777 0
 1206 0546 C01A     		subs	r0, r0, r3
 1207              	.LVL135:
 1208 0548 FFF7FEFF 		bl	__aeabi_i2d
 1209              	.LVL136:
 786:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1210              		.loc 1 786 0
 1211 054c DBE90023 		ldrd	r2, [fp]
 777:HANcoder_E407_CAN_COMM_TEST.c **** 
 1212              		.loc 1 777 0
 1213 0550 0446     		mov	r4, r0
 1214 0552 0D46     		mov	r5, r1
 1215              	.LVL137:
 786:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1216              		.loc 1 786 0
 1217 0554 0020     		movs	r0, #0
 1218 0556 4FF08041 		mov	r1, #1073741824
 1219 055a FFF7FEFF 		bl	pow
 1220              	.LVL138:
 790:HANcoder_E407_CAN_COMM_TEST.c **** 
 1221              		.loc 1 790 0
 1222 055e 0246     		mov	r2, r0
 1223 0560 0B46     		mov	r3, r1
 786:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1224              		.loc 1 786 0
 1225 0562 0646     		mov	r6, r0
 1226              	.LVL139:
 1227 0564 0F46     		mov	r7, r1
 1228              	.LVL140:
 790:HANcoder_E407_CAN_COMM_TEST.c **** 
 1229              		.loc 1 790 0
 1230 0566 2046     		mov	r0, r4
 1231 0568 2946     		mov	r1, r5
 1232 056a FFF7FEFF 		bl	__aeabi_ddiv
 1233              	.LVL141:
 793:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1234              		.loc 1 793 0
 1235 056e 0022     		movs	r2, #0
 1236 0570 0023     		movs	r3, #0
 790:HANcoder_E407_CAN_COMM_TEST.c **** 
 1237              		.loc 1 790 0
 1238 0572 8046     		mov	r8, r0
 1239 0574 8946     		mov	r9, r1
 1240              	.LVL142:
 793:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1241              		.loc 1 793 0
 1242 0576 FFF7FEFF 		bl	__aeabi_dcmplt
 1243              	.LVL143:
 1244 057a 0028     		cmp	r0, #0
 1245 057c 42F01A80 		bne	.L343
 796:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1246              		.loc 1 796 0
 1247 0580 4046     		mov	r0, r8
 1248 0582 4946     		mov	r1, r9
 1249 0584 FFF7FEFF 		bl	floor
 1250              	.LVL144:
 1251 0588 8046     		mov	r8, r0
 1252              	.LVL145:
 1253 058a 8946     		mov	r9, r1
 1254              	.LVL146:
 1255              	.L45:
 804:HANcoder_E407_CAN_COMM_TEST.c **** 
 1256              		.loc 1 804 0
 1257 058c 3246     		mov	r2, r6
 1258 058e 3B46     		mov	r3, r7
 1259 0590 4046     		mov	r0, r8
 1260 0592 4946     		mov	r1, r9
 1261 0594 FFF7FEFF 		bl	__aeabi_dmul
 1262              	.LVL147:
 1263 0598 0246     		mov	r2, r0
 1264 059a 0B46     		mov	r3, r1
 1265 059c 2046     		mov	r0, r4
 1266 059e 2946     		mov	r1, r5
 1267 05a0 FFF7FEFF 		bl	__aeabi_dsub
 1268              	.LVL148:
 812:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1269              		.loc 1 812 0
 1270 05a4 DDE90423 		ldrd	r2, [sp, #16]
 804:HANcoder_E407_CAN_COMM_TEST.c **** 
 1271              		.loc 1 804 0
 1272 05a8 0446     		mov	r4, r0
 1273              	.LVL149:
 1274 05aa 0D46     		mov	r5, r1
 1275              	.LVL150:
 812:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1276              		.loc 1 812 0
 1277 05ac 0020     		movs	r0, #0
 1278 05ae 4FF08041 		mov	r1, #1073741824
 1279 05b2 FFF7FEFF 		bl	pow
 1280              	.LVL151:
 1281 05b6 0B46     		mov	r3, r1
 822:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1282              		.loc 1 822 0
 1283 05b8 0299     		ldr	r1, [sp, #8]
 1284 05ba 897E     		ldrb	r1, [r1, #26]	@ zero_extendqisi2
 812:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1285              		.loc 1 812 0
 1286 05bc 0246     		mov	r2, r0
 1287              	.LVL152:
 823:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1288              		.loc 1 823 0
 1289 05be 2046     		mov	r0, r4
 822:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1290              		.loc 1 822 0
 1291 05c0 0029     		cmp	r1, #0
 1292 05c2 01F0FE86 		beq	.L46
 823:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1293              		.loc 1 823 0
 1294 05c6 2946     		mov	r1, r5
 1295 05c8 FFF7FEFF 		bl	__aeabi_dmul
 1296              	.LVL153:
 1297 05cc 4246     		mov	r2, r8
 1298 05ce 4B46     		mov	r3, r9
 1299 05d0 FFF7FEFF 		bl	__aeabi_dadd
 1300              	.LVL154:
 1301 05d4 804B     		ldr	r3, .L425+8
 1302 05d6 01F10042 		add	r2, r1, #-2147483648
 1303 05da 83E80500 		stmia	r3, {r0, r2}
 1304              	.L47:
 831:HANcoder_E407_CAN_COMM_TEST.c **** 
 1305              		.loc 1 831 0
 1306 05de 0C9B     		ldr	r3, [sp, #48]
 1307              	.LBB174:
 1308              	.LBB175:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1309              		.loc 1 277 0
 1310 05e0 029C     		ldr	r4, [sp, #8]
 1311              	.LVL155:
 1312              	.LBE175:
 1313              	.LBE174:
 831:HANcoder_E407_CAN_COMM_TEST.c **** 
 1314              		.loc 1 831 0
 1315 05e2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1316              	.LVL156:
 1317              	.LBB178:
 1318              	.LBB176:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1319              		.loc 1 277 0
 1320 05e4 C209     		lsrs	r2, r0, #7
 1321              	.LBE176:
 1322              	.LBE178:
 1323              	.LBB179:
 1324              	.LBB180:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1325              		.loc 1 299 0
 1326 05e6 D301     		lsls	r3, r2, #7
 1327 05e8 DBB2     		uxtb	r3, r3
 1328              	.LBE180:
 1329              	.LBE179:
 1330              	.LBB182:
 1331              	.LBB177:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1332              		.loc 1 277 0
 1333 05ea 2276     		strb	r2, [r4, #24]
 1334              	.LBE177:
 1335              	.LBE182:
 1336              	.LBB183:
 1337              	.LBB181:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1338              		.loc 1 299 0
 1339 05ec E375     		strb	r3, [r4, #23]
 1340              	.LBE181:
 1341              	.LBE183:
 843:HANcoder_E407_CAN_COMM_TEST.c **** 
 1342              		.loc 1 843 0
 1343 05ee C01A     		subs	r0, r0, r3
 1344              	.LVL157:
 1345 05f0 FFF7FEFF 		bl	__aeabi_i2d
 1346              	.LVL158:
 852:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1347              		.loc 1 852 0
 1348 05f4 DBE90023 		ldrd	r2, [fp]
 843:HANcoder_E407_CAN_COMM_TEST.c **** 
 1349              		.loc 1 843 0
 1350 05f8 0446     		mov	r4, r0
 1351 05fa 0D46     		mov	r5, r1
 1352              	.LVL159:
 852:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1353              		.loc 1 852 0
 1354 05fc 0020     		movs	r0, #0
 1355 05fe 4FF08041 		mov	r1, #1073741824
 1356 0602 FFF7FEFF 		bl	pow
 1357              	.LVL160:
 856:HANcoder_E407_CAN_COMM_TEST.c **** 
 1358              		.loc 1 856 0
 1359 0606 0246     		mov	r2, r0
 1360 0608 0B46     		mov	r3, r1
 852:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1361              		.loc 1 852 0
 1362 060a 0646     		mov	r6, r0
 1363 060c 0F46     		mov	r7, r1
 1364              	.LVL161:
 856:HANcoder_E407_CAN_COMM_TEST.c **** 
 1365              		.loc 1 856 0
 1366 060e 2046     		mov	r0, r4
 1367 0610 2946     		mov	r1, r5
 1368 0612 FFF7FEFF 		bl	__aeabi_ddiv
 1369              	.LVL162:
 859:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1370              		.loc 1 859 0
 1371 0616 0022     		movs	r2, #0
 1372 0618 0023     		movs	r3, #0
 856:HANcoder_E407_CAN_COMM_TEST.c **** 
 1373              		.loc 1 856 0
 1374 061a 8046     		mov	r8, r0
 1375              	.LVL163:
 1376 061c 8946     		mov	r9, r1
 1377              	.LVL164:
 859:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1378              		.loc 1 859 0
 1379 061e FFF7FEFF 		bl	__aeabi_dcmplt
 1380              	.LVL165:
 1381 0622 0028     		cmp	r0, #0
 1382 0624 41F0BE87 		bne	.L344
 862:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1383              		.loc 1 862 0
 1384 0628 4046     		mov	r0, r8
 1385 062a 4946     		mov	r1, r9
 1386 062c FFF7FEFF 		bl	floor
 1387              	.LVL166:
 1388 0630 8046     		mov	r8, r0
 1389              	.LVL167:
 1390 0632 8946     		mov	r9, r1
 1391              	.LVL168:
 1392              	.L50:
 870:HANcoder_E407_CAN_COMM_TEST.c **** 
 1393              		.loc 1 870 0
 1394 0634 3246     		mov	r2, r6
 1395 0636 3B46     		mov	r3, r7
 1396 0638 4046     		mov	r0, r8
 1397 063a 4946     		mov	r1, r9
 1398 063c FFF7FEFF 		bl	__aeabi_dmul
 1399              	.LVL169:
 1400 0640 0246     		mov	r2, r0
 1401 0642 0B46     		mov	r3, r1
 1402 0644 2046     		mov	r0, r4
 1403 0646 2946     		mov	r1, r5
 1404 0648 FFF7FEFF 		bl	__aeabi_dsub
 1405              	.LVL170:
 878:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1406              		.loc 1 878 0
 1407 064c DDE90423 		ldrd	r2, [sp, #16]
 870:HANcoder_E407_CAN_COMM_TEST.c **** 
 1408              		.loc 1 870 0
 1409 0650 0446     		mov	r4, r0
 1410              	.LVL171:
 1411 0652 0D46     		mov	r5, r1
 1412              	.LVL172:
 878:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1413              		.loc 1 878 0
 1414 0654 0020     		movs	r0, #0
 1415 0656 4FF08041 		mov	r1, #1073741824
 1416 065a FFF7FEFF 		bl	pow
 1417              	.LVL173:
 1418 065e 0B46     		mov	r3, r1
 888:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1419              		.loc 1 888 0
 1420 0660 0299     		ldr	r1, [sp, #8]
 1421 0662 097E     		ldrb	r1, [r1, #24]	@ zero_extendqisi2
 878:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1422              		.loc 1 878 0
 1423 0664 0246     		mov	r2, r0
 1424              	.LVL174:
 889:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1425              		.loc 1 889 0
 1426 0666 2046     		mov	r0, r4
 888:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1427              		.loc 1 888 0
 1428 0668 0029     		cmp	r1, #0
 1429 066a 01F09E86 		beq	.L51
 889:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1430              		.loc 1 889 0
 1431 066e 2946     		mov	r1, r5
 1432 0670 FFF7FEFF 		bl	__aeabi_dmul
 1433              	.LVL175:
 1434 0674 4246     		mov	r2, r8
 1435 0676 4B46     		mov	r3, r9
 1436 0678 FFF7FEFF 		bl	__aeabi_dadd
 1437              	.LVL176:
 1438 067c 574B     		ldr	r3, .L425+12
 1439 067e 01F10042 		add	r2, r1, #-2147483648
 1440 0682 83E80500 		stmia	r3, {r0, r2}
 1441              	.L52:
 897:HANcoder_E407_CAN_COMM_TEST.c **** 
 1442              		.loc 1 897 0
 1443 0686 089B     		ldr	r3, [sp, #32]
 1444              	.LBB184:
 1445              	.LBB185:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1446              		.loc 1 277 0
 1447 0688 029C     		ldr	r4, [sp, #8]
 1448              	.LVL177:
 1449              	.LBE185:
 1450              	.LBE184:
 897:HANcoder_E407_CAN_COMM_TEST.c **** 
 1451              		.loc 1 897 0
 1452 068a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1453              	.LVL178:
 1454              	.LBB188:
 1455              	.LBB186:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1456              		.loc 1 277 0
 1457 068c C209     		lsrs	r2, r0, #7
 1458              	.LBE186:
 1459              	.LBE188:
 1460              	.LBB189:
 1461              	.LBB190:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1462              		.loc 1 299 0
 1463 068e D301     		lsls	r3, r2, #7
 1464 0690 DBB2     		uxtb	r3, r3
 1465              	.LBE190:
 1466              	.LBE189:
 1467              	.LBB192:
 1468              	.LBB187:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1469              		.loc 1 277 0
 1470 0692 A275     		strb	r2, [r4, #22]
 1471              	.LBE187:
 1472              	.LBE192:
 1473              	.LBB193:
 1474              	.LBB191:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1475              		.loc 1 299 0
 1476 0694 6375     		strb	r3, [r4, #21]
 1477              	.LBE191:
 1478              	.LBE193:
 909:HANcoder_E407_CAN_COMM_TEST.c **** 
 1479              		.loc 1 909 0
 1480 0696 C01A     		subs	r0, r0, r3
 1481              	.LVL179:
 1482 0698 FFF7FEFF 		bl	__aeabi_i2d
 1483              	.LVL180:
 918:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1484              		.loc 1 918 0
 1485 069c DBE90023 		ldrd	r2, [fp]
 909:HANcoder_E407_CAN_COMM_TEST.c **** 
 1486              		.loc 1 909 0
 1487 06a0 0446     		mov	r4, r0
 1488 06a2 0D46     		mov	r5, r1
 1489              	.LVL181:
 918:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1490              		.loc 1 918 0
 1491 06a4 0020     		movs	r0, #0
 1492 06a6 4FF08041 		mov	r1, #1073741824
 1493 06aa FFF7FEFF 		bl	pow
 1494              	.LVL182:
 922:HANcoder_E407_CAN_COMM_TEST.c **** 
 1495              		.loc 1 922 0
 1496 06ae 0246     		mov	r2, r0
 1497 06b0 0B46     		mov	r3, r1
 918:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1498              		.loc 1 918 0
 1499 06b2 0646     		mov	r6, r0
 1500 06b4 0F46     		mov	r7, r1
 1501              	.LVL183:
 922:HANcoder_E407_CAN_COMM_TEST.c **** 
 1502              		.loc 1 922 0
 1503 06b6 2046     		mov	r0, r4
 1504 06b8 2946     		mov	r1, r5
 1505 06ba FFF7FEFF 		bl	__aeabi_ddiv
 1506              	.LVL184:
 925:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1507              		.loc 1 925 0
 1508 06be 0022     		movs	r2, #0
 1509 06c0 0023     		movs	r3, #0
 922:HANcoder_E407_CAN_COMM_TEST.c **** 
 1510              		.loc 1 922 0
 1511 06c2 8046     		mov	r8, r0
 1512              	.LVL185:
 1513 06c4 8946     		mov	r9, r1
 1514              	.LVL186:
 925:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1515              		.loc 1 925 0
 1516 06c6 FFF7FEFF 		bl	__aeabi_dcmplt
 1517              	.LVL187:
 1518 06ca 0028     		cmp	r0, #0
 1519 06cc 41F02087 		bne	.L345
 928:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1520              		.loc 1 928 0
 1521 06d0 4046     		mov	r0, r8
 1522 06d2 4946     		mov	r1, r9
 1523 06d4 FFF7FEFF 		bl	floor
 1524              	.LVL188:
 1525 06d8 8046     		mov	r8, r0
 1526              	.LVL189:
 1527 06da 8946     		mov	r9, r1
 1528              	.LVL190:
 1529              	.L55:
 936:HANcoder_E407_CAN_COMM_TEST.c **** 
 1530              		.loc 1 936 0
 1531 06dc 3246     		mov	r2, r6
 1532 06de 3B46     		mov	r3, r7
 1533 06e0 4046     		mov	r0, r8
 1534 06e2 4946     		mov	r1, r9
 1535 06e4 FFF7FEFF 		bl	__aeabi_dmul
 1536              	.LVL191:
 1537 06e8 0246     		mov	r2, r0
 1538 06ea 0B46     		mov	r3, r1
 1539 06ec 2046     		mov	r0, r4
 1540 06ee 2946     		mov	r1, r5
 1541 06f0 FFF7FEFF 		bl	__aeabi_dsub
 1542              	.LVL192:
 944:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1543              		.loc 1 944 0
 1544 06f4 DDE90423 		ldrd	r2, [sp, #16]
 936:HANcoder_E407_CAN_COMM_TEST.c **** 
 1545              		.loc 1 936 0
 1546 06f8 0446     		mov	r4, r0
 1547              	.LVL193:
 1548 06fa 0D46     		mov	r5, r1
 1549              	.LVL194:
 944:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1550              		.loc 1 944 0
 1551 06fc 0020     		movs	r0, #0
 1552 06fe 4FF08041 		mov	r1, #1073741824
 1553 0702 FFF7FEFF 		bl	pow
 1554              	.LVL195:
 1555 0706 0B46     		mov	r3, r1
 954:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1556              		.loc 1 954 0
 1557 0708 0299     		ldr	r1, [sp, #8]
 1558 070a 897D     		ldrb	r1, [r1, #22]	@ zero_extendqisi2
 944:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1559              		.loc 1 944 0
 1560 070c 0246     		mov	r2, r0
 1561              	.LVL196:
 955:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1562              		.loc 1 955 0
 1563 070e 2046     		mov	r0, r4
 954:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN1 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1564              		.loc 1 954 0
 1565 0710 0029     		cmp	r1, #0
 1566 0712 01F0D986 		beq	.L56
 955:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1567              		.loc 1 955 0
 1568 0716 2946     		mov	r1, r5
 1569 0718 FFF7FEFF 		bl	__aeabi_dmul
 1570              	.LVL197:
 1571 071c 4246     		mov	r2, r8
 1572 071e 4B46     		mov	r3, r9
 1573 0720 FFF7FEFF 		bl	__aeabi_dadd
 1574              	.LVL198:
 1575 0724 2E4B     		ldr	r3, .L425+16
 1576 0726 01F10042 		add	r2, r1, #-2147483648
 1577 072a 83E80500 		stmia	r3, {r0, r2}
 1578              	.L57:
 965:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_1_constant_ID_RXCAN2.uint8_T_info[0], NULL);
 1579              		.loc 1 965 0
 1580 072e 2D4B     		ldr	r3, .L425+20
 1581 0730 2D4C     		ldr	r4, .L425+24
 1582              	.LVL199:
 1583 0732 1968     		ldr	r1, [r3]
 1584 0734 0022     		movs	r2, #0
 1585 0736 2346     		mov	r3, r4
 1586 0738 0092     		str	r2, [sp]
 1587 073a 0120     		movs	r0, #1
 1588 073c FFF7FEFF 		bl	CanIoGetMessage
 1589              	.LVL200:
 1590 0740 2A4B     		ldr	r3, .L425+28
 969:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 1591              		.loc 1 969 0
 1592 0742 0028     		cmp	r0, #0
 965:HANcoder_E407_CAN_COMM_TEST.c ****         &canRxData_1_constant_ID_RXCAN2.uint8_T_info[0], NULL);
 1593              		.loc 1 965 0
 1594 0744 1870     		strb	r0, [r3]
 969:HANcoder_E407_CAN_COMM_TEST.c ****         /* read the data */
 1595              		.loc 1 969 0
 1596 0746 41F3F386 		ble	.L346
 1597              	.LVL201:
 991:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN2 = rtb_SFunction_o9_d;
 1598              		.loc 1 991 0
 1599 074a 294B     		ldr	r3, .L425+32
 985:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN2 = rtb_SFunction_o3_a;
 1600              		.loc 1 985 0
 1601 074c 294A     		ldr	r2, .L425+36
 991:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN2 = rtb_SFunction_o9_d;
 1602              		.loc 1 991 0
 1603 074e 0893     		str	r3, [sp, #32]
 992:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1604              		.loc 1 992 0
 1605 0750 294B     		ldr	r3, .L425+40
 986:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN2 = rtb_SFunction_o4_k;
 1606              		.loc 1 986 0
 1607 0752 2A49     		ldr	r1, .L425+44
 992:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1608              		.loc 1 992 0
 1609 0754 0693     		str	r3, [sp, #24]
 985:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN2 = rtb_SFunction_o3_a;
 1610              		.loc 1 985 0
 1611 0756 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1612 0758 1370     		strb	r3, [r2]
 987:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN2 = rtb_SFunction_o5_i;
 1613              		.loc 1 987 0
 1614 075a 294D     		ldr	r5, .L425+48
 972:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o4_k = canRxData_1_constant_ID_RXCAN2.uint8_T_info[2];
 1615              		.loc 1 972 0
 1616 075c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1617              	.LVL202:
 986:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN2 = rtb_SFunction_o4_k;
 1618              		.loc 1 986 0
 1619 075e 0B70     		strb	r3, [r1]
 988:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN2 = rtb_SFunction_o6_p;
 1620              		.loc 1 988 0
 1621 0760 284E     		ldr	r6, .L425+52
 973:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o5_i = canRxData_1_constant_ID_RXCAN2.uint8_T_info[3];
 1622              		.loc 1 973 0
 1623 0762 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1624              	.LVL203:
 986:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded3_CAN2 = rtb_SFunction_o4_k;
 1625              		.loc 1 986 0
 1626 0764 0D91     		str	r1, [sp, #52]
 991:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN2 = rtb_SFunction_o9_d;
 1627              		.loc 1 991 0
 1628 0766 2249     		ldr	r1, .L425+32
 990:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN2 = rtb_SFunction_o8_j;
 1629              		.loc 1 990 0
 1630 0768 274F     		ldr	r7, .L425+56
 985:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded2_CAN2 = rtb_SFunction_o3_a;
 1631              		.loc 1 985 0
 1632 076a 0B92     		str	r2, [sp, #44]
 987:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN2 = rtb_SFunction_o5_i;
 1633              		.loc 1 987 0
 1634 076c 2B70     		strb	r3, [r5]
 977:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o9_d = canRxData_1_constant_ID_RXCAN2.uint8_T_info[7];
 1635              		.loc 1 977 0
 1636 076e A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 974:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o6_p = canRxData_1_constant_ID_RXCAN2.uint8_T_info[4];
 1637              		.loc 1 974 0
 1638 0770 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1639              	.LVL204:
 989:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN2 = rtb_SFunction_o7_l;
 1640              		.loc 1 989 0
 1641 0772 DFF898E0 		ldr	lr, .L425+60
 988:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN2 = rtb_SFunction_o6_p;
 1642              		.loc 1 988 0
 1643 0776 3370     		strb	r3, [r6]
 991:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded8_CAN2 = rtb_SFunction_o9_d;
 1644              		.loc 1 991 0
 1645 0778 0A70     		strb	r2, [r1]
 976:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o8_j = canRxData_1_constant_ID_RXCAN2.uint8_T_info[6];
 1646              		.loc 1 976 0
 1647 077a 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1648              	.LVL205:
 992:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1649              		.loc 1 992 0
 1650 077c 1E4A     		ldr	r2, .L425+40
 975:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_SFunction_o7_l = canRxData_1_constant_ID_RXCAN2.uint8_T_info[5];
 1651              		.loc 1 975 0
 1652 077e 2079     		ldrb	r0, [r4, #4]	@ zero_extendqisi2
 1653              	.LVL206:
 990:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN2 = rtb_SFunction_o8_j;
 1654              		.loc 1 990 0
 1655 0780 3B70     		strb	r3, [r7]
 978:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1656              		.loc 1 978 0
 1657 0782 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1658              	.LVL207:
 987:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded4_CAN2 = rtb_SFunction_o5_i;
 1659              		.loc 1 987 0
 1660 0784 0E95     		str	r5, [sp, #56]
 988:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded5_CAN2 = rtb_SFunction_o6_p;
 1661              		.loc 1 988 0
 1662 0786 0F96     		str	r6, [sp, #60]
 990:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded7_CAN2 = rtb_SFunction_o8_j;
 1663              		.loc 1 990 0
 1664 0788 0C97     		str	r7, [sp, #48]
 989:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_coded6_CAN2 = rtb_SFunction_o7_l;
 1665              		.loc 1 989 0
 1666 078a 8EF80000 		strb	r0, [lr]
 992:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1667              		.loc 1 992 0
 1668 078e 1370     		strb	r3, [r2]
 1669              	.LVL208:
 1670              	.L59:
 1671              	.LBB194:
 1672              	.LBB195:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1673              		.loc 1 277 0
 1674 0790 C209     		lsrs	r2, r0, #7
 1675 0792 029C     		ldr	r4, [sp, #8]
 1676              	.LBE195:
 1677              	.LBE194:
1031:HANcoder_E407_CAN_COMM_TEST.c ****       if ((2.0 < 0.0) && (precision_CAN2 > rtb_Minus)) {
 1678              		.loc 1 1031 0
 1679 0794 DFF878B0 		ldr	fp, .L425+64
 1680              	.LBB197:
 1681              	.LBB196:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1682              		.loc 1 277 0
 1683 0798 84F82E20 		strb	r2, [r4, #46]
 1684              	.LVL209:
 1685              	.LBE196:
 1686              	.LBE197:
 1687              	.LBB198:
 1688              	.LBB199:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1689              		.loc 1 299 0
 1690 079c D301     		lsls	r3, r2, #7
 1691 079e DBB2     		uxtb	r3, r3
 1692 07a0 84F82D30 		strb	r3, [r4, #45]
 1693              	.LVL210:
 1694              	.LBE199:
 1695              	.LBE198:
1018:HANcoder_E407_CAN_COMM_TEST.c **** 
 1696              		.loc 1 1018 0
 1697 07a4 C01A     		subs	r0, r0, r3
 1698 07a6 FFF7FEFF 		bl	__aeabi_i2d
 1699              	.LVL211:
1035:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1700              		.loc 1 1035 0
 1701 07aa DBE90023 		ldrd	r2, [fp]
1018:HANcoder_E407_CAN_COMM_TEST.c **** 
 1702              		.loc 1 1018 0
 1703 07ae 8046     		mov	r8, r0
 1704              	.LVL212:
 1705 07b0 8946     		mov	r9, r1
 1706              	.LVL213:
1035:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1707              		.loc 1 1035 0
 1708 07b2 0020     		movs	r0, #0
 1709 07b4 4FF08041 		mov	r1, #1073741824
 1710 07b8 FFF7FEFF 		bl	pow
 1711              	.LVL214:
1041:HANcoder_E407_CAN_COMM_TEST.c **** 
 1712              		.loc 1 1041 0
 1713 07bc 0246     		mov	r2, r0
 1714 07be 0B46     		mov	r3, r1
1035:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1715              		.loc 1 1035 0
 1716 07c0 0446     		mov	r4, r0
 1717 07c2 0D46     		mov	r5, r1
 1718              	.LVL215:
1041:HANcoder_E407_CAN_COMM_TEST.c **** 
 1719              		.loc 1 1041 0
 1720 07c4 4046     		mov	r0, r8
 1721 07c6 4946     		mov	r1, r9
 1722 07c8 FFF7FEFF 		bl	__aeabi_ddiv
 1723              	.LVL216:
 1724 07cc 22E0     		b	.L426
 1725              	.L427:
 1726 07ce 00BF     		.align	2
 1727              	.L425:
 1728 07d0 00000000 		.word	Rx_Buffer_3_CAN1
 1729 07d4 00000000 		.word	Rx_Buffer_4_CAN1
 1730 07d8 00000000 		.word	Rx_Buffer_5_CAN1
 1731 07dc 00000000 		.word	Rx_Buffer_6_CAN1
 1732 07e0 00000000 		.word	Rx_Buffer_7_CAN1
 1733 07e4 00000000 		.word	constant_ID_RXCAN2
 1734 07e8 00000000 		.word	.LANCHOR2
 1735 07ec 00000000 		.word	new_CAN2
 1736 07f0 00000000 		.word	Rx_coded7_CAN2
 1737 07f4 00000000 		.word	Rx_coded1_CAN2
 1738 07f8 00000000 		.word	Rx_coded8_CAN2
 1739 07fc 00000000 		.word	Rx_coded2_CAN2
 1740 0800 00000000 		.word	Rx_coded3_CAN2
 1741 0804 00000000 		.word	Rx_coded4_CAN2
 1742 0808 00000000 		.word	Rx_coded6_CAN2
 1743 080c 00000000 		.word	Rx_coded5_CAN2
 1744 0810 00000000 		.word	.LANCHOR3
 1745              	.L426:
1044:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1746              		.loc 1 1044 0
 1747 0814 0022     		movs	r2, #0
 1748 0816 0023     		movs	r3, #0
1041:HANcoder_E407_CAN_COMM_TEST.c **** 
 1749              		.loc 1 1041 0
 1750 0818 0646     		mov	r6, r0
 1751 081a 0F46     		mov	r7, r1
 1752              	.LVL217:
1044:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1753              		.loc 1 1044 0
 1754 081c FFF7FEFF 		bl	__aeabi_dcmplt
 1755              	.LVL218:
 1756 0820 0028     		cmp	r0, #0
 1757 0822 41F07D86 		bne	.L347
1047:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1758              		.loc 1 1047 0
 1759 0826 3046     		mov	r0, r6
 1760 0828 3946     		mov	r1, r7
 1761 082a FFF7FEFF 		bl	floor
 1762              	.LVL219:
 1763 082e 0646     		mov	r6, r0
 1764              	.LVL220:
 1765 0830 0F46     		mov	r7, r1
 1766              	.LVL221:
 1767              	.L62:
1067:HANcoder_E407_CAN_COMM_TEST.c **** 
 1768              		.loc 1 1067 0
 1769 0832 9FEDC97B 		vldr.64	d7, .L428
1055:HANcoder_E407_CAN_COMM_TEST.c **** 
 1770              		.loc 1 1055 0
 1771 0836 2246     		mov	r2, r4
 1772 0838 2B46     		mov	r3, r5
 1773 083a 3046     		mov	r0, r6
 1774 083c 3946     		mov	r1, r7
1067:HANcoder_E407_CAN_COMM_TEST.c **** 
 1775              		.loc 1 1067 0
 1776 083e 8DED047B 		vstr.64	d7, [sp, #16]
 1777              	.LVL222:
1055:HANcoder_E407_CAN_COMM_TEST.c **** 
 1778              		.loc 1 1055 0
 1779 0842 FFF7FEFF 		bl	__aeabi_dmul
 1780              	.LVL223:
 1781 0846 0246     		mov	r2, r0
 1782 0848 0B46     		mov	r3, r1
 1783 084a 4046     		mov	r0, r8
 1784 084c 4946     		mov	r1, r9
 1785 084e FFF7FEFF 		bl	__aeabi_dsub
 1786              	.LVL224:
1067:HANcoder_E407_CAN_COMM_TEST.c **** 
 1787              		.loc 1 1067 0
 1788 0852 DBF80030 		ldr	r3, [fp]
 1789 0856 0493     		str	r3, [sp, #16]
 1790 0858 DBF80430 		ldr	r3, [fp, #4]
 1791 085c 03F10043 		add	r3, r3, #-2147483648
 1792 0860 0593     		str	r3, [sp, #20]
1076:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1793              		.loc 1 1076 0
 1794 0862 DDE90423 		ldrd	r2, [sp, #16]
1055:HANcoder_E407_CAN_COMM_TEST.c **** 
 1795              		.loc 1 1055 0
 1796 0866 0446     		mov	r4, r0
 1797              	.LVL225:
 1798 0868 0D46     		mov	r5, r1
 1799              	.LVL226:
1076:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1800              		.loc 1 1076 0
 1801 086a 0020     		movs	r0, #0
 1802 086c 4FF08041 		mov	r1, #1073741824
 1803 0870 FFF7FEFF 		bl	pow
 1804              	.LVL227:
 1805 0874 0B46     		mov	r3, r1
1086:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1806              		.loc 1 1086 0
 1807 0876 0299     		ldr	r1, [sp, #8]
 1808 0878 91F82E10 		ldrb	r1, [r1, #46]	@ zero_extendqisi2
1076:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1809              		.loc 1 1076 0
 1810 087c 0246     		mov	r2, r0
 1811              	.LVL228:
1087:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1812              		.loc 1 1087 0
 1813 087e 2046     		mov	r0, r4
1086:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_5_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1814              		.loc 1 1086 0
 1815 0880 0029     		cmp	r1, #0
 1816 0882 01F01586 		beq	.L63
1087:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1817              		.loc 1 1087 0
 1818 0886 2946     		mov	r1, r5
 1819 0888 FFF7FEFF 		bl	__aeabi_dmul
 1820              	.LVL229:
 1821 088c 3246     		mov	r2, r6
 1822 088e 3B46     		mov	r3, r7
 1823 0890 FFF7FEFF 		bl	__aeabi_dadd
 1824              	.LVL230:
 1825 0894 B24B     		ldr	r3, .L428+8
 1826 0896 01F10042 		add	r2, r1, #-2147483648
 1827 089a 83E80500 		stmia	r3, {r0, r2}
 1828              	.L64:
1095:HANcoder_E407_CAN_COMM_TEST.c **** 
 1829              		.loc 1 1095 0
 1830 089e 0F9B     		ldr	r3, [sp, #60]
 1831              	.LBB200:
 1832              	.LBB201:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1833              		.loc 1 277 0
 1834 08a0 029C     		ldr	r4, [sp, #8]
 1835              	.LVL231:
 1836              	.LBE201:
 1837              	.LBE200:
1095:HANcoder_E407_CAN_COMM_TEST.c **** 
 1838              		.loc 1 1095 0
 1839 08a2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1840              	.LVL232:
 1841              	.LBB204:
 1842              	.LBB202:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1843              		.loc 1 277 0
 1844 08a4 C209     		lsrs	r2, r0, #7
 1845              	.LBE202:
 1846              	.LBE204:
 1847              	.LBB205:
 1848              	.LBB206:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1849              		.loc 1 299 0
 1850 08a6 D301     		lsls	r3, r2, #7
 1851 08a8 DBB2     		uxtb	r3, r3
 1852              	.LBE206:
 1853              	.LBE205:
 1854              	.LBB208:
 1855              	.LBB203:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1856              		.loc 1 277 0
 1857 08aa 84F82C20 		strb	r2, [r4, #44]
 1858              	.LBE203:
 1859              	.LBE208:
 1860              	.LBB209:
 1861              	.LBB207:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1862              		.loc 1 299 0
 1863 08ae 84F82B30 		strb	r3, [r4, #43]
 1864              	.LBE207:
 1865              	.LBE209:
1107:HANcoder_E407_CAN_COMM_TEST.c **** 
 1866              		.loc 1 1107 0
 1867 08b2 C01A     		subs	r0, r0, r3
 1868              	.LVL233:
 1869 08b4 FFF7FEFF 		bl	__aeabi_i2d
 1870              	.LVL234:
1116:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1871              		.loc 1 1116 0
 1872 08b8 DBE90023 		ldrd	r2, [fp]
1107:HANcoder_E407_CAN_COMM_TEST.c **** 
 1873              		.loc 1 1107 0
 1874 08bc 8046     		mov	r8, r0
 1875 08be 8946     		mov	r9, r1
 1876              	.LVL235:
1116:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1877              		.loc 1 1116 0
 1878 08c0 0020     		movs	r0, #0
 1879 08c2 4FF08041 		mov	r1, #1073741824
 1880 08c6 FFF7FEFF 		bl	pow
 1881              	.LVL236:
1120:HANcoder_E407_CAN_COMM_TEST.c **** 
 1882              		.loc 1 1120 0
 1883 08ca 0246     		mov	r2, r0
 1884 08cc 0B46     		mov	r3, r1
1116:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1885              		.loc 1 1116 0
 1886 08ce 0446     		mov	r4, r0
 1887 08d0 0D46     		mov	r5, r1
 1888              	.LVL237:
1120:HANcoder_E407_CAN_COMM_TEST.c **** 
 1889              		.loc 1 1120 0
 1890 08d2 4046     		mov	r0, r8
 1891 08d4 4946     		mov	r1, r9
 1892 08d6 FFF7FEFF 		bl	__aeabi_ddiv
 1893              	.LVL238:
1123:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1894              		.loc 1 1123 0
 1895 08da 0022     		movs	r2, #0
 1896 08dc 0023     		movs	r3, #0
1120:HANcoder_E407_CAN_COMM_TEST.c **** 
 1897              		.loc 1 1120 0
 1898 08de 0646     		mov	r6, r0
 1899              	.LVL239:
 1900 08e0 0F46     		mov	r7, r1
 1901              	.LVL240:
1123:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 1902              		.loc 1 1123 0
 1903 08e2 FFF7FEFF 		bl	__aeabi_dcmplt
 1904              	.LVL241:
 1905 08e6 0028     		cmp	r0, #0
 1906 08e8 41F00A86 		bne	.L348
1126:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1907              		.loc 1 1126 0
 1908 08ec 3046     		mov	r0, r6
 1909 08ee 3946     		mov	r1, r7
 1910 08f0 FFF7FEFF 		bl	floor
 1911              	.LVL242:
 1912 08f4 0646     		mov	r6, r0
 1913              	.LVL243:
 1914 08f6 0F46     		mov	r7, r1
 1915              	.LVL244:
 1916              	.L67:
1134:HANcoder_E407_CAN_COMM_TEST.c **** 
 1917              		.loc 1 1134 0
 1918 08f8 2246     		mov	r2, r4
 1919 08fa 2B46     		mov	r3, r5
 1920 08fc 3046     		mov	r0, r6
 1921 08fe 3946     		mov	r1, r7
 1922 0900 FFF7FEFF 		bl	__aeabi_dmul
 1923              	.LVL245:
 1924 0904 0246     		mov	r2, r0
 1925 0906 0B46     		mov	r3, r1
 1926 0908 4046     		mov	r0, r8
 1927 090a 4946     		mov	r1, r9
 1928 090c FFF7FEFF 		bl	__aeabi_dsub
 1929              	.LVL246:
1142:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1930              		.loc 1 1142 0
 1931 0910 DDE90423 		ldrd	r2, [sp, #16]
1134:HANcoder_E407_CAN_COMM_TEST.c **** 
 1932              		.loc 1 1134 0
 1933 0914 0446     		mov	r4, r0
 1934              	.LVL247:
 1935 0916 0D46     		mov	r5, r1
 1936              	.LVL248:
1142:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1937              		.loc 1 1142 0
 1938 0918 0020     		movs	r0, #0
 1939 091a 4FF08041 		mov	r1, #1073741824
 1940 091e FFF7FEFF 		bl	pow
 1941              	.LVL249:
 1942 0922 0B46     		mov	r3, r1
1152:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1943              		.loc 1 1152 0
 1944 0924 0299     		ldr	r1, [sp, #8]
 1945 0926 91F82C10 		ldrb	r1, [r1, #44]	@ zero_extendqisi2
1142:HANcoder_E407_CAN_COMM_TEST.c ****       }
 1946              		.loc 1 1142 0
 1947 092a 0246     		mov	r2, r0
 1948              	.LVL250:
1153:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1949              		.loc 1 1153 0
 1950 092c 2046     		mov	r0, r4
1152:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_4_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 1951              		.loc 1 1152 0
 1952 092e 0029     		cmp	r1, #0
 1953 0930 01F0B285 		beq	.L68
1153:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 1954              		.loc 1 1153 0
 1955 0934 2946     		mov	r1, r5
 1956 0936 FFF7FEFF 		bl	__aeabi_dmul
 1957              	.LVL251:
 1958 093a 3246     		mov	r2, r6
 1959 093c 3B46     		mov	r3, r7
 1960 093e FFF7FEFF 		bl	__aeabi_dadd
 1961              	.LVL252:
 1962 0942 884B     		ldr	r3, .L428+12
 1963 0944 01F10042 		add	r2, r1, #-2147483648
 1964 0948 83E80500 		stmia	r3, {r0, r2}
 1965              	.L69:
1161:HANcoder_E407_CAN_COMM_TEST.c **** 
 1966              		.loc 1 1161 0
 1967 094c 0E9B     		ldr	r3, [sp, #56]
 1968              	.LBB210:
 1969              	.LBB211:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1970              		.loc 1 277 0
 1971 094e 029C     		ldr	r4, [sp, #8]
 1972              	.LVL253:
 1973              	.LBE211:
 1974              	.LBE210:
1161:HANcoder_E407_CAN_COMM_TEST.c **** 
 1975              		.loc 1 1161 0
 1976 0950 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1977              	.LVL254:
 1978              	.LBB214:
 1979              	.LBB212:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1980              		.loc 1 277 0
 1981 0952 C209     		lsrs	r2, r0, #7
 1982              	.LBE212:
 1983              	.LBE214:
 1984              	.LBB215:
 1985              	.LBB216:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1986              		.loc 1 299 0
 1987 0954 D301     		lsls	r3, r2, #7
 1988 0956 DBB2     		uxtb	r3, r3
 1989              	.LBE216:
 1990              	.LBE215:
 1991              	.LBB218:
 1992              	.LBB213:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 1993              		.loc 1 277 0
 1994 0958 84F82A20 		strb	r2, [r4, #42]
 1995              	.LBE213:
 1996              	.LBE218:
 1997              	.LBB219:
 1998              	.LBB217:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 1999              		.loc 1 299 0
 2000 095c 84F82930 		strb	r3, [r4, #41]
 2001              	.LBE217:
 2002              	.LBE219:
1173:HANcoder_E407_CAN_COMM_TEST.c **** 
 2003              		.loc 1 1173 0
 2004 0960 C01A     		subs	r0, r0, r3
 2005              	.LVL255:
 2006 0962 FFF7FEFF 		bl	__aeabi_i2d
 2007              	.LVL256:
1182:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2008              		.loc 1 1182 0
 2009 0966 DBE90023 		ldrd	r2, [fp]
1173:HANcoder_E407_CAN_COMM_TEST.c **** 
 2010              		.loc 1 1173 0
 2011 096a 8046     		mov	r8, r0
 2012 096c 8946     		mov	r9, r1
 2013              	.LVL257:
1182:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2014              		.loc 1 1182 0
 2015 096e 0020     		movs	r0, #0
 2016 0970 4FF08041 		mov	r1, #1073741824
 2017 0974 FFF7FEFF 		bl	pow
 2018              	.LVL258:
1186:HANcoder_E407_CAN_COMM_TEST.c **** 
 2019              		.loc 1 1186 0
 2020 0978 0246     		mov	r2, r0
 2021 097a 0B46     		mov	r3, r1
1182:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2022              		.loc 1 1182 0
 2023 097c 0446     		mov	r4, r0
 2024 097e 0D46     		mov	r5, r1
 2025              	.LVL259:
1186:HANcoder_E407_CAN_COMM_TEST.c **** 
 2026              		.loc 1 1186 0
 2027 0980 4046     		mov	r0, r8
 2028 0982 4946     		mov	r1, r9
 2029 0984 FFF7FEFF 		bl	__aeabi_ddiv
 2030              	.LVL260:
1189:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2031              		.loc 1 1189 0
 2032 0988 0022     		movs	r2, #0
 2033 098a 0023     		movs	r3, #0
1186:HANcoder_E407_CAN_COMM_TEST.c **** 
 2034              		.loc 1 1186 0
 2035 098c 0646     		mov	r6, r0
 2036              	.LVL261:
 2037 098e 0F46     		mov	r7, r1
 2038              	.LVL262:
1189:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2039              		.loc 1 1189 0
 2040 0990 FFF7FEFF 		bl	__aeabi_dcmplt
 2041              	.LVL263:
 2042 0994 0028     		cmp	r0, #0
 2043 0996 41F0AB85 		bne	.L349
1192:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2044              		.loc 1 1192 0
 2045 099a 3046     		mov	r0, r6
 2046 099c 3946     		mov	r1, r7
 2047 099e FFF7FEFF 		bl	floor
 2048              	.LVL264:
 2049 09a2 0646     		mov	r6, r0
 2050              	.LVL265:
 2051 09a4 0F46     		mov	r7, r1
 2052              	.LVL266:
 2053              	.L72:
1200:HANcoder_E407_CAN_COMM_TEST.c **** 
 2054              		.loc 1 1200 0
 2055 09a6 2246     		mov	r2, r4
 2056 09a8 2B46     		mov	r3, r5
 2057 09aa 3046     		mov	r0, r6
 2058 09ac 3946     		mov	r1, r7
 2059 09ae FFF7FEFF 		bl	__aeabi_dmul
 2060              	.LVL267:
 2061 09b2 0246     		mov	r2, r0
 2062 09b4 0B46     		mov	r3, r1
 2063 09b6 4046     		mov	r0, r8
 2064 09b8 4946     		mov	r1, r9
 2065 09ba FFF7FEFF 		bl	__aeabi_dsub
 2066              	.LVL268:
1208:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2067              		.loc 1 1208 0
 2068 09be DDE90423 		ldrd	r2, [sp, #16]
1200:HANcoder_E407_CAN_COMM_TEST.c **** 
 2069              		.loc 1 1200 0
 2070 09c2 0446     		mov	r4, r0
 2071              	.LVL269:
 2072 09c4 0D46     		mov	r5, r1
 2073              	.LVL270:
1208:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2074              		.loc 1 1208 0
 2075 09c6 0020     		movs	r0, #0
 2076 09c8 4FF08041 		mov	r1, #1073741824
 2077 09cc FFF7FEFF 		bl	pow
 2078              	.LVL271:
 2079 09d0 0B46     		mov	r3, r1
1218:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2080              		.loc 1 1218 0
 2081 09d2 0299     		ldr	r1, [sp, #8]
 2082 09d4 91F82A10 		ldrb	r1, [r1, #42]	@ zero_extendqisi2
1208:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2083              		.loc 1 1208 0
 2084 09d8 0246     		mov	r2, r0
 2085              	.LVL272:
1219:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2086              		.loc 1 1219 0
 2087 09da 2046     		mov	r0, r4
1218:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_3_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2088              		.loc 1 1218 0
 2089 09dc 0029     		cmp	r1, #0
 2090 09de 01F04F85 		beq	.L73
1219:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2091              		.loc 1 1219 0
 2092 09e2 2946     		mov	r1, r5
 2093 09e4 FFF7FEFF 		bl	__aeabi_dmul
 2094              	.LVL273:
 2095 09e8 3246     		mov	r2, r6
 2096 09ea 3B46     		mov	r3, r7
 2097 09ec FFF7FEFF 		bl	__aeabi_dadd
 2098              	.LVL274:
 2099 09f0 5D4B     		ldr	r3, .L428+16
 2100 09f2 01F10042 		add	r2, r1, #-2147483648
 2101 09f6 83E80500 		stmia	r3, {r0, r2}
 2102              	.L74:
1227:HANcoder_E407_CAN_COMM_TEST.c **** 
 2103              		.loc 1 1227 0
 2104 09fa 0D9B     		ldr	r3, [sp, #52]
 2105              	.LBB220:
 2106              	.LBB221:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2107              		.loc 1 277 0
 2108 09fc 029C     		ldr	r4, [sp, #8]
 2109              	.LVL275:
 2110              	.LBE221:
 2111              	.LBE220:
1227:HANcoder_E407_CAN_COMM_TEST.c **** 
 2112              		.loc 1 1227 0
 2113 09fe 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2114              	.LVL276:
 2115              	.LBB224:
 2116              	.LBB222:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2117              		.loc 1 277 0
 2118 0a00 C209     		lsrs	r2, r0, #7
 2119              	.LBE222:
 2120              	.LBE224:
 2121              	.LBB225:
 2122              	.LBB226:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2123              		.loc 1 299 0
 2124 0a02 D301     		lsls	r3, r2, #7
 2125 0a04 DBB2     		uxtb	r3, r3
 2126              	.LBE226:
 2127              	.LBE225:
 2128              	.LBB228:
 2129              	.LBB223:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2130              		.loc 1 277 0
 2131 0a06 84F82820 		strb	r2, [r4, #40]
 2132              	.LBE223:
 2133              	.LBE228:
 2134              	.LBB229:
 2135              	.LBB227:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2136              		.loc 1 299 0
 2137 0a0a 84F82730 		strb	r3, [r4, #39]
 2138              	.LBE227:
 2139              	.LBE229:
1239:HANcoder_E407_CAN_COMM_TEST.c **** 
 2140              		.loc 1 1239 0
 2141 0a0e C01A     		subs	r0, r0, r3
 2142              	.LVL277:
 2143 0a10 FFF7FEFF 		bl	__aeabi_i2d
 2144              	.LVL278:
1248:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2145              		.loc 1 1248 0
 2146 0a14 DBE90023 		ldrd	r2, [fp]
1239:HANcoder_E407_CAN_COMM_TEST.c **** 
 2147              		.loc 1 1239 0
 2148 0a18 8046     		mov	r8, r0
 2149 0a1a 8946     		mov	r9, r1
 2150              	.LVL279:
1248:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2151              		.loc 1 1248 0
 2152 0a1c 0020     		movs	r0, #0
 2153 0a1e 4FF08041 		mov	r1, #1073741824
 2154 0a22 FFF7FEFF 		bl	pow
 2155              	.LVL280:
1252:HANcoder_E407_CAN_COMM_TEST.c **** 
 2156              		.loc 1 1252 0
 2157 0a26 0246     		mov	r2, r0
 2158 0a28 0B46     		mov	r3, r1
1248:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2159              		.loc 1 1248 0
 2160 0a2a 0446     		mov	r4, r0
 2161 0a2c 0D46     		mov	r5, r1
 2162              	.LVL281:
1252:HANcoder_E407_CAN_COMM_TEST.c **** 
 2163              		.loc 1 1252 0
 2164 0a2e 4046     		mov	r0, r8
 2165 0a30 4946     		mov	r1, r9
 2166 0a32 FFF7FEFF 		bl	__aeabi_ddiv
 2167              	.LVL282:
1255:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2168              		.loc 1 1255 0
 2169 0a36 0022     		movs	r2, #0
 2170 0a38 0023     		movs	r3, #0
1252:HANcoder_E407_CAN_COMM_TEST.c **** 
 2171              		.loc 1 1252 0
 2172 0a3a 0646     		mov	r6, r0
 2173              	.LVL283:
 2174 0a3c 0F46     		mov	r7, r1
 2175              	.LVL284:
1255:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2176              		.loc 1 1255 0
 2177 0a3e FFF7FEFF 		bl	__aeabi_dcmplt
 2178              	.LVL285:
 2179 0a42 0028     		cmp	r0, #0
 2180 0a44 41F04C85 		bne	.L350
1258:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2181              		.loc 1 1258 0
 2182 0a48 3046     		mov	r0, r6
 2183 0a4a 3946     		mov	r1, r7
 2184 0a4c FFF7FEFF 		bl	floor
 2185              	.LVL286:
 2186 0a50 0646     		mov	r6, r0
 2187              	.LVL287:
 2188 0a52 0F46     		mov	r7, r1
 2189              	.LVL288:
 2190              	.L77:
1266:HANcoder_E407_CAN_COMM_TEST.c **** 
 2191              		.loc 1 1266 0
 2192 0a54 2246     		mov	r2, r4
 2193 0a56 2B46     		mov	r3, r5
 2194 0a58 3046     		mov	r0, r6
 2195 0a5a 3946     		mov	r1, r7
 2196 0a5c FFF7FEFF 		bl	__aeabi_dmul
 2197              	.LVL289:
 2198 0a60 0246     		mov	r2, r0
 2199 0a62 0B46     		mov	r3, r1
 2200 0a64 4046     		mov	r0, r8
 2201 0a66 4946     		mov	r1, r9
 2202 0a68 FFF7FEFF 		bl	__aeabi_dsub
 2203              	.LVL290:
1274:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2204              		.loc 1 1274 0
 2205 0a6c DDE90423 		ldrd	r2, [sp, #16]
1266:HANcoder_E407_CAN_COMM_TEST.c **** 
 2206              		.loc 1 1266 0
 2207 0a70 0446     		mov	r4, r0
 2208              	.LVL291:
 2209 0a72 0D46     		mov	r5, r1
 2210              	.LVL292:
1274:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2211              		.loc 1 1274 0
 2212 0a74 0020     		movs	r0, #0
 2213 0a76 4FF08041 		mov	r1, #1073741824
 2214 0a7a FFF7FEFF 		bl	pow
 2215              	.LVL293:
 2216 0a7e 0B46     		mov	r3, r1
1284:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2217              		.loc 1 1284 0
 2218 0a80 0299     		ldr	r1, [sp, #8]
 2219 0a82 91F82810 		ldrb	r1, [r1, #40]	@ zero_extendqisi2
1274:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2220              		.loc 1 1274 0
 2221 0a86 0246     		mov	r2, r0
 2222              	.LVL294:
1285:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2223              		.loc 1 1285 0
 2224 0a88 2046     		mov	r0, r4
1284:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_2_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2225              		.loc 1 1284 0
 2226 0a8a 0029     		cmp	r1, #0
 2227 0a8c 01F0EC84 		beq	.L78
1285:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2228              		.loc 1 1285 0
 2229 0a90 2946     		mov	r1, r5
 2230 0a92 FFF7FEFF 		bl	__aeabi_dmul
 2231              	.LVL295:
 2232 0a96 3246     		mov	r2, r6
 2233 0a98 3B46     		mov	r3, r7
 2234 0a9a FFF7FEFF 		bl	__aeabi_dadd
 2235              	.LVL296:
 2236 0a9e 334B     		ldr	r3, .L428+20
 2237 0aa0 01F10042 		add	r2, r1, #-2147483648
 2238 0aa4 83E80500 		stmia	r3, {r0, r2}
 2239              	.L79:
1293:HANcoder_E407_CAN_COMM_TEST.c **** 
 2240              		.loc 1 1293 0
 2241 0aa8 089B     		ldr	r3, [sp, #32]
 2242              	.LBB230:
 2243              	.LBB231:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2244              		.loc 1 277 0
 2245 0aaa 029C     		ldr	r4, [sp, #8]
 2246              	.LVL297:
 2247              	.LBE231:
 2248              	.LBE230:
1293:HANcoder_E407_CAN_COMM_TEST.c **** 
 2249              		.loc 1 1293 0
 2250 0aac 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2251              	.LVL298:
 2252              	.LBB234:
 2253              	.LBB232:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2254              		.loc 1 277 0
 2255 0aae C209     		lsrs	r2, r0, #7
 2256              	.LBE232:
 2257              	.LBE234:
 2258              	.LBB235:
 2259              	.LBB236:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2260              		.loc 1 299 0
 2261 0ab0 D301     		lsls	r3, r2, #7
 2262 0ab2 DBB2     		uxtb	r3, r3
 2263              	.LBE236:
 2264              	.LBE235:
 2265              	.LBB238:
 2266              	.LBB233:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2267              		.loc 1 277 0
 2268 0ab4 84F82620 		strb	r2, [r4, #38]
 2269              	.LBE233:
 2270              	.LBE238:
 2271              	.LBB239:
 2272              	.LBB237:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2273              		.loc 1 299 0
 2274 0ab8 84F82530 		strb	r3, [r4, #37]
 2275              	.LBE237:
 2276              	.LBE239:
1305:HANcoder_E407_CAN_COMM_TEST.c **** 
 2277              		.loc 1 1305 0
 2278 0abc C01A     		subs	r0, r0, r3
 2279              	.LVL299:
 2280 0abe FFF7FEFF 		bl	__aeabi_i2d
 2281              	.LVL300:
1314:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2282              		.loc 1 1314 0
 2283 0ac2 DBE90023 		ldrd	r2, [fp]
1305:HANcoder_E407_CAN_COMM_TEST.c **** 
 2284              		.loc 1 1305 0
 2285 0ac6 8046     		mov	r8, r0
 2286 0ac8 8946     		mov	r9, r1
 2287              	.LVL301:
1314:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2288              		.loc 1 1314 0
 2289 0aca 0020     		movs	r0, #0
 2290 0acc 4FF08041 		mov	r1, #1073741824
 2291 0ad0 FFF7FEFF 		bl	pow
 2292              	.LVL302:
1318:HANcoder_E407_CAN_COMM_TEST.c **** 
 2293              		.loc 1 1318 0
 2294 0ad4 0246     		mov	r2, r0
 2295 0ad6 0B46     		mov	r3, r1
1314:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2296              		.loc 1 1314 0
 2297 0ad8 0446     		mov	r4, r0
 2298 0ada 0D46     		mov	r5, r1
 2299              	.LVL303:
1318:HANcoder_E407_CAN_COMM_TEST.c **** 
 2300              		.loc 1 1318 0
 2301 0adc 4046     		mov	r0, r8
 2302 0ade 4946     		mov	r1, r9
 2303 0ae0 FFF7FEFF 		bl	__aeabi_ddiv
 2304              	.LVL304:
1321:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2305              		.loc 1 1321 0
 2306 0ae4 0022     		movs	r2, #0
 2307 0ae6 0023     		movs	r3, #0
1318:HANcoder_E407_CAN_COMM_TEST.c **** 
 2308              		.loc 1 1318 0
 2309 0ae8 0646     		mov	r6, r0
 2310              	.LVL305:
 2311 0aea 0F46     		mov	r7, r1
 2312              	.LVL306:
1321:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2313              		.loc 1 1321 0
 2314 0aec FFF7FEFF 		bl	__aeabi_dcmplt
 2315              	.LVL307:
 2316 0af0 0028     		cmp	r0, #0
 2317 0af2 41F04785 		bne	.L351
1324:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2318              		.loc 1 1324 0
 2319 0af6 3046     		mov	r0, r6
 2320 0af8 3946     		mov	r1, r7
 2321 0afa FFF7FEFF 		bl	floor
 2322              	.LVL308:
 2323 0afe 0646     		mov	r6, r0
 2324              	.LVL309:
 2325 0b00 0F46     		mov	r7, r1
 2326              	.LVL310:
 2327              	.L82:
1332:HANcoder_E407_CAN_COMM_TEST.c **** 
 2328              		.loc 1 1332 0
 2329 0b02 2246     		mov	r2, r4
 2330 0b04 2B46     		mov	r3, r5
 2331 0b06 3046     		mov	r0, r6
 2332 0b08 3946     		mov	r1, r7
 2333 0b0a FFF7FEFF 		bl	__aeabi_dmul
 2334              	.LVL311:
 2335 0b0e 0246     		mov	r2, r0
 2336 0b10 0B46     		mov	r3, r1
 2337 0b12 4046     		mov	r0, r8
 2338 0b14 4946     		mov	r1, r9
 2339 0b16 FFF7FEFF 		bl	__aeabi_dsub
 2340              	.LVL312:
1340:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2341              		.loc 1 1340 0
 2342 0b1a DDE90423 		ldrd	r2, [sp, #16]
1332:HANcoder_E407_CAN_COMM_TEST.c **** 
 2343              		.loc 1 1332 0
 2344 0b1e 0446     		mov	r4, r0
 2345              	.LVL313:
 2346 0b20 0D46     		mov	r5, r1
 2347              	.LVL314:
1340:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2348              		.loc 1 1340 0
 2349 0b22 0020     		movs	r0, #0
 2350 0b24 4FF08041 		mov	r1, #1073741824
 2351 0b28 FFF7FEFF 		bl	pow
 2352              	.LVL315:
 2353 0b2c 0B46     		mov	r3, r1
1350:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2354              		.loc 1 1350 0
 2355 0b2e 0299     		ldr	r1, [sp, #8]
 2356 0b30 91F82610 		ldrb	r1, [r1, #38]	@ zero_extendqisi2
1340:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2357              		.loc 1 1340 0
 2358 0b34 0246     		mov	r2, r0
 2359              	.LVL316:
1351:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2360              		.loc 1 1351 0
 2361 0b36 2046     		mov	r0, r4
1350:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_7_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2362              		.loc 1 1350 0
 2363 0b38 0029     		cmp	r1, #0
 2364 0b3a 01F08984 		beq	.L83
1351:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2365              		.loc 1 1351 0
 2366 0b3e 2946     		mov	r1, r5
 2367 0b40 FFF7FEFF 		bl	__aeabi_dmul
 2368              	.LVL317:
 2369 0b44 3246     		mov	r2, r6
 2370 0b46 3B46     		mov	r3, r7
 2371 0b48 FFF7FEFF 		bl	__aeabi_dadd
 2372              	.LVL318:
 2373 0b4c 084B     		ldr	r3, .L428+24
 2374 0b4e 01F10042 		add	r2, r1, #-2147483648
 2375 0b52 83E80500 		stmia	r3, {r0, r2}
 2376 0b56 0DE0     		b	.L429
 2377              	.L430:
 2378              		.align	3
 2379              	.L428:
 2380 0b58 00000000 		.word	0
 2381 0b5c 00000000 		.word	0
 2382 0b60 00000000 		.word	Rx_Buffer_5_CAN2
 2383 0b64 00000000 		.word	Rx_Buffer_4_CAN2
 2384 0b68 00000000 		.word	Rx_Buffer_3_CAN2
 2385 0b6c 00000000 		.word	Rx_Buffer_2_CAN2
 2386 0b70 00000000 		.word	Rx_Buffer_7_CAN2
 2387              	.L429:
 2388              	.L84:
1359:HANcoder_E407_CAN_COMM_TEST.c **** 
 2389              		.loc 1 1359 0
 2390 0b74 0B9B     		ldr	r3, [sp, #44]
 2391              	.LBB240:
 2392              	.LBB241:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2393              		.loc 1 277 0
 2394 0b76 029C     		ldr	r4, [sp, #8]
 2395              	.LVL319:
 2396              	.LBE241:
 2397              	.LBE240:
1359:HANcoder_E407_CAN_COMM_TEST.c **** 
 2398              		.loc 1 1359 0
 2399 0b78 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2400              	.LVL320:
 2401              	.LBB244:
 2402              	.LBB242:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2403              		.loc 1 277 0
 2404 0b7a C209     		lsrs	r2, r0, #7
 2405              	.LBE242:
 2406              	.LBE244:
 2407              	.LBB245:
 2408              	.LBB246:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2409              		.loc 1 299 0
 2410 0b7c D301     		lsls	r3, r2, #7
 2411 0b7e DBB2     		uxtb	r3, r3
 2412              	.LBE246:
 2413              	.LBE245:
 2414              	.LBB248:
 2415              	.LBB243:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2416              		.loc 1 277 0
 2417 0b80 84F82420 		strb	r2, [r4, #36]
 2418              	.LBE243:
 2419              	.LBE248:
 2420              	.LBB249:
 2421              	.LBB247:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2422              		.loc 1 299 0
 2423 0b84 84F82330 		strb	r3, [r4, #35]
 2424              	.LBE247:
 2425              	.LBE249:
1371:HANcoder_E407_CAN_COMM_TEST.c **** 
 2426              		.loc 1 1371 0
 2427 0b88 C01A     		subs	r0, r0, r3
 2428              	.LVL321:
 2429 0b8a FFF7FEFF 		bl	__aeabi_i2d
 2430              	.LVL322:
1380:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2431              		.loc 1 1380 0
 2432 0b8e DBE90023 		ldrd	r2, [fp]
1371:HANcoder_E407_CAN_COMM_TEST.c **** 
 2433              		.loc 1 1371 0
 2434 0b92 0446     		mov	r4, r0
 2435 0b94 0D46     		mov	r5, r1
 2436              	.LVL323:
1380:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2437              		.loc 1 1380 0
 2438 0b96 0020     		movs	r0, #0
 2439 0b98 4FF08041 		mov	r1, #1073741824
 2440 0b9c FFF7FEFF 		bl	pow
 2441              	.LVL324:
1384:HANcoder_E407_CAN_COMM_TEST.c **** 
 2442              		.loc 1 1384 0
 2443 0ba0 0246     		mov	r2, r0
 2444 0ba2 0B46     		mov	r3, r1
1380:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2445              		.loc 1 1380 0
 2446 0ba4 0646     		mov	r6, r0
 2447              	.LVL325:
 2448 0ba6 0F46     		mov	r7, r1
 2449              	.LVL326:
1384:HANcoder_E407_CAN_COMM_TEST.c **** 
 2450              		.loc 1 1384 0
 2451 0ba8 2046     		mov	r0, r4
 2452 0baa 2946     		mov	r1, r5
 2453 0bac FFF7FEFF 		bl	__aeabi_ddiv
 2454              	.LVL327:
1387:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2455              		.loc 1 1387 0
 2456 0bb0 0022     		movs	r2, #0
 2457 0bb2 0023     		movs	r3, #0
1384:HANcoder_E407_CAN_COMM_TEST.c **** 
 2458              		.loc 1 1384 0
 2459 0bb4 8046     		mov	r8, r0
 2460 0bb6 8946     		mov	r9, r1
 2461              	.LVL328:
1387:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2462              		.loc 1 1387 0
 2463 0bb8 FFF7FEFF 		bl	__aeabi_dcmplt
 2464              	.LVL329:
 2465 0bbc 0028     		cmp	r0, #0
 2466 0bbe 41F0D984 		bne	.L352
1390:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2467              		.loc 1 1390 0
 2468 0bc2 4046     		mov	r0, r8
 2469 0bc4 4946     		mov	r1, r9
 2470 0bc6 FFF7FEFF 		bl	floor
 2471              	.LVL330:
 2472 0bca 8046     		mov	r8, r0
 2473              	.LVL331:
 2474 0bcc 8946     		mov	r9, r1
 2475              	.LVL332:
 2476              	.L87:
1398:HANcoder_E407_CAN_COMM_TEST.c **** 
 2477              		.loc 1 1398 0
 2478 0bce 3246     		mov	r2, r6
 2479 0bd0 3B46     		mov	r3, r7
 2480 0bd2 4046     		mov	r0, r8
 2481 0bd4 4946     		mov	r1, r9
 2482 0bd6 FFF7FEFF 		bl	__aeabi_dmul
 2483              	.LVL333:
 2484 0bda 0246     		mov	r2, r0
 2485 0bdc 0B46     		mov	r3, r1
 2486 0bde 2046     		mov	r0, r4
 2487 0be0 2946     		mov	r1, r5
 2488 0be2 FFF7FEFF 		bl	__aeabi_dsub
 2489              	.LVL334:
1406:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2490              		.loc 1 1406 0
 2491 0be6 DDE90423 		ldrd	r2, [sp, #16]
1398:HANcoder_E407_CAN_COMM_TEST.c **** 
 2492              		.loc 1 1398 0
 2493 0bea 0446     		mov	r4, r0
 2494              	.LVL335:
 2495 0bec 0D46     		mov	r5, r1
 2496              	.LVL336:
1406:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2497              		.loc 1 1406 0
 2498 0bee 0020     		movs	r0, #0
 2499 0bf0 4FF08041 		mov	r1, #1073741824
 2500 0bf4 FFF7FEFF 		bl	pow
 2501              	.LVL337:
 2502 0bf8 0B46     		mov	r3, r1
1416:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2503              		.loc 1 1416 0
 2504 0bfa 0299     		ldr	r1, [sp, #8]
 2505 0bfc 91F82410 		ldrb	r1, [r1, #36]	@ zero_extendqisi2
1406:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2506              		.loc 1 1406 0
 2507 0c00 0246     		mov	r2, r0
 2508              	.LVL338:
1417:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2509              		.loc 1 1417 0
 2510 0c02 2046     		mov	r0, r4
1416:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_1_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2511              		.loc 1 1416 0
 2512 0c04 0029     		cmp	r1, #0
 2513 0c06 01F00084 		beq	.L88
1417:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2514              		.loc 1 1417 0
 2515 0c0a 2946     		mov	r1, r5
 2516 0c0c FFF7FEFF 		bl	__aeabi_dmul
 2517              	.LVL339:
 2518 0c10 4246     		mov	r2, r8
 2519 0c12 4B46     		mov	r3, r9
 2520 0c14 FFF7FEFF 		bl	__aeabi_dadd
 2521              	.LVL340:
 2522 0c18 B04B     		ldr	r3, .L431
 2523 0c1a 01F10042 		add	r2, r1, #-2147483648
 2524 0c1e 83E80500 		stmia	r3, {r0, r2}
 2525              	.L89:
1425:HANcoder_E407_CAN_COMM_TEST.c **** 
 2526              		.loc 1 1425 0
 2527 0c22 069B     		ldr	r3, [sp, #24]
 2528              	.LBB250:
 2529              	.LBB251:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2530              		.loc 1 277 0
 2531 0c24 029C     		ldr	r4, [sp, #8]
 2532              	.LVL341:
 2533              	.LBE251:
 2534              	.LBE250:
1425:HANcoder_E407_CAN_COMM_TEST.c **** 
 2535              		.loc 1 1425 0
 2536 0c26 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2537              	.LVL342:
 2538              	.LBB254:
 2539              	.LBB252:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2540              		.loc 1 277 0
 2541 0c28 C209     		lsrs	r2, r0, #7
 2542              	.LBE252:
 2543              	.LBE254:
 2544              	.LBB255:
 2545              	.LBB256:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2546              		.loc 1 299 0
 2547 0c2a D301     		lsls	r3, r2, #7
 2548 0c2c DBB2     		uxtb	r3, r3
 2549              	.LBE256:
 2550              	.LBE255:
 2551              	.LBB258:
 2552              	.LBB253:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2553              		.loc 1 277 0
 2554 0c2e 2275     		strb	r2, [r4, #20]
 2555              	.LBE253:
 2556              	.LBE258:
 2557              	.LBB259:
 2558              	.LBB257:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2559              		.loc 1 299 0
 2560 0c30 E374     		strb	r3, [r4, #19]
 2561              	.LBE257:
 2562              	.LBE259:
1437:HANcoder_E407_CAN_COMM_TEST.c **** 
 2563              		.loc 1 1437 0
 2564 0c32 C01A     		subs	r0, r0, r3
 2565              	.LVL343:
 2566 0c34 FFF7FEFF 		bl	__aeabi_i2d
 2567              	.LVL344:
1446:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2568              		.loc 1 1446 0
 2569 0c38 DBE90023 		ldrd	r2, [fp]
1437:HANcoder_E407_CAN_COMM_TEST.c **** 
 2570              		.loc 1 1437 0
 2571 0c3c 0446     		mov	r4, r0
 2572 0c3e 0D46     		mov	r5, r1
 2573              	.LVL345:
1446:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2574              		.loc 1 1446 0
 2575 0c40 0020     		movs	r0, #0
 2576 0c42 4FF08041 		mov	r1, #1073741824
 2577 0c46 FFF7FEFF 		bl	pow
 2578              	.LVL346:
1450:HANcoder_E407_CAN_COMM_TEST.c **** 
 2579              		.loc 1 1450 0
 2580 0c4a 0246     		mov	r2, r0
 2581 0c4c 0B46     		mov	r3, r1
1446:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2582              		.loc 1 1446 0
 2583 0c4e 0646     		mov	r6, r0
 2584 0c50 0F46     		mov	r7, r1
 2585              	.LVL347:
1450:HANcoder_E407_CAN_COMM_TEST.c **** 
 2586              		.loc 1 1450 0
 2587 0c52 2046     		mov	r0, r4
 2588 0c54 2946     		mov	r1, r5
 2589 0c56 FFF7FEFF 		bl	__aeabi_ddiv
 2590              	.LVL348:
1453:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2591              		.loc 1 1453 0
 2592 0c5a 0022     		movs	r2, #0
 2593 0c5c 0023     		movs	r3, #0
1450:HANcoder_E407_CAN_COMM_TEST.c **** 
 2594              		.loc 1 1450 0
 2595 0c5e 8046     		mov	r8, r0
 2596              	.LVL349:
 2597 0c60 8946     		mov	r9, r1
 2598              	.LVL350:
1453:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2599              		.loc 1 1453 0
 2600 0c62 FFF7FEFF 		bl	__aeabi_dcmplt
 2601              	.LVL351:
 2602 0c66 0028     		cmp	r0, #0
 2603 0c68 41F07C84 		bne	.L353
1456:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2604              		.loc 1 1456 0
 2605 0c6c 4046     		mov	r0, r8
 2606 0c6e 4946     		mov	r1, r9
 2607 0c70 FFF7FEFF 		bl	floor
 2608              	.LVL352:
 2609 0c74 8046     		mov	r8, r0
 2610              	.LVL353:
 2611 0c76 8946     		mov	r9, r1
 2612              	.LVL354:
 2613              	.L92:
1464:HANcoder_E407_CAN_COMM_TEST.c **** 
 2614              		.loc 1 1464 0
 2615 0c78 3246     		mov	r2, r6
 2616 0c7a 3B46     		mov	r3, r7
 2617 0c7c 4046     		mov	r0, r8
 2618 0c7e 4946     		mov	r1, r9
 2619 0c80 FFF7FEFF 		bl	__aeabi_dmul
 2620              	.LVL355:
 2621 0c84 0246     		mov	r2, r0
 2622 0c86 0B46     		mov	r3, r1
 2623 0c88 2046     		mov	r0, r4
 2624 0c8a 2946     		mov	r1, r5
 2625 0c8c FFF7FEFF 		bl	__aeabi_dsub
 2626              	.LVL356:
1472:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2627              		.loc 1 1472 0
 2628 0c90 DDE90423 		ldrd	r2, [sp, #16]
1464:HANcoder_E407_CAN_COMM_TEST.c **** 
 2629              		.loc 1 1464 0
 2630 0c94 0446     		mov	r4, r0
 2631              	.LVL357:
 2632 0c96 0D46     		mov	r5, r1
 2633              	.LVL358:
1472:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2634              		.loc 1 1472 0
 2635 0c98 0020     		movs	r0, #0
 2636 0c9a 4FF08041 		mov	r1, #1073741824
 2637 0c9e FFF7FEFF 		bl	pow
 2638              	.LVL359:
 2639 0ca2 0B46     		mov	r3, r1
1482:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2640              		.loc 1 1482 0
 2641 0ca4 0299     		ldr	r1, [sp, #8]
 2642 0ca6 097D     		ldrb	r1, [r1, #20]	@ zero_extendqisi2
1472:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2643              		.loc 1 1472 0
 2644 0ca8 0246     		mov	r2, r0
 2645              	.LVL360:
1483:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2646              		.loc 1 1483 0
 2647 0caa 2046     		mov	r0, r4
1482:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_8_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2648              		.loc 1 1482 0
 2649 0cac 0029     		cmp	r1, #0
 2650 0cae 01F05883 		beq	.L93
1483:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2651              		.loc 1 1483 0
 2652 0cb2 2946     		mov	r1, r5
 2653 0cb4 FFF7FEFF 		bl	__aeabi_dmul
 2654              	.LVL361:
 2655 0cb8 4246     		mov	r2, r8
 2656 0cba 4B46     		mov	r3, r9
 2657 0cbc FFF7FEFF 		bl	__aeabi_dadd
 2658              	.LVL362:
 2659 0cc0 874B     		ldr	r3, .L431+4
 2660 0cc2 01F10042 		add	r2, r1, #-2147483648
 2661 0cc6 83E80500 		stmia	r3, {r0, r2}
 2662              	.L94:
1491:HANcoder_E407_CAN_COMM_TEST.c **** 
 2663              		.loc 1 1491 0
 2664 0cca 0C9B     		ldr	r3, [sp, #48]
 2665              	.LBB260:
 2666              	.LBB261:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2667              		.loc 1 277 0
 2668 0ccc 029C     		ldr	r4, [sp, #8]
 2669              	.LVL363:
 2670              	.LBE261:
 2671              	.LBE260:
1491:HANcoder_E407_CAN_COMM_TEST.c **** 
 2672              		.loc 1 1491 0
 2673 0cce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2674              	.LVL364:
 2675              	.LBB264:
 2676              	.LBB262:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2677              		.loc 1 277 0
 2678 0cd0 C209     		lsrs	r2, r0, #7
 2679              	.LBE262:
 2680              	.LBE264:
 2681              	.LBB265:
 2682              	.LBB266:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2683              		.loc 1 299 0
 2684 0cd2 D301     		lsls	r3, r2, #7
 2685 0cd4 DBB2     		uxtb	r3, r3
 2686              	.LBE266:
 2687              	.LBE265:
 2688              	.LBB268:
 2689              	.LBB263:
 277:HANcoder_E407_CAN_COMM_TEST.c **** }
 2690              		.loc 1 277 0
 2691 0cd6 A274     		strb	r2, [r4, #18]
 2692              	.LBE263:
 2693              	.LBE268:
 2694              	.LBB269:
 2695              	.LBB267:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2696              		.loc 1 299 0
 2697 0cd8 6374     		strb	r3, [r4, #17]
 2698              	.LBE267:
 2699              	.LBE269:
1503:HANcoder_E407_CAN_COMM_TEST.c **** 
 2700              		.loc 1 1503 0
 2701 0cda C01A     		subs	r0, r0, r3
 2702              	.LVL365:
 2703 0cdc FFF7FEFF 		bl	__aeabi_i2d
 2704              	.LVL366:
1512:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2705              		.loc 1 1512 0
 2706 0ce0 DBE90023 		ldrd	r2, [fp]
1503:HANcoder_E407_CAN_COMM_TEST.c **** 
 2707              		.loc 1 1503 0
 2708 0ce4 0446     		mov	r4, r0
 2709 0ce6 0D46     		mov	r5, r1
 2710              	.LVL367:
1512:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2711              		.loc 1 1512 0
 2712 0ce8 0020     		movs	r0, #0
 2713 0cea 4FF08041 		mov	r1, #1073741824
 2714 0cee FFF7FEFF 		bl	pow
 2715              	.LVL368:
1516:HANcoder_E407_CAN_COMM_TEST.c **** 
 2716              		.loc 1 1516 0
 2717 0cf2 0246     		mov	r2, r0
 2718 0cf4 0B46     		mov	r3, r1
1512:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2719              		.loc 1 1512 0
 2720 0cf6 0646     		mov	r6, r0
 2721 0cf8 0F46     		mov	r7, r1
 2722              	.LVL369:
1516:HANcoder_E407_CAN_COMM_TEST.c **** 
 2723              		.loc 1 1516 0
 2724 0cfa 2046     		mov	r0, r4
 2725 0cfc 2946     		mov	r1, r5
 2726 0cfe FFF7FEFF 		bl	__aeabi_ddiv
 2727              	.LVL370:
1519:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2728              		.loc 1 1519 0
 2729 0d02 0022     		movs	r2, #0
 2730 0d04 0023     		movs	r3, #0
1516:HANcoder_E407_CAN_COMM_TEST.c **** 
 2731              		.loc 1 1516 0
 2732 0d06 8046     		mov	r8, r0
 2733              	.LVL371:
 2734 0d08 8946     		mov	r9, r1
 2735              	.LVL372:
1519:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix = ceil(rtb_Fix);
 2736              		.loc 1 1519 0
 2737 0d0a FFF7FEFF 		bl	__aeabi_dcmplt
 2738              	.LVL373:
 2739 0d0e 0028     		cmp	r0, #0
 2740 0d10 41F07A84 		bne	.L354
1522:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2741              		.loc 1 1522 0
 2742 0d14 4046     		mov	r0, r8
 2743 0d16 4946     		mov	r1, r9
 2744 0d18 FFF7FEFF 		bl	floor
 2745              	.LVL374:
 2746 0d1c 8046     		mov	r8, r0
 2747              	.LVL375:
 2748 0d1e 8946     		mov	r9, r1
 2749              	.LVL376:
 2750              	.L97:
1530:HANcoder_E407_CAN_COMM_TEST.c **** 
 2751              		.loc 1 1530 0
 2752 0d20 3246     		mov	r2, r6
 2753 0d22 3B46     		mov	r3, r7
 2754 0d24 4046     		mov	r0, r8
 2755 0d26 4946     		mov	r1, r9
 2756 0d28 FFF7FEFF 		bl	__aeabi_dmul
 2757              	.LVL377:
 2758 0d2c 0246     		mov	r2, r0
 2759 0d2e 0B46     		mov	r3, r1
 2760 0d30 2046     		mov	r0, r4
 2761 0d32 2946     		mov	r1, r5
 2762 0d34 FFF7FEFF 		bl	__aeabi_dsub
 2763              	.LVL378:
1538:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2764              		.loc 1 1538 0
 2765 0d38 DDE90423 		ldrd	r2, [sp, #16]
1530:HANcoder_E407_CAN_COMM_TEST.c **** 
 2766              		.loc 1 1530 0
 2767 0d3c 0446     		mov	r4, r0
 2768              	.LVL379:
 2769 0d3e 0D46     		mov	r5, r1
 2770              	.LVL380:
1538:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2771              		.loc 1 1538 0
 2772 0d40 0020     		movs	r0, #0
 2773 0d42 4FF08041 		mov	r1, #1073741824
 2774 0d46 FFF7FEFF 		bl	pow
 2775              	.LVL381:
 2776 0d4a 0B46     		mov	r3, r1
1548:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2777              		.loc 1 1548 0
 2778 0d4c 0299     		ldr	r1, [sp, #8]
 2779 0d4e 897C     		ldrb	r1, [r1, #18]	@ zero_extendqisi2
1538:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2780              		.loc 1 1538 0
 2781 0d50 0246     		mov	r2, r0
 2782              	.LVL382:
1549:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2783              		.loc 1 1549 0
 2784 0d52 2046     		mov	r0, r4
1548:HANcoder_E407_CAN_COMM_TEST.c ****         Rx_Buffer_6_CAN2 = (rtb_Power2 * rtb_Switch2 + rtb_Fix) * (-1.0);
 2785              		.loc 1 1548 0
 2786 0d54 0029     		cmp	r1, #0
 2787 0d56 01F0F882 		beq	.L98
1549:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 2788              		.loc 1 1549 0
 2789 0d5a 2946     		mov	r1, r5
 2790 0d5c FFF7FEFF 		bl	__aeabi_dmul
 2791              	.LVL383:
 2792 0d60 4246     		mov	r2, r8
 2793 0d62 4B46     		mov	r3, r9
 2794 0d64 FFF7FEFF 		bl	__aeabi_dadd
 2795              	.LVL384:
 2796 0d68 5E4B     		ldr	r3, .L431+8
 2797 0d6a 01F10042 		add	r2, r1, #-2147483648
 2798 0d6e 83E80500 		stmia	r3, {r0, r2}
 2799              	.L99:
1555:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN1_s = Rx_ID_CAN1;
 2800              		.loc 1 1555 0
 2801 0d72 5D48     		ldr	r0, .L431+12
1556:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
 2802              		.loc 1 1556 0
 2803 0d74 5D4A     		ldr	r2, .L431+16
1555:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN1_s = Rx_ID_CAN1;
 2804              		.loc 1 1555 0
 2805 0d76 5E49     		ldr	r1, .L431+20
1556:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
 2806              		.loc 1 1556 0
 2807 0d78 5E4B     		ldr	r3, .L431+24
1555:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN1_s = Rx_ID_CAN1;
 2808              		.loc 1 1555 0
 2809 0d7a 0068     		ldr	r0, [r0]
1556:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
 2810              		.loc 1 1556 0
 2811 0d7c 1268     		ldr	r2, [r2]
1555:HANcoder_E407_CAN_COMM_TEST.c ****       Rx_ID_CAN1_s = Rx_ID_CAN1;
 2812              		.loc 1 1555 0
 2813 0d7e 0860     		str	r0, [r1]
1556:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
 2814              		.loc 1 1556 0
 2815 0d80 1A60     		str	r2, [r3]
 2816              	.LVL385:
 2817              	.L100:
1568:HANcoder_E407_CAN_COMM_TEST.c **** 
 2818              		.loc 1 1568 0
 2819 0d82 0820     		movs	r0, #8
 2820 0d84 FFF7FEFF 		bl	DiginGet
 2821              	.LVL386:
1574:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.TxCAN_MODE) {
 2822              		.loc 1 1574 0
 2823 0d88 5B4B     		ldr	r3, .L431+28
1568:HANcoder_E407_CAN_COMM_TEST.c **** 
 2824              		.loc 1 1568 0
 2825 0d8a 5C4A     		ldr	r2, .L431+32
1574:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.TxCAN_MODE) {
 2826              		.loc 1 1574 0
 2827 0d8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1568:HANcoder_E407_CAN_COMM_TEST.c **** 
 2828              		.loc 1 1568 0
 2829 0d8e 1070     		strb	r0, [r2]
1574:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.TxCAN_MODE) {
 2830              		.loc 1 1574 0
 2831 0d90 002B     		cmp	r3, #0
 2832 0d92 01F02281 		beq	.L101
1574:HANcoder_E407_CAN_COMM_TEST.c ****       if (!rtDWork.TxCAN_MODE) {
 2833              		.loc 1 1574 0 is_stmt 0 discriminator 1
 2834 0d96 0028     		cmp	r0, #0
 2835 0d98 01F01F81 		beq	.L101
1575:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.TxCAN_MODE = true;
 2836              		.loc 1 1575 0 is_stmt 1
 2837 0d9c 039B     		ldr	r3, [sp, #12]
 2838 0d9e 584A     		ldr	r2, .L431+36
 2839 0da0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 2840 0da2 0BB9     		cbnz	r3, .L102
1576:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2841              		.loc 1 1576 0
 2842 0da4 0123     		movs	r3, #1
 2843 0da6 9372     		strb	r3, [r2, #10]
 2844              	.L102:
1587:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S112>/Switch' */
 2845              		.loc 1 1587 0
 2846 0da8 564B     		ldr	r3, .L431+40
 2847 0daa 574A     		ldr	r2, .L431+44
 2848 0dac D3E90067 		ldrd	r6, [r3]
 2849 0db0 D2E90045 		ldrd	r4, [r2]
 2850 0db4 3B46     		mov	r3, r7
 2851 0db6 2046     		mov	r0, r4
 2852 0db8 2946     		mov	r1, r5
 2853 0dba 3246     		mov	r2, r6
 2854 0dbc FFF7FEFF 		bl	__aeabi_dcmplt
 2855              	.LVL387:
 2856 0dc0 0028     		cmp	r0, #0
 2857 0dc2 01F0AE82 		beq	.L355
 2858              	.L103:
 2859              	.LVL388:
1600:HANcoder_E407_CAN_COMM_TEST.c **** 
 2860              		.loc 1 1600 0
 2861 0dc6 25F00047 		bic	r7, r5, #-2147483648
1619:HANcoder_E407_CAN_COMM_TEST.c **** 
 2862              		.loc 1 1619 0
 2863 0dca DFF854B1 		ldr	fp, .L431+68
1603:HANcoder_E407_CAN_COMM_TEST.c **** 
 2864              		.loc 1 1603 0
 2865 0dce 3946     		mov	r1, r7
 2866 0dd0 2046     		mov	r0, r4
 2867 0dd2 FFF7FEFF 		bl	floor
 2868              	.LVL389:
1619:HANcoder_E407_CAN_COMM_TEST.c **** 
 2869              		.loc 1 1619 0
 2870 0dd6 DBE90089 		ldrd	r8, [fp]
1603:HANcoder_E407_CAN_COMM_TEST.c **** 
 2871              		.loc 1 1603 0
 2872 0dda CDE90601 		strd	r0, [sp, #24]
 2873              	.LVL390:
1619:HANcoder_E407_CAN_COMM_TEST.c **** 
 2874              		.loc 1 1619 0
 2875 0dde 4246     		mov	r2, r8
 2876 0de0 4B46     		mov	r3, r9
 2877 0de2 0020     		movs	r0, #0
 2878 0de4 4949     		ldr	r1, .L431+48
 2879 0de6 FFF7FEFF 		bl	__aeabi_dsub
 2880              	.LVL391:
1624:HANcoder_E407_CAN_COMM_TEST.c **** 
 2881              		.loc 1 1624 0
 2882 0dea 4246     		mov	r2, r8
1619:HANcoder_E407_CAN_COMM_TEST.c **** 
 2883              		.loc 1 1619 0
 2884 0dec CDE90401 		strd	r0, [sp, #16]
 2885              	.LVL392:
1624:HANcoder_E407_CAN_COMM_TEST.c **** 
 2886              		.loc 1 1624 0
 2887 0df0 09F10043 		add	r3, r9, #-2147483648
 2888              	.LVL393:
1633:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2889              		.loc 1 1633 0
 2890 0df4 0020     		movs	r0, #0
 2891 0df6 4FF08041 		mov	r1, #1073741824
 2892 0dfa FFF7FEFF 		bl	pow
 2893              	.LVL394:
1645:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2894              		.loc 1 1645 0
 2895 0dfe DDE90423 		ldrd	r2, [sp, #16]
1633:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2896              		.loc 1 1633 0
 2897 0e02 8046     		mov	r8, r0
 2898 0e04 8946     		mov	r9, r1
 2899              	.LVL395:
1645:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2900              		.loc 1 1645 0
 2901 0e06 0020     		movs	r0, #0
 2902 0e08 4FF08041 		mov	r1, #1073741824
 2903 0e0c FFF7FEFF 		bl	pow
 2904              	.LVL396:
1651:HANcoder_E407_CAN_COMM_TEST.c **** 
 2905              		.loc 1 1651 0
 2906 0e10 DDE90623 		ldrd	r2, [sp, #24]
1645:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2907              		.loc 1 1645 0
 2908 0e14 CDE90801 		strd	r0, [sp, #32]
 2909              	.LVL397:
1651:HANcoder_E407_CAN_COMM_TEST.c **** 
 2910              		.loc 1 1651 0
 2911 0e18 3946     		mov	r1, r7
 2912 0e1a 2046     		mov	r0, r4
 2913              	.LVL398:
 2914 0e1c FFF7FEFF 		bl	__aeabi_dsub
 2915              	.LVL399:
 2916 0e20 4246     		mov	r2, r8
 2917 0e22 4B46     		mov	r3, r9
 2918 0e24 FFF7FEFF 		bl	__aeabi_ddiv
 2919              	.LVL400:
1654:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = ceil(rtb_Power2);
 2920              		.loc 1 1654 0
 2921 0e28 0022     		movs	r2, #0
 2922 0e2a 0023     		movs	r3, #0
1651:HANcoder_E407_CAN_COMM_TEST.c **** 
 2923              		.loc 1 1651 0
 2924 0e2c 0646     		mov	r6, r0
 2925 0e2e 0F46     		mov	r7, r1
 2926              	.LVL401:
1654:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Power2 = ceil(rtb_Power2);
 2927              		.loc 1 1654 0
 2928 0e30 FFF7FEFF 		bl	__aeabi_dcmplt
 2929              	.LVL402:
 2930 0e34 0028     		cmp	r0, #0
 2931 0e36 41F0F783 		bne	.L356
1657:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2932              		.loc 1 1657 0
 2933 0e3a 3046     		mov	r0, r6
 2934 0e3c 3946     		mov	r1, r7
 2935 0e3e FFF7FEFF 		bl	floor
 2936              	.LVL403:
 2937 0e42 0646     		mov	r6, r0
 2938              	.LVL404:
 2939 0e44 0F46     		mov	r7, r1
 2940              	.LVL405:
 2941              	.L107:
 2942              	.LBB270:
 2943              	.LBB271:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 2944              		.loc 1 299 0
 2945 0e46 2046     		mov	r0, r4
 2946 0e48 0023     		movs	r3, #0
 2947 0e4a 2946     		mov	r1, r5
 2948 0e4c 0022     		movs	r2, #0
 2949 0e4e FFF7FEFF 		bl	__aeabi_dcmplt
 2950              	.LVL406:
 2951 0e52 2F4B     		ldr	r3, .L431+52
 2952 0e54 0293     		str	r3, [sp, #8]
 2953 0e56 1C46     		mov	r4, r3
 2954              	.LVL407:
 2955 0e58 4FF00103 		mov	r3, #1
 2956 0e5c 0028     		cmp	r0, #0
 2957 0e5e 01F05D82 		beq	.L357
 2958              	.L108:
 2959 0e62 D901     		lsls	r1, r3, #7
 2960 0e64 2174     		strb	r1, [r4, #16]
 2961              	.LVL408:
 2962              	.LBE271:
 2963              	.LBE270:
1680:HANcoder_E407_CAN_COMM_TEST.c ****       }
 2964              		.loc 1 1680 0
 2965 0e66 DBE90023 		ldrd	r2, [fp]
 2966 0e6a 0020     		movs	r0, #0
 2967 0e6c 4FF08041 		mov	r1, #1073741824
 2968 0e70 FFF7FEFF 		bl	pow
 2969              	.LVL409:
 2970 0e74 0446     		mov	r4, r0
 2971 0e76 0D46     		mov	r5, r1
 2972              	.LVL410:
1690:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_fo.y) + (uint8_T)rtb_Power2);
 2973              		.loc 1 1690 0
 2974 0e78 3046     		mov	r0, r6
 2975 0e7a 3946     		mov	r1, r7
 2976 0e7c FFF7FEFF 		bl	__aeabi_d2uiz
 2977              	.LVL411:
 2978 0e80 029B     		ldr	r3, [sp, #8]
1694:HANcoder_E407_CAN_COMM_TEST.c **** 
 2979              		.loc 1 1694 0
 2980 0e82 244E     		ldr	r6, .L431+56
 2981              	.LVL412:
1690:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_fo.y) + (uint8_T)rtb_Power2);
 2982              		.loc 1 1690 0
 2983 0e84 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
 2984 0e86 DDE90678 		ldrd	r7, [sp, #24]
 2985 0e8a 2246     		mov	r2, r4
 2986 0e8c 2B46     		mov	r3, r5
 2987 0e8e 4418     		adds	r4, r0, r1
 2988              	.LVL413:
 2989 0e90 3846     		mov	r0, r7
 2990 0e92 4146     		mov	r1, r8
 2991 0e94 FFF7FEFF 		bl	__aeabi_dmul
 2992              	.LVL414:
 2993 0e98 FFF7FEFF 		bl	__aeabi_d2uiz
 2994              	.LVL415:
 2995 0e9c 1E4D     		ldr	r5, .L431+60
 2996 0e9e 0444     		add	r4, r4, r0
1694:HANcoder_E407_CAN_COMM_TEST.c **** 
 2997              		.loc 1 1694 0
 2998 0ea0 DDE90823 		ldrd	r2, [sp, #32]
 2999 0ea4 3846     		mov	r0, r7
 3000 0ea6 4146     		mov	r1, r8
1690:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_fo.y) + (uint8_T)rtb_Power2);
 3001              		.loc 1 1690 0
 3002 0ea8 2C70     		strb	r4, [r5]
1694:HANcoder_E407_CAN_COMM_TEST.c **** 
 3003              		.loc 1 1694 0
 3004 0eaa FFF7FEFF 		bl	__aeabi_dcmpge
 3005              	.LVL416:
 3006 0eae 4FF00103 		mov	r3, #1
 3007 0eb2 0028     		cmp	r0, #0
 3008 0eb4 01F02F82 		beq	.L358
 3009              	.L109:
1704:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S120>/Switch' */
 3010              		.loc 1 1704 0
 3011 0eb8 184A     		ldr	r2, .L431+64
1694:HANcoder_E407_CAN_COMM_TEST.c **** 
 3012              		.loc 1 1694 0
 3013 0eba 3370     		strb	r3, [r6]
1704:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S120>/Switch' */
 3014              		.loc 1 1704 0
 3015 0ebc 124B     		ldr	r3, .L431+44
 3016 0ebe D2E90045 		ldrd	r4, [r2]
 3017 0ec2 D3E90089 		ldrd	r8, [r3]
 3018 0ec6 2246     		mov	r2, r4
 3019 0ec8 2B46     		mov	r3, r5
 3020 0eca 4046     		mov	r0, r8
 3021 0ecc 4946     		mov	r1, r9
 3022 0ece FFF7FEFF 		bl	__aeabi_dcmplt
 3023              	.LVL417:
 3024 0ed2 0028     		cmp	r0, #0
 3025 0ed4 01F00F82 		beq	.L359
 3026 0ed8 24E0     		b	.L432
 3027              	.L433:
 3028 0eda 00BF     		.align	2
 3029              	.L431:
 3030 0edc 00000000 		.word	Rx_Buffer_1_CAN2
 3031 0ee0 00000000 		.word	Rx_Buffer_8_CAN2
 3032 0ee4 00000000 		.word	Rx_Buffer_6_CAN2
 3033 0ee8 00000000 		.word	.LANCHOR4
 3034 0eec 00000000 		.word	.LANCHOR5
 3035 0ef0 00000000 		.word	Rx_ID_CAN2_s
 3036 0ef4 00000000 		.word	Rx_ID_CAN1_s
 3037 0ef8 00000000 		.word	WKUP_button
 3038 0efc 00000000 		.word	sender_id
 3039 0f00 00000000 		.word	rtDWork
 3040 0f04 00000000 		.word	.LANCHOR7
 3041 0f08 00000000 		.word	.LANCHOR6
 3042 0f0c 00001C40 		.word	1075576832
 3043 0f10 00000000 		.word	rtB
 3044 0f14 00000000 		.word	OF5_CAN1
 3045 0f18 00000000 		.word	Tx_coded5_CAN1
 3046 0f1c 00000000 		.word	.LANCHOR9
 3047 0f20 00000000 		.word	.LANCHOR1
 3048              	.L432:
 3049              	.L110:
 3050              	.LVL418:
1717:HANcoder_E407_CAN_COMM_TEST.c **** 
 3051              		.loc 1 1717 0
 3052 0f24 29F00045 		bic	r5, r9, #-2147483648
1720:HANcoder_E407_CAN_COMM_TEST.c **** 
 3053              		.loc 1 1720 0
 3054 0f28 2946     		mov	r1, r5
 3055 0f2a 4046     		mov	r0, r8
 3056 0f2c FFF7FEFF 		bl	floor
 3057              	.LVL419:
 3058 0f30 CDE90601 		strd	r0, [sp, #24]
 3059              	.LVL420:
1728:HANcoder_E407_CAN_COMM_TEST.c **** 
 3060              		.loc 1 1728 0
 3061 0f34 DBF80410 		ldr	r1, [fp, #4]
 3062 0f38 DBF80020 		ldr	r2, [fp]
 3063 0f3c 01F10043 		add	r3, r1, #-2147483648
 3064              	.LVL421:
1737:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3065              		.loc 1 1737 0
 3066 0f40 0020     		movs	r0, #0
 3067 0f42 4FF08041 		mov	r1, #1073741824
 3068 0f46 FFF7FEFF 		bl	pow
 3069              	.LVL422:
1748:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3070              		.loc 1 1748 0
 3071 0f4a DDE90423 		ldrd	r2, [sp, #16]
1737:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3072              		.loc 1 1737 0
 3073 0f4e 0646     		mov	r6, r0
 3074 0f50 0F46     		mov	r7, r1
 3075              	.LVL423:
1748:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3076              		.loc 1 1748 0
 3077 0f52 0020     		movs	r0, #0
 3078 0f54 4FF08041 		mov	r1, #1073741824
 3079 0f58 FFF7FEFF 		bl	pow
 3080              	.LVL424:
1754:HANcoder_E407_CAN_COMM_TEST.c **** 
 3081              		.loc 1 1754 0
 3082 0f5c DDE90623 		ldrd	r2, [sp, #24]
1748:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3083              		.loc 1 1748 0
 3084 0f60 CDE90801 		strd	r0, [sp, #32]
 3085              	.LVL425:
1754:HANcoder_E407_CAN_COMM_TEST.c **** 
 3086              		.loc 1 1754 0
 3087 0f64 2946     		mov	r1, r5
 3088 0f66 4046     		mov	r0, r8
 3089              	.LVL426:
 3090 0f68 FFF7FEFF 		bl	__aeabi_dsub
 3091              	.LVL427:
 3092 0f6c 3246     		mov	r2, r6
 3093 0f6e 3B46     		mov	r3, r7
 3094 0f70 FFF7FEFF 		bl	__aeabi_ddiv
 3095              	.LVL428:
1757:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3096              		.loc 1 1757 0
 3097 0f74 0022     		movs	r2, #0
 3098 0f76 0023     		movs	r3, #0
1754:HANcoder_E407_CAN_COMM_TEST.c **** 
 3099              		.loc 1 1754 0
 3100 0f78 0446     		mov	r4, r0
 3101 0f7a 0D46     		mov	r5, r1
 3102              	.LVL429:
1757:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3103              		.loc 1 1757 0
 3104 0f7c FFF7FEFF 		bl	__aeabi_dcmplt
 3105              	.LVL430:
 3106 0f80 0028     		cmp	r0, #0
 3107 0f82 41F0C983 		bne	.L360
1760:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3108              		.loc 1 1760 0
 3109 0f86 2046     		mov	r0, r4
 3110 0f88 2946     		mov	r1, r5
 3111 0f8a FFF7FEFF 		bl	floor
 3112              	.LVL431:
 3113 0f8e 0446     		mov	r4, r0
 3114              	.LVL432:
 3115 0f90 0D46     		mov	r5, r1
 3116              	.LVL433:
 3117              	.L114:
 3118              	.LBB273:
 3119              	.LBB274:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3120              		.loc 1 299 0
 3121 0f92 0023     		movs	r3, #0
 3122 0f94 4046     		mov	r0, r8
 3123 0f96 4946     		mov	r1, r9
 3124 0f98 0022     		movs	r2, #0
 3125 0f9a FFF7FEFF 		bl	__aeabi_dcmplt
 3126              	.LVL434:
 3127 0f9e CD4E     		ldr	r6, .L434
 3128 0fa0 4FF00103 		mov	r3, #1
 3129 0fa4 0028     		cmp	r0, #0
 3130 0fa6 01F0A381 		beq	.L361
 3131              	.L115:
 3132 0faa D901     		lsls	r1, r3, #7
 3133 0fac 3172     		strb	r1, [r6, #8]
 3134              	.LVL435:
 3135              	.LBE274:
 3136              	.LBE273:
1783:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3137              		.loc 1 1783 0
 3138 0fae DBE90023 		ldrd	r2, [fp]
 3139 0fb2 0020     		movs	r0, #0
 3140 0fb4 4FF08041 		mov	r1, #1073741824
 3141 0fb8 FFF7FEFF 		bl	pow
 3142              	.LVL436:
 3143 0fbc 0646     		mov	r6, r0
 3144 0fbe 0F46     		mov	r7, r1
 3145              	.LVL437:
1793:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_g1.y) + (uint8_T)rtb_Fix1);
 3146              		.loc 1 1793 0
 3147 0fc0 2046     		mov	r0, r4
 3148 0fc2 2946     		mov	r1, r5
 3149 0fc4 FFF7FEFF 		bl	__aeabi_d2uiz
 3150              	.LVL438:
 3151 0fc8 029B     		ldr	r3, [sp, #8]
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 3152              		.loc 1 1797 0
 3153 0fca C34C     		ldr	r4, .L434+4
 3154              	.LVL439:
1793:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_g1.y) + (uint8_T)rtb_Fix1);
 3155              		.loc 1 1793 0
 3156 0fcc 1D7A     		ldrb	r5, [r3, #8]	@ zero_extendqisi2
 3157 0fce 3246     		mov	r2, r6
 3158 0fd0 3B46     		mov	r3, r7
 3159 0fd2 DDE90667 		ldrd	r6, [sp, #24]
 3160              	.LVL440:
 3161 0fd6 0544     		add	r5, r5, r0
 3162 0fd8 3946     		mov	r1, r7
 3163 0fda 3046     		mov	r0, r6
 3164 0fdc FFF7FEFF 		bl	__aeabi_dmul
 3165              	.LVL441:
 3166 0fe0 FFF7FEFF 		bl	__aeabi_d2uiz
 3167              	.LVL442:
 3168 0fe4 0544     		add	r5, r5, r0
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 3169              		.loc 1 1797 0
 3170 0fe6 3046     		mov	r0, r6
1793:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_g1.y) + (uint8_T)rtb_Fix1);
 3171              		.loc 1 1793 0
 3172 0fe8 BC4E     		ldr	r6, .L434+8
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 3173              		.loc 1 1797 0
 3174 0fea DDE90823 		ldrd	r2, [sp, #32]
 3175 0fee 3946     		mov	r1, r7
1793:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_g1.y) + (uint8_T)rtb_Fix1);
 3176              		.loc 1 1793 0
 3177 0ff0 3570     		strb	r5, [r6]
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 3178              		.loc 1 1797 0
 3179 0ff2 FFF7FEFF 		bl	__aeabi_dcmpge
 3180              	.LVL443:
 3181 0ff6 4FF00103 		mov	r3, #1
 3182 0ffa 0028     		cmp	r0, #0
 3183 0ffc 01F07581 		beq	.L362
 3184              	.L116:
1807:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S121>/Switch' */
 3185              		.loc 1 1807 0
 3186 1000 B74A     		ldr	r2, .L434+12
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 3187              		.loc 1 1797 0
 3188 1002 2370     		strb	r3, [r4]
1807:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S121>/Switch' */
 3189              		.loc 1 1807 0
 3190 1004 B74B     		ldr	r3, .L434+16
 3191 1006 D2E90045 		ldrd	r4, [r2]
 3192 100a D3E90089 		ldrd	r8, [r3]
 3193              	.LVL444:
 3194 100e 2246     		mov	r2, r4
 3195 1010 2B46     		mov	r3, r5
 3196 1012 4046     		mov	r0, r8
 3197 1014 4946     		mov	r1, r9
 3198 1016 FFF7FEFF 		bl	__aeabi_dcmplt
 3199              	.LVL445:
 3200 101a 0028     		cmp	r0, #0
 3201 101c 01F05581 		beq	.L363
 3202              	.L117:
 3203              	.LVL446:
1820:HANcoder_E407_CAN_COMM_TEST.c **** 
 3204              		.loc 1 1820 0
 3205 1020 29F00045 		bic	r5, r9, #-2147483648
 3206              	.LVL447:
1823:HANcoder_E407_CAN_COMM_TEST.c **** 
 3207              		.loc 1 1823 0
 3208 1024 2946     		mov	r1, r5
 3209 1026 4046     		mov	r0, r8
 3210 1028 FFF7FEFF 		bl	floor
 3211              	.LVL448:
 3212 102c CDE90601 		strd	r0, [sp, #24]
 3213              	.LVL449:
1831:HANcoder_E407_CAN_COMM_TEST.c **** 
 3214              		.loc 1 1831 0
 3215 1030 DBF80410 		ldr	r1, [fp, #4]
 3216 1034 DBF80020 		ldr	r2, [fp]
 3217 1038 01F10043 		add	r3, r1, #-2147483648
 3218              	.LVL450:
1840:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3219              		.loc 1 1840 0
 3220 103c 0020     		movs	r0, #0
 3221 103e 4FF08041 		mov	r1, #1073741824
 3222 1042 FFF7FEFF 		bl	pow
 3223              	.LVL451:
1851:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3224              		.loc 1 1851 0
 3225 1046 DDE90423 		ldrd	r2, [sp, #16]
1840:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3226              		.loc 1 1840 0
 3227 104a 0646     		mov	r6, r0
 3228 104c 0F46     		mov	r7, r1
 3229              	.LVL452:
1851:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3230              		.loc 1 1851 0
 3231 104e 0020     		movs	r0, #0
 3232 1050 4FF08041 		mov	r1, #1073741824
 3233 1054 FFF7FEFF 		bl	pow
 3234              	.LVL453:
1857:HANcoder_E407_CAN_COMM_TEST.c **** 
 3235              		.loc 1 1857 0
 3236 1058 DDE90623 		ldrd	r2, [sp, #24]
1851:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3237              		.loc 1 1851 0
 3238 105c CDE90801 		strd	r0, [sp, #32]
 3239              	.LVL454:
1857:HANcoder_E407_CAN_COMM_TEST.c **** 
 3240              		.loc 1 1857 0
 3241 1060 2946     		mov	r1, r5
 3242 1062 4046     		mov	r0, r8
 3243              	.LVL455:
 3244 1064 FFF7FEFF 		bl	__aeabi_dsub
 3245              	.LVL456:
 3246 1068 3246     		mov	r2, r6
 3247 106a 3B46     		mov	r3, r7
 3248 106c FFF7FEFF 		bl	__aeabi_ddiv
 3249              	.LVL457:
1860:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3250              		.loc 1 1860 0
 3251 1070 0022     		movs	r2, #0
 3252 1072 0023     		movs	r3, #0
1857:HANcoder_E407_CAN_COMM_TEST.c **** 
 3253              		.loc 1 1857 0
 3254 1074 0446     		mov	r4, r0
 3255 1076 0D46     		mov	r5, r1
 3256              	.LVL458:
1860:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3257              		.loc 1 1860 0
 3258 1078 FFF7FEFF 		bl	__aeabi_dcmplt
 3259              	.LVL459:
 3260 107c 0028     		cmp	r0, #0
 3261 107e 41F04383 		bne	.L364
1863:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3262              		.loc 1 1863 0
 3263 1082 2046     		mov	r0, r4
 3264 1084 2946     		mov	r1, r5
 3265 1086 FFF7FEFF 		bl	floor
 3266              	.LVL460:
 3267 108a 0446     		mov	r4, r0
 3268              	.LVL461:
 3269 108c 0D46     		mov	r5, r1
 3270              	.LVL462:
 3271              	.L121:
 3272              	.LBB276:
 3273              	.LBB277:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3274              		.loc 1 299 0
 3275 108e 0023     		movs	r3, #0
 3276 1090 4046     		mov	r0, r8
 3277 1092 4946     		mov	r1, r9
 3278 1094 0022     		movs	r2, #0
 3279 1096 FFF7FEFF 		bl	__aeabi_dcmplt
 3280              	.LVL463:
 3281 109a 8E4E     		ldr	r6, .L434
 3282 109c 4FF00103 		mov	r3, #1
 3283 10a0 0028     		cmp	r0, #0
 3284 10a2 01F00F81 		beq	.L365
 3285              	.L122:
 3286 10a6 D901     		lsls	r1, r3, #7
 3287 10a8 F171     		strb	r1, [r6, #7]
 3288              	.LVL464:
 3289              	.LBE277:
 3290              	.LBE276:
1886:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3291              		.loc 1 1886 0
 3292 10aa DBE90023 		ldrd	r2, [fp]
 3293 10ae 0020     		movs	r0, #0
 3294 10b0 4FF08041 		mov	r1, #1073741824
 3295 10b4 FFF7FEFF 		bl	pow
 3296              	.LVL465:
 3297 10b8 0646     		mov	r6, r0
 3298 10ba 0F46     		mov	r7, r1
 3299              	.LVL466:
1896:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_am.y) + (uint8_T)rtb_Fix1);
 3300              		.loc 1 1896 0
 3301 10bc 2046     		mov	r0, r4
 3302 10be 2946     		mov	r1, r5
 3303 10c0 FFF7FEFF 		bl	__aeabi_d2uiz
 3304              	.LVL467:
 3305 10c4 029B     		ldr	r3, [sp, #8]
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 3306              		.loc 1 1900 0
 3307 10c6 884C     		ldr	r4, .L434+20
 3308              	.LVL468:
1896:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_am.y) + (uint8_T)rtb_Fix1);
 3309              		.loc 1 1896 0
 3310 10c8 DD79     		ldrb	r5, [r3, #7]	@ zero_extendqisi2
 3311 10ca 3246     		mov	r2, r6
 3312 10cc 3B46     		mov	r3, r7
 3313 10ce DDE90667 		ldrd	r6, [sp, #24]
 3314              	.LVL469:
 3315 10d2 0544     		add	r5, r5, r0
 3316 10d4 3946     		mov	r1, r7
 3317 10d6 3046     		mov	r0, r6
 3318 10d8 FFF7FEFF 		bl	__aeabi_dmul
 3319              	.LVL470:
 3320 10dc FFF7FEFF 		bl	__aeabi_d2uiz
 3321              	.LVL471:
 3322 10e0 0544     		add	r5, r5, r0
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 3323              		.loc 1 1900 0
 3324 10e2 3046     		mov	r0, r6
1896:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_am.y) + (uint8_T)rtb_Fix1);
 3325              		.loc 1 1896 0
 3326 10e4 814E     		ldr	r6, .L434+24
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 3327              		.loc 1 1900 0
 3328 10e6 DDE90823 		ldrd	r2, [sp, #32]
 3329 10ea 3946     		mov	r1, r7
1896:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_am.y) + (uint8_T)rtb_Fix1);
 3330              		.loc 1 1896 0
 3331 10ec 3570     		strb	r5, [r6]
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 3332              		.loc 1 1900 0
 3333 10ee FFF7FEFF 		bl	__aeabi_dcmpge
 3334              	.LVL472:
 3335 10f2 4FF00103 		mov	r3, #1
 3336 10f6 0028     		cmp	r0, #0
 3337 10f8 01F0E180 		beq	.L366
 3338              	.L123:
1910:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S122>/Switch' */
 3339              		.loc 1 1910 0
 3340 10fc 7C4A     		ldr	r2, .L434+28
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 3341              		.loc 1 1900 0
 3342 10fe 2370     		strb	r3, [r4]
1910:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S122>/Switch' */
 3343              		.loc 1 1910 0
 3344 1100 784B     		ldr	r3, .L434+16
 3345 1102 D2E90045 		ldrd	r4, [r2]
 3346 1106 D3E90067 		ldrd	r6, [r3]
 3347 110a 2246     		mov	r2, r4
 3348 110c 2B46     		mov	r3, r5
 3349 110e 3046     		mov	r0, r6
 3350 1110 3946     		mov	r1, r7
 3351 1112 FFF7FEFF 		bl	__aeabi_dcmplt
 3352              	.LVL473:
 3353 1116 0028     		cmp	r0, #0
 3354 1118 01F0C180 		beq	.L367
 3355              	.L124:
 3356              	.LVL474:
1923:HANcoder_E407_CAN_COMM_TEST.c **** 
 3357              		.loc 1 1923 0
 3358 111c 27F00049 		bic	r9, r7, #-2147483648
 3359              	.LVL475:
1926:HANcoder_E407_CAN_COMM_TEST.c **** 
 3360              		.loc 1 1926 0
 3361 1120 3046     		mov	r0, r6
 3362 1122 4946     		mov	r1, r9
 3363 1124 FFF7FEFF 		bl	floor
 3364              	.LVL476:
 3365 1128 CDE90601 		strd	r0, [sp, #24]
 3366              	.LVL477:
1934:HANcoder_E407_CAN_COMM_TEST.c **** 
 3367              		.loc 1 1934 0
 3368 112c DBF80410 		ldr	r1, [fp, #4]
 3369 1130 DBF80020 		ldr	r2, [fp]
 3370 1134 01F10043 		add	r3, r1, #-2147483648
 3371              	.LVL478:
1943:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3372              		.loc 1 1943 0
 3373 1138 0020     		movs	r0, #0
 3374 113a 4FF08041 		mov	r1, #1073741824
 3375 113e FFF7FEFF 		bl	pow
 3376              	.LVL479:
1954:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3377              		.loc 1 1954 0
 3378 1142 DDE90423 		ldrd	r2, [sp, #16]
1943:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3379              		.loc 1 1943 0
 3380 1146 0446     		mov	r4, r0
 3381 1148 0D46     		mov	r5, r1
 3382              	.LVL480:
1954:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3383              		.loc 1 1954 0
 3384 114a 0020     		movs	r0, #0
 3385 114c 4FF08041 		mov	r1, #1073741824
 3386 1150 FFF7FEFF 		bl	pow
 3387              	.LVL481:
1960:HANcoder_E407_CAN_COMM_TEST.c **** 
 3388              		.loc 1 1960 0
 3389 1154 DDE90623 		ldrd	r2, [sp, #24]
1954:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3390              		.loc 1 1954 0
 3391 1158 CDE90801 		strd	r0, [sp, #32]
 3392              	.LVL482:
1960:HANcoder_E407_CAN_COMM_TEST.c **** 
 3393              		.loc 1 1960 0
 3394 115c 3046     		mov	r0, r6
 3395              	.LVL483:
 3396 115e 4946     		mov	r1, r9
 3397 1160 FFF7FEFF 		bl	__aeabi_dsub
 3398              	.LVL484:
 3399 1164 2246     		mov	r2, r4
 3400 1166 2B46     		mov	r3, r5
 3401 1168 FFF7FEFF 		bl	__aeabi_ddiv
 3402              	.LVL485:
1963:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3403              		.loc 1 1963 0
 3404 116c 0022     		movs	r2, #0
 3405 116e 0023     		movs	r3, #0
1960:HANcoder_E407_CAN_COMM_TEST.c **** 
 3406              		.loc 1 1960 0
 3407 1170 0446     		mov	r4, r0
 3408              	.LVL486:
 3409 1172 0D46     		mov	r5, r1
 3410              	.LVL487:
1963:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3411              		.loc 1 1963 0
 3412 1174 FFF7FEFF 		bl	__aeabi_dcmplt
 3413              	.LVL488:
 3414 1178 0028     		cmp	r0, #0
 3415 117a 41F0BD82 		bne	.L368
1966:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3416              		.loc 1 1966 0
 3417 117e 2046     		mov	r0, r4
 3418 1180 2946     		mov	r1, r5
 3419 1182 FFF7FEFF 		bl	floor
 3420              	.LVL489:
 3421 1186 0446     		mov	r4, r0
 3422              	.LVL490:
 3423 1188 0D46     		mov	r5, r1
 3424              	.LVL491:
 3425              	.L128:
 3426              	.LBB279:
 3427              	.LBB280:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3428              		.loc 1 299 0
 3429 118a 3046     		mov	r0, r6
 3430 118c 0023     		movs	r3, #0
 3431 118e 3946     		mov	r1, r7
 3432 1190 0022     		movs	r2, #0
 3433 1192 FFF7FEFF 		bl	__aeabi_dcmplt
 3434              	.LVL492:
 3435 1196 4F4E     		ldr	r6, .L434
 3436              	.LVL493:
 3437 1198 4FF00103 		mov	r3, #1
 3438 119c 0028     		cmp	r0, #0
 3439 119e 01F07B80 		beq	.L369
 3440              	.L129:
 3441 11a2 D901     		lsls	r1, r3, #7
 3442 11a4 B171     		strb	r1, [r6, #6]
 3443              	.LVL494:
 3444              	.LBE280:
 3445              	.LBE279:
1989:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3446              		.loc 1 1989 0
 3447 11a6 DBE90023 		ldrd	r2, [fp]
 3448 11aa 0020     		movs	r0, #0
 3449 11ac 4FF08041 		mov	r1, #1073741824
 3450 11b0 FFF7FEFF 		bl	pow
 3451              	.LVL495:
 3452 11b4 0646     		mov	r6, r0
 3453 11b6 0F46     		mov	r7, r1
 3454              	.LVL496:
1999:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ee.y) + (uint8_T)rtb_Fix1);
 3455              		.loc 1 1999 0
 3456 11b8 2046     		mov	r0, r4
 3457 11ba 2946     		mov	r1, r5
 3458 11bc FFF7FEFF 		bl	__aeabi_d2uiz
 3459              	.LVL497:
 3460 11c0 029B     		ldr	r3, [sp, #8]
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 3461              		.loc 1 2003 0
 3462 11c2 4C4C     		ldr	r4, .L434+32
 3463              	.LVL498:
1999:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ee.y) + (uint8_T)rtb_Fix1);
 3464              		.loc 1 1999 0
 3465 11c4 9D79     		ldrb	r5, [r3, #6]	@ zero_extendqisi2
 3466 11c6 3246     		mov	r2, r6
 3467 11c8 3B46     		mov	r3, r7
 3468 11ca DDE90667 		ldrd	r6, [sp, #24]
 3469              	.LVL499:
 3470 11ce 0544     		add	r5, r5, r0
 3471 11d0 3946     		mov	r1, r7
 3472 11d2 3046     		mov	r0, r6
 3473 11d4 FFF7FEFF 		bl	__aeabi_dmul
 3474              	.LVL500:
 3475 11d8 FFF7FEFF 		bl	__aeabi_d2uiz
 3476              	.LVL501:
 3477 11dc 0544     		add	r5, r5, r0
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 3478              		.loc 1 2003 0
 3479 11de 3046     		mov	r0, r6
1999:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ee.y) + (uint8_T)rtb_Fix1);
 3480              		.loc 1 1999 0
 3481 11e0 454E     		ldr	r6, .L434+36
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 3482              		.loc 1 2003 0
 3483 11e2 DDE90823 		ldrd	r2, [sp, #32]
 3484 11e6 3946     		mov	r1, r7
1999:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ee.y) + (uint8_T)rtb_Fix1);
 3485              		.loc 1 1999 0
 3486 11e8 3570     		strb	r5, [r6]
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 3487              		.loc 1 2003 0
 3488 11ea FFF7FEFF 		bl	__aeabi_dcmpge
 3489              	.LVL502:
 3490 11ee 4FF00103 		mov	r3, #1
 3491 11f2 0028     		cmp	r0, #0
 3492 11f4 01F04D80 		beq	.L370
 3493              	.L130:
2013:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S123>/Switch' */
 3494              		.loc 1 2013 0
 3495 11f8 404A     		ldr	r2, .L434+40
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 3496              		.loc 1 2003 0
 3497 11fa 2370     		strb	r3, [r4]
2013:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S123>/Switch' */
 3498              		.loc 1 2013 0
 3499 11fc 394B     		ldr	r3, .L434+16
 3500 11fe D2E90045 		ldrd	r4, [r2]
 3501 1202 D3E90067 		ldrd	r6, [r3]
 3502 1206 2246     		mov	r2, r4
 3503 1208 2B46     		mov	r3, r5
 3504 120a 3046     		mov	r0, r6
 3505 120c 3946     		mov	r1, r7
 3506 120e FFF7FEFF 		bl	__aeabi_dcmplt
 3507              	.LVL503:
 3508 1212 0028     		cmp	r0, #0
 3509 1214 01F02D80 		beq	.L371
 3510              	.L131:
 3511              	.LVL504:
2026:HANcoder_E407_CAN_COMM_TEST.c **** 
 3512              		.loc 1 2026 0
 3513 1218 27F00049 		bic	r9, r7, #-2147483648
 3514              	.LVL505:
2029:HANcoder_E407_CAN_COMM_TEST.c **** 
 3515              		.loc 1 2029 0
 3516 121c 3046     		mov	r0, r6
 3517 121e 4946     		mov	r1, r9
 3518 1220 FFF7FEFF 		bl	floor
 3519              	.LVL506:
 3520 1224 CDE90601 		strd	r0, [sp, #24]
 3521              	.LVL507:
2037:HANcoder_E407_CAN_COMM_TEST.c **** 
 3522              		.loc 1 2037 0
 3523 1228 DBF80410 		ldr	r1, [fp, #4]
 3524 122c DBF80020 		ldr	r2, [fp]
 3525 1230 01F10043 		add	r3, r1, #-2147483648
 3526              	.LVL508:
2046:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3527              		.loc 1 2046 0
 3528 1234 0020     		movs	r0, #0
 3529 1236 4FF08041 		mov	r1, #1073741824
 3530 123a FFF7FEFF 		bl	pow
 3531              	.LVL509:
2057:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3532              		.loc 1 2057 0
 3533 123e DDE90423 		ldrd	r2, [sp, #16]
2046:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3534              		.loc 1 2046 0
 3535 1242 0446     		mov	r4, r0
 3536 1244 0D46     		mov	r5, r1
 3537              	.LVL510:
2057:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3538              		.loc 1 2057 0
 3539 1246 0020     		movs	r0, #0
 3540 1248 4FF08041 		mov	r1, #1073741824
 3541 124c FFF7FEFF 		bl	pow
 3542              	.LVL511:
2063:HANcoder_E407_CAN_COMM_TEST.c **** 
 3543              		.loc 1 2063 0
 3544 1250 DDE90623 		ldrd	r2, [sp, #24]
2057:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3545              		.loc 1 2057 0
 3546 1254 CDE90801 		strd	r0, [sp, #32]
 3547              	.LVL512:
2063:HANcoder_E407_CAN_COMM_TEST.c **** 
 3548              		.loc 1 2063 0
 3549 1258 3046     		mov	r0, r6
 3550              	.LVL513:
 3551 125a 4946     		mov	r1, r9
 3552 125c FFF7FEFF 		bl	__aeabi_dsub
 3553              	.LVL514:
 3554 1260 2246     		mov	r2, r4
 3555 1262 2B46     		mov	r3, r5
 3556 1264 FFF7FEFF 		bl	__aeabi_ddiv
 3557              	.LVL515:
2066:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3558              		.loc 1 2066 0
 3559 1268 0022     		movs	r2, #0
 3560 126a 0023     		movs	r3, #0
2063:HANcoder_E407_CAN_COMM_TEST.c **** 
 3561              		.loc 1 2063 0
 3562 126c 0446     		mov	r4, r0
 3563              	.LVL516:
 3564 126e 0D46     		mov	r5, r1
 3565              	.LVL517:
2066:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3566              		.loc 1 2066 0
 3567 1270 FFF7FEFF 		bl	__aeabi_dcmplt
 3568              	.LVL518:
 3569 1274 0028     		cmp	r0, #0
 3570 1276 41F03782 		bne	.L372
2069:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3571              		.loc 1 2069 0
 3572 127a 2046     		mov	r0, r4
 3573 127c 2946     		mov	r1, r5
 3574 127e FFF7FEFF 		bl	floor
 3575              	.LVL519:
 3576 1282 0446     		mov	r4, r0
 3577              	.LVL520:
 3578 1284 0D46     		mov	r5, r1
 3579              	.LVL521:
 3580              	.L135:
 3581              	.LBB282:
 3582              	.LBB283:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3583              		.loc 1 299 0
 3584 1286 3046     		mov	r0, r6
 3585 1288 0023     		movs	r3, #0
 3586 128a 3946     		mov	r1, r7
 3587 128c 0022     		movs	r2, #0
 3588 128e FFF7FEFF 		bl	__aeabi_dcmplt
 3589              	.LVL522:
 3590 1292 104E     		ldr	r6, .L434
 3591              	.LVL523:
 3592 1294 4FF00103 		mov	r3, #1
 3593 1298 0028     		cmp	r0, #0
 3594 129a 00F0E787 		beq	.L373
 3595              	.L136:
 3596 129e D901     		lsls	r1, r3, #7
 3597 12a0 7171     		strb	r1, [r6, #5]
 3598              	.LVL524:
 3599              	.LBE283:
 3600              	.LBE282:
2092:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3601              		.loc 1 2092 0
 3602 12a2 DBE90023 		ldrd	r2, [fp]
 3603 12a6 0020     		movs	r0, #0
 3604 12a8 4FF08041 		mov	r1, #1073741824
 3605 12ac FFF7FEFF 		bl	pow
 3606              	.LVL525:
 3607 12b0 0646     		mov	r6, r0
 3608 12b2 0F46     		mov	r7, r1
 3609              	.LVL526:
2102:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_o0.y) + (uint8_T)rtb_Fix1);
 3610              		.loc 1 2102 0
 3611 12b4 2046     		mov	r0, r4
 3612 12b6 2946     		mov	r1, r5
 3613 12b8 FFF7FEFF 		bl	__aeabi_d2uiz
 3614              	.LVL527:
 3615 12bc 029B     		ldr	r3, [sp, #8]
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 3616              		.loc 1 2106 0
 3617 12be 104C     		ldr	r4, .L434+44
 3618              	.LVL528:
2102:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_o0.y) + (uint8_T)rtb_Fix1);
 3619              		.loc 1 2102 0
 3620 12c0 5D79     		ldrb	r5, [r3, #5]	@ zero_extendqisi2
 3621 12c2 3246     		mov	r2, r6
 3622 12c4 3B46     		mov	r3, r7
 3623 12c6 DDE90667 		ldrd	r6, [sp, #24]
 3624              	.LVL529:
 3625 12ca 0544     		add	r5, r5, r0
 3626 12cc 3946     		mov	r1, r7
 3627 12ce 3046     		mov	r0, r6
 3628 12d0 18E0     		b	.L435
 3629              	.L436:
 3630 12d2 00BF     		.align	2
 3631              	.L434:
 3632 12d4 00000000 		.word	rtB
 3633 12d8 00000000 		.word	OF6_CAN1
 3634 12dc 00000000 		.word	Tx_coded6_CAN1
 3635 12e0 00000000 		.word	.LANCHOR10
 3636 12e4 00000000 		.word	.LANCHOR6
 3637 12e8 00000000 		.word	OF4_CAN1
 3638 12ec 00000000 		.word	Tx_coded4_CAN1
 3639 12f0 00000000 		.word	.LANCHOR11
 3640 12f4 00000000 		.word	OF7_CAN1
 3641 12f8 00000000 		.word	Tx_coded7_CAN1
 3642 12fc 00000000 		.word	.LANCHOR12
 3643 1300 00000000 		.word	OF8_CAN1
 3644              	.L435:
 3645 1304 FFF7FEFF 		bl	__aeabi_dmul
 3646              	.LVL530:
 3647 1308 FFF7FEFF 		bl	__aeabi_d2uiz
 3648              	.LVL531:
 3649 130c 0544     		add	r5, r5, r0
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 3650              		.loc 1 2106 0
 3651 130e 3046     		mov	r0, r6
2102:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_o0.y) + (uint8_T)rtb_Fix1);
 3652              		.loc 1 2102 0
 3653 1310 CB4E     		ldr	r6, .L437
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 3654              		.loc 1 2106 0
 3655 1312 DDE90823 		ldrd	r2, [sp, #32]
 3656 1316 3946     		mov	r1, r7
2102:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_o0.y) + (uint8_T)rtb_Fix1);
 3657              		.loc 1 2102 0
 3658 1318 3570     		strb	r5, [r6]
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 3659              		.loc 1 2106 0
 3660 131a FFF7FEFF 		bl	__aeabi_dcmpge
 3661              	.LVL532:
 3662 131e 4FF00103 		mov	r3, #1
 3663 1322 0028     		cmp	r0, #0
 3664 1324 00F09F87 		beq	.L374
 3665              	.L137:
2116:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S124>/Switch' */
 3666              		.loc 1 2116 0
 3667 1328 C64A     		ldr	r2, .L437+4
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 3668              		.loc 1 2106 0
 3669 132a 2370     		strb	r3, [r4]
2116:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S124>/Switch' */
 3670              		.loc 1 2116 0
 3671 132c C64B     		ldr	r3, .L437+8
 3672 132e D2E90045 		ldrd	r4, [r2]
 3673 1332 D3E90067 		ldrd	r6, [r3]
 3674 1336 2246     		mov	r2, r4
 3675 1338 2B46     		mov	r3, r5
 3676 133a 3046     		mov	r0, r6
 3677 133c 3946     		mov	r1, r7
 3678 133e FFF7FEFF 		bl	__aeabi_dcmplt
 3679              	.LVL533:
 3680 1342 0028     		cmp	r0, #0
 3681 1344 00F07F87 		beq	.L375
 3682              	.L138:
 3683              	.LVL534:
2129:HANcoder_E407_CAN_COMM_TEST.c **** 
 3684              		.loc 1 2129 0
 3685 1348 27F00049 		bic	r9, r7, #-2147483648
 3686              	.LVL535:
2132:HANcoder_E407_CAN_COMM_TEST.c **** 
 3687              		.loc 1 2132 0
 3688 134c 3046     		mov	r0, r6
 3689 134e 4946     		mov	r1, r9
 3690 1350 FFF7FEFF 		bl	floor
 3691              	.LVL536:
 3692 1354 CDE90601 		strd	r0, [sp, #24]
 3693              	.LVL537:
2140:HANcoder_E407_CAN_COMM_TEST.c **** 
 3694              		.loc 1 2140 0
 3695 1358 DBF80410 		ldr	r1, [fp, #4]
 3696 135c DBF80020 		ldr	r2, [fp]
 3697 1360 01F10043 		add	r3, r1, #-2147483648
 3698              	.LVL538:
2149:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3699              		.loc 1 2149 0
 3700 1364 0020     		movs	r0, #0
 3701 1366 4FF08041 		mov	r1, #1073741824
 3702 136a FFF7FEFF 		bl	pow
 3703              	.LVL539:
2160:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3704              		.loc 1 2160 0
 3705 136e DDE90423 		ldrd	r2, [sp, #16]
2149:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3706              		.loc 1 2149 0
 3707 1372 0446     		mov	r4, r0
 3708 1374 0D46     		mov	r5, r1
 3709              	.LVL540:
2160:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3710              		.loc 1 2160 0
 3711 1376 0020     		movs	r0, #0
 3712 1378 4FF08041 		mov	r1, #1073741824
 3713 137c FFF7FEFF 		bl	pow
 3714              	.LVL541:
2166:HANcoder_E407_CAN_COMM_TEST.c **** 
 3715              		.loc 1 2166 0
 3716 1380 DDE90623 		ldrd	r2, [sp, #24]
2160:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3717              		.loc 1 2160 0
 3718 1384 CDE90801 		strd	r0, [sp, #32]
 3719              	.LVL542:
2166:HANcoder_E407_CAN_COMM_TEST.c **** 
 3720              		.loc 1 2166 0
 3721 1388 3046     		mov	r0, r6
 3722              	.LVL543:
 3723 138a 4946     		mov	r1, r9
 3724 138c FFF7FEFF 		bl	__aeabi_dsub
 3725              	.LVL544:
 3726 1390 2246     		mov	r2, r4
 3727 1392 2B46     		mov	r3, r5
 3728 1394 FFF7FEFF 		bl	__aeabi_ddiv
 3729              	.LVL545:
2169:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3730              		.loc 1 2169 0
 3731 1398 0022     		movs	r2, #0
 3732 139a 0023     		movs	r3, #0
2166:HANcoder_E407_CAN_COMM_TEST.c **** 
 3733              		.loc 1 2166 0
 3734 139c 0446     		mov	r4, r0
 3735              	.LVL546:
 3736 139e 0D46     		mov	r5, r1
 3737              	.LVL547:
2169:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3738              		.loc 1 2169 0
 3739 13a0 FFF7FEFF 		bl	__aeabi_dcmplt
 3740              	.LVL548:
 3741 13a4 0028     		cmp	r0, #0
 3742 13a6 41F09781 		bne	.L376
2172:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3743              		.loc 1 2172 0
 3744 13aa 2046     		mov	r0, r4
 3745 13ac 2946     		mov	r1, r5
 3746 13ae FFF7FEFF 		bl	floor
 3747              	.LVL549:
 3748 13b2 0446     		mov	r4, r0
 3749              	.LVL550:
 3750 13b4 0D46     		mov	r5, r1
 3751              	.LVL551:
 3752              	.L142:
 3753              	.LBB285:
 3754              	.LBB286:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3755              		.loc 1 299 0
 3756 13b6 3046     		mov	r0, r6
 3757 13b8 0023     		movs	r3, #0
 3758 13ba 3946     		mov	r1, r7
 3759 13bc 0022     		movs	r2, #0
 3760 13be FFF7FEFF 		bl	__aeabi_dcmplt
 3761              	.LVL552:
 3762 13c2 A24E     		ldr	r6, .L437+12
 3763              	.LVL553:
 3764 13c4 4FF00103 		mov	r3, #1
 3765 13c8 0028     		cmp	r0, #0
 3766 13ca 00F03987 		beq	.L377
 3767              	.L143:
 3768 13ce D901     		lsls	r1, r3, #7
 3769 13d0 3171     		strb	r1, [r6, #4]
 3770              	.LVL554:
 3771              	.LBE286:
 3772              	.LBE285:
2195:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3773              		.loc 1 2195 0
 3774 13d2 DBE90023 		ldrd	r2, [fp]
 3775 13d6 0020     		movs	r0, #0
 3776 13d8 4FF08041 		mov	r1, #1073741824
 3777 13dc FFF7FEFF 		bl	pow
 3778              	.LVL555:
 3779 13e0 0646     		mov	r6, r0
 3780 13e2 0F46     		mov	r7, r1
 3781              	.LVL556:
2205:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_lm.y) + (uint8_T)rtb_Fix1);
 3782              		.loc 1 2205 0
 3783 13e4 2046     		mov	r0, r4
 3784 13e6 2946     		mov	r1, r5
 3785 13e8 FFF7FEFF 		bl	__aeabi_d2uiz
 3786              	.LVL557:
 3787 13ec 029B     		ldr	r3, [sp, #8]
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 3788              		.loc 1 2209 0
 3789 13ee 984C     		ldr	r4, .L437+16
 3790              	.LVL558:
2205:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_lm.y) + (uint8_T)rtb_Fix1);
 3791              		.loc 1 2205 0
 3792 13f0 1D79     		ldrb	r5, [r3, #4]	@ zero_extendqisi2
 3793 13f2 3246     		mov	r2, r6
 3794 13f4 3B46     		mov	r3, r7
 3795 13f6 DDE90667 		ldrd	r6, [sp, #24]
 3796              	.LVL559:
 3797 13fa 0544     		add	r5, r5, r0
 3798 13fc 3946     		mov	r1, r7
 3799 13fe 3046     		mov	r0, r6
 3800 1400 FFF7FEFF 		bl	__aeabi_dmul
 3801              	.LVL560:
 3802 1404 FFF7FEFF 		bl	__aeabi_d2uiz
 3803              	.LVL561:
 3804 1408 0544     		add	r5, r5, r0
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 3805              		.loc 1 2209 0
 3806 140a 3046     		mov	r0, r6
2205:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_lm.y) + (uint8_T)rtb_Fix1);
 3807              		.loc 1 2205 0
 3808 140c 914E     		ldr	r6, .L437+20
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 3809              		.loc 1 2209 0
 3810 140e DDE90823 		ldrd	r2, [sp, #32]
 3811 1412 3946     		mov	r1, r7
2205:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_lm.y) + (uint8_T)rtb_Fix1);
 3812              		.loc 1 2205 0
 3813 1414 3570     		strb	r5, [r6]
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 3814              		.loc 1 2209 0
 3815 1416 FFF7FEFF 		bl	__aeabi_dcmpge
 3816              	.LVL562:
 3817 141a 4FF00103 		mov	r3, #1
 3818 141e 0028     		cmp	r0, #0
 3819 1420 00F00B87 		beq	.L378
 3820              	.L144:
2219:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S125>/Switch' */
 3821              		.loc 1 2219 0
 3822 1424 8C4A     		ldr	r2, .L437+24
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 3823              		.loc 1 2209 0
 3824 1426 2370     		strb	r3, [r4]
2219:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S125>/Switch' */
 3825              		.loc 1 2219 0
 3826 1428 874B     		ldr	r3, .L437+8
 3827 142a D2E90045 		ldrd	r4, [r2]
 3828 142e D3E90067 		ldrd	r6, [r3]
 3829 1432 2246     		mov	r2, r4
 3830 1434 2B46     		mov	r3, r5
 3831 1436 3046     		mov	r0, r6
 3832 1438 3946     		mov	r1, r7
 3833 143a FFF7FEFF 		bl	__aeabi_dcmplt
 3834              	.LVL563:
 3835 143e 0028     		cmp	r0, #0
 3836 1440 00F0EB86 		beq	.L379
 3837              	.L145:
 3838              	.LVL564:
2232:HANcoder_E407_CAN_COMM_TEST.c **** 
 3839              		.loc 1 2232 0
 3840 1444 27F00049 		bic	r9, r7, #-2147483648
 3841              	.LVL565:
2235:HANcoder_E407_CAN_COMM_TEST.c **** 
 3842              		.loc 1 2235 0
 3843 1448 3046     		mov	r0, r6
 3844 144a 4946     		mov	r1, r9
 3845 144c FFF7FEFF 		bl	floor
 3846              	.LVL566:
 3847 1450 CDE90601 		strd	r0, [sp, #24]
 3848              	.LVL567:
2243:HANcoder_E407_CAN_COMM_TEST.c **** 
 3849              		.loc 1 2243 0
 3850 1454 DBF80410 		ldr	r1, [fp, #4]
 3851 1458 DBF80020 		ldr	r2, [fp]
 3852 145c 01F10043 		add	r3, r1, #-2147483648
 3853              	.LVL568:
2252:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3854              		.loc 1 2252 0
 3855 1460 0020     		movs	r0, #0
 3856 1462 4FF08041 		mov	r1, #1073741824
 3857 1466 FFF7FEFF 		bl	pow
 3858              	.LVL569:
2263:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3859              		.loc 1 2263 0
 3860 146a DDE90423 		ldrd	r2, [sp, #16]
2252:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3861              		.loc 1 2252 0
 3862 146e 0446     		mov	r4, r0
 3863 1470 0D46     		mov	r5, r1
 3864              	.LVL570:
2263:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3865              		.loc 1 2263 0
 3866 1472 0020     		movs	r0, #0
 3867 1474 4FF08041 		mov	r1, #1073741824
 3868 1478 FFF7FEFF 		bl	pow
 3869              	.LVL571:
2269:HANcoder_E407_CAN_COMM_TEST.c **** 
 3870              		.loc 1 2269 0
 3871 147c DDE90623 		ldrd	r2, [sp, #24]
2263:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3872              		.loc 1 2263 0
 3873 1480 CDE90801 		strd	r0, [sp, #32]
 3874              	.LVL572:
2269:HANcoder_E407_CAN_COMM_TEST.c **** 
 3875              		.loc 1 2269 0
 3876 1484 3046     		mov	r0, r6
 3877              	.LVL573:
 3878 1486 4946     		mov	r1, r9
 3879 1488 FFF7FEFF 		bl	__aeabi_dsub
 3880              	.LVL574:
 3881 148c 2246     		mov	r2, r4
 3882 148e 2B46     		mov	r3, r5
 3883 1490 FFF7FEFF 		bl	__aeabi_ddiv
 3884              	.LVL575:
2272:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3885              		.loc 1 2272 0
 3886 1494 0022     		movs	r2, #0
 3887 1496 0023     		movs	r3, #0
2269:HANcoder_E407_CAN_COMM_TEST.c **** 
 3888              		.loc 1 2269 0
 3889 1498 0446     		mov	r4, r0
 3890              	.LVL576:
 3891 149a 0D46     		mov	r5, r1
 3892              	.LVL577:
2272:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 3893              		.loc 1 2272 0
 3894 149c FFF7FEFF 		bl	__aeabi_dcmplt
 3895              	.LVL578:
 3896 14a0 0028     		cmp	r0, #0
 3897 14a2 41F01181 		bne	.L380
2275:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3898              		.loc 1 2275 0
 3899 14a6 2046     		mov	r0, r4
 3900 14a8 2946     		mov	r1, r5
 3901 14aa FFF7FEFF 		bl	floor
 3902              	.LVL579:
 3903 14ae 0446     		mov	r4, r0
 3904              	.LVL580:
 3905 14b0 0D46     		mov	r5, r1
 3906              	.LVL581:
 3907              	.L149:
 3908              	.LBB288:
 3909              	.LBB289:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 3910              		.loc 1 299 0
 3911 14b2 3046     		mov	r0, r6
 3912 14b4 0023     		movs	r3, #0
 3913 14b6 3946     		mov	r1, r7
 3914 14b8 0022     		movs	r2, #0
 3915 14ba FFF7FEFF 		bl	__aeabi_dcmplt
 3916              	.LVL582:
 3917 14be 634E     		ldr	r6, .L437+12
 3918              	.LVL583:
 3919 14c0 4FF00103 		mov	r3, #1
 3920 14c4 0028     		cmp	r0, #0
 3921 14c6 00F0A586 		beq	.L381
 3922              	.L150:
 3923 14ca D901     		lsls	r1, r3, #7
 3924 14cc F170     		strb	r1, [r6, #3]
 3925              	.LVL584:
 3926              	.LBE289:
 3927              	.LBE288:
2298:HANcoder_E407_CAN_COMM_TEST.c ****       }
 3928              		.loc 1 2298 0
 3929 14ce DBE90023 		ldrd	r2, [fp]
 3930 14d2 0020     		movs	r0, #0
 3931 14d4 4FF08041 		mov	r1, #1073741824
 3932 14d8 FFF7FEFF 		bl	pow
 3933              	.LVL585:
 3934 14dc 0646     		mov	r6, r0
 3935 14de 0F46     		mov	r7, r1
 3936              	.LVL586:
2308:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aa.y) + (uint8_T)rtb_Fix1);
 3937              		.loc 1 2308 0
 3938 14e0 2046     		mov	r0, r4
 3939 14e2 2946     		mov	r1, r5
 3940 14e4 FFF7FEFF 		bl	__aeabi_d2uiz
 3941              	.LVL587:
 3942 14e8 029B     		ldr	r3, [sp, #8]
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 3943              		.loc 1 2312 0
 3944 14ea 5C4C     		ldr	r4, .L437+28
 3945              	.LVL588:
2308:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aa.y) + (uint8_T)rtb_Fix1);
 3946              		.loc 1 2308 0
 3947 14ec DD78     		ldrb	r5, [r3, #3]	@ zero_extendqisi2
 3948 14ee 3246     		mov	r2, r6
 3949 14f0 3B46     		mov	r3, r7
 3950 14f2 DDE90667 		ldrd	r6, [sp, #24]
 3951              	.LVL589:
 3952 14f6 0544     		add	r5, r5, r0
 3953 14f8 3946     		mov	r1, r7
 3954 14fa 3046     		mov	r0, r6
 3955 14fc FFF7FEFF 		bl	__aeabi_dmul
 3956              	.LVL590:
 3957 1500 FFF7FEFF 		bl	__aeabi_d2uiz
 3958              	.LVL591:
 3959 1504 0544     		add	r5, r5, r0
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 3960              		.loc 1 2312 0
 3961 1506 3046     		mov	r0, r6
2308:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aa.y) + (uint8_T)rtb_Fix1);
 3962              		.loc 1 2308 0
 3963 1508 554E     		ldr	r6, .L437+32
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 3964              		.loc 1 2312 0
 3965 150a DDE90823 		ldrd	r2, [sp, #32]
 3966 150e 3946     		mov	r1, r7
2308:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aa.y) + (uint8_T)rtb_Fix1);
 3967              		.loc 1 2308 0
 3968 1510 3570     		strb	r5, [r6]
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 3969              		.loc 1 2312 0
 3970 1512 FFF7FEFF 		bl	__aeabi_dcmpge
 3971              	.LVL592:
 3972 1516 4FF00103 		mov	r3, #1
 3973 151a 0028     		cmp	r0, #0
 3974 151c 00F07786 		beq	.L382
 3975              	.L151:
2322:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S126>/Switch' */
 3976              		.loc 1 2322 0
 3977 1520 504A     		ldr	r2, .L437+36
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 3978              		.loc 1 2312 0
 3979 1522 2370     		strb	r3, [r4]
2322:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S126>/Switch' */
 3980              		.loc 1 2322 0
 3981 1524 484B     		ldr	r3, .L437+8
 3982 1526 D2E90045 		ldrd	r4, [r2]
 3983 152a D3E90067 		ldrd	r6, [r3]
 3984 152e 2246     		mov	r2, r4
 3985 1530 2B46     		mov	r3, r5
 3986 1532 3046     		mov	r0, r6
 3987 1534 3946     		mov	r1, r7
 3988 1536 FFF7FEFF 		bl	__aeabi_dcmplt
 3989              	.LVL593:
 3990 153a 0028     		cmp	r0, #0
 3991 153c 00F05786 		beq	.L383
 3992              	.L152:
 3993              	.LVL594:
2335:HANcoder_E407_CAN_COMM_TEST.c **** 
 3994              		.loc 1 2335 0
 3995 1540 27F00049 		bic	r9, r7, #-2147483648
 3996              	.LVL595:
2338:HANcoder_E407_CAN_COMM_TEST.c **** 
 3997              		.loc 1 2338 0
 3998 1544 3046     		mov	r0, r6
 3999 1546 4946     		mov	r1, r9
 4000 1548 FFF7FEFF 		bl	floor
 4001              	.LVL596:
 4002 154c CDE90601 		strd	r0, [sp, #24]
 4003              	.LVL597:
2346:HANcoder_E407_CAN_COMM_TEST.c **** 
 4004              		.loc 1 2346 0
 4005 1550 DBF80410 		ldr	r1, [fp, #4]
 4006 1554 DBF80020 		ldr	r2, [fp]
 4007 1558 01F10043 		add	r3, r1, #-2147483648
 4008              	.LVL598:
2355:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4009              		.loc 1 2355 0
 4010 155c 0020     		movs	r0, #0
 4011 155e 4FF08041 		mov	r1, #1073741824
 4012 1562 FFF7FEFF 		bl	pow
 4013              	.LVL599:
2366:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4014              		.loc 1 2366 0
 4015 1566 DDE90423 		ldrd	r2, [sp, #16]
2355:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4016              		.loc 1 2355 0
 4017 156a 0446     		mov	r4, r0
 4018 156c 0D46     		mov	r5, r1
 4019              	.LVL600:
2366:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4020              		.loc 1 2366 0
 4021 156e 0020     		movs	r0, #0
 4022 1570 4FF08041 		mov	r1, #1073741824
 4023 1574 FFF7FEFF 		bl	pow
 4024              	.LVL601:
2372:HANcoder_E407_CAN_COMM_TEST.c **** 
 4025              		.loc 1 2372 0
 4026 1578 DDE90623 		ldrd	r2, [sp, #24]
2366:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4027              		.loc 1 2366 0
 4028 157c CDE90401 		strd	r0, [sp, #16]
 4029              	.LVL602:
2372:HANcoder_E407_CAN_COMM_TEST.c **** 
 4030              		.loc 1 2372 0
 4031 1580 3046     		mov	r0, r6
 4032              	.LVL603:
 4033 1582 4946     		mov	r1, r9
 4034 1584 FFF7FEFF 		bl	__aeabi_dsub
 4035              	.LVL604:
 4036 1588 2246     		mov	r2, r4
 4037 158a 2B46     		mov	r3, r5
 4038 158c FFF7FEFF 		bl	__aeabi_ddiv
 4039              	.LVL605:
2375:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4040              		.loc 1 2375 0
 4041 1590 0022     		movs	r2, #0
 4042 1592 0023     		movs	r3, #0
2372:HANcoder_E407_CAN_COMM_TEST.c **** 
 4043              		.loc 1 2372 0
 4044 1594 0446     		mov	r4, r0
 4045              	.LVL606:
 4046 1596 0D46     		mov	r5, r1
 4047              	.LVL607:
2375:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4048              		.loc 1 2375 0
 4049 1598 FFF7FEFF 		bl	__aeabi_dcmplt
 4050              	.LVL608:
 4051 159c 0028     		cmp	r0, #0
 4052 159e 41F08B80 		bne	.L384
2378:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4053              		.loc 1 2378 0
 4054 15a2 2046     		mov	r0, r4
 4055 15a4 2946     		mov	r1, r5
 4056 15a6 FFF7FEFF 		bl	floor
 4057              	.LVL609:
 4058 15aa 0446     		mov	r4, r0
 4059              	.LVL610:
 4060 15ac 0D46     		mov	r5, r1
 4061              	.LVL611:
 4062              	.L156:
 4063              	.LBB291:
 4064              	.LBB292:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4065              		.loc 1 299 0
 4066 15ae 3046     		mov	r0, r6
 4067 15b0 0023     		movs	r3, #0
 4068 15b2 3946     		mov	r1, r7
 4069 15b4 0022     		movs	r2, #0
 4070 15b6 FFF7FEFF 		bl	__aeabi_dcmplt
 4071              	.LVL612:
 4072 15ba 244E     		ldr	r6, .L437+12
 4073              	.LVL613:
 4074 15bc 4FF00103 		mov	r3, #1
 4075 15c0 0028     		cmp	r0, #0
 4076 15c2 00F01186 		beq	.L385
 4077              	.L157:
 4078 15c6 D901     		lsls	r1, r3, #7
 4079 15c8 B170     		strb	r1, [r6, #2]
 4080              	.LVL614:
 4081              	.LBE292:
 4082              	.LBE291:
2401:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4083              		.loc 1 2401 0
 4084 15ca DBE90023 		ldrd	r2, [fp]
 4085 15ce 0020     		movs	r0, #0
 4086 15d0 4FF08041 		mov	r1, #1073741824
 4087 15d4 FFF7FEFF 		bl	pow
 4088              	.LVL615:
 4089 15d8 0646     		mov	r6, r0
 4090 15da 0F46     		mov	r7, r1
 4091              	.LVL616:
2411:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_p1.y) + (uint8_T)rtb_Fix1);
 4092              		.loc 1 2411 0
 4093 15dc 2046     		mov	r0, r4
 4094 15de 2946     		mov	r1, r5
 4095 15e0 FFF7FEFF 		bl	__aeabi_d2uiz
 4096              	.LVL617:
 4097 15e4 029B     		ldr	r3, [sp, #8]
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 4098              		.loc 1 2415 0
 4099 15e6 204C     		ldr	r4, .L437+40
 4100              	.LVL618:
2411:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_p1.y) + (uint8_T)rtb_Fix1);
 4101              		.loc 1 2411 0
 4102 15e8 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 4103 15ea 3246     		mov	r2, r6
 4104 15ec 3B46     		mov	r3, r7
 4105 15ee DDE90667 		ldrd	r6, [sp, #24]
 4106              	.LVL619:
 4107 15f2 0544     		add	r5, r5, r0
 4108 15f4 3946     		mov	r1, r7
 4109 15f6 3046     		mov	r0, r6
 4110 15f8 FFF7FEFF 		bl	__aeabi_dmul
 4111              	.LVL620:
 4112 15fc FFF7FEFF 		bl	__aeabi_d2uiz
 4113              	.LVL621:
 4114 1600 0544     		add	r5, r5, r0
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 4115              		.loc 1 2415 0
 4116 1602 3046     		mov	r0, r6
2411:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_p1.y) + (uint8_T)rtb_Fix1);
 4117              		.loc 1 2411 0
 4118 1604 194E     		ldr	r6, .L437+44
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 4119              		.loc 1 2415 0
 4120 1606 DDE90423 		ldrd	r2, [sp, #16]
 4121 160a 3946     		mov	r1, r7
2411:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_p1.y) + (uint8_T)rtb_Fix1);
 4122              		.loc 1 2411 0
 4123 160c 3570     		strb	r5, [r6]
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 4124              		.loc 1 2415 0
 4125 160e FFF7FEFF 		bl	__aeabi_dcmpge
 4126              	.LVL622:
 4127 1612 4FF00103 		mov	r3, #1
 4128 1616 0028     		cmp	r0, #0
 4129 1618 00F0E385 		beq	.L386
 4130              	.L158:
2425:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S113>/Switch' */
 4131              		.loc 1 2425 0
 4132 161c 144A     		ldr	r2, .L437+48
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 4133              		.loc 1 2415 0
 4134 161e 2370     		strb	r3, [r4]
2425:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S113>/Switch' */
 4135              		.loc 1 2425 0
 4136 1620 144B     		ldr	r3, .L437+52
 4137 1622 D2E90045 		ldrd	r4, [r2]
 4138 1626 D3E90067 		ldrd	r6, [r3]
 4139 162a 2246     		mov	r2, r4
 4140 162c 3046     		mov	r0, r6
 4141 162e 3946     		mov	r1, r7
 4142 1630 2B46     		mov	r3, r5
 4143 1632 FFF7FEFF 		bl	__aeabi_dcmplt
 4144              	.LVL623:
 4145 1636 0028     		cmp	r0, #0
 4146 1638 00F0C385 		beq	.L387
 4147 163c 1CE0     		b	.L438
 4148              	.L439:
 4149 163e 00BF     		.align	2
 4150              	.L437:
 4151 1640 00000000 		.word	Tx_coded8_CAN1
 4152 1644 00000000 		.word	.LANCHOR13
 4153 1648 00000000 		.word	.LANCHOR6
 4154 164c 00000000 		.word	rtB
 4155 1650 00000000 		.word	OF3_CAN1
 4156 1654 00000000 		.word	Tx_coded3_CAN1
 4157 1658 00000000 		.word	.LANCHOR14
 4158 165c 00000000 		.word	OF2_CAN1
 4159 1660 00000000 		.word	Tx_coded2_CAN1
 4160 1664 00000000 		.word	.LANCHOR15
 4161 1668 00000000 		.word	OF1_CAN1
 4162 166c 00000000 		.word	Tx_coded1_CAN1
 4163 1670 00000000 		.word	.LANCHOR17
 4164 1674 00000000 		.word	.LANCHOR16
 4165              	.L438:
 4166              	.L159:
 4167              	.LVL624:
2438:HANcoder_E407_CAN_COMM_TEST.c **** 
 4168              		.loc 1 2438 0
 4169 1678 27F00049 		bic	r9, r7, #-2147483648
 4170              	.LVL625:
2457:HANcoder_E407_CAN_COMM_TEST.c **** 
 4171              		.loc 1 2457 0
 4172 167c DFF830B3 		ldr	fp, .L440+48
2441:HANcoder_E407_CAN_COMM_TEST.c **** 
 4173              		.loc 1 2441 0
 4174 1680 3046     		mov	r0, r6
 4175 1682 4946     		mov	r1, r9
 4176 1684 FFF7FEFF 		bl	floor
 4177              	.LVL626:
2457:HANcoder_E407_CAN_COMM_TEST.c **** 
 4178              		.loc 1 2457 0
 4179 1688 DBE90045 		ldrd	r4, [fp]
2441:HANcoder_E407_CAN_COMM_TEST.c **** 
 4180              		.loc 1 2441 0
 4181 168c CDE90601 		strd	r0, [sp, #24]
 4182              	.LVL627:
2457:HANcoder_E407_CAN_COMM_TEST.c **** 
 4183              		.loc 1 2457 0
 4184 1690 2246     		mov	r2, r4
 4185 1692 2B46     		mov	r3, r5
 4186 1694 0020     		movs	r0, #0
 4187 1696 BA49     		ldr	r1, .L440
 4188 1698 FFF7FEFF 		bl	__aeabi_dsub
 4189              	.LVL628:
2462:HANcoder_E407_CAN_COMM_TEST.c **** 
 4190              		.loc 1 2462 0
 4191 169c 2246     		mov	r2, r4
2457:HANcoder_E407_CAN_COMM_TEST.c **** 
 4192              		.loc 1 2457 0
 4193 169e CDE90401 		strd	r0, [sp, #16]
 4194              	.LVL629:
2462:HANcoder_E407_CAN_COMM_TEST.c **** 
 4195              		.loc 1 2462 0
 4196 16a2 05F10043 		add	r3, r5, #-2147483648
 4197              	.LVL630:
2471:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4198              		.loc 1 2471 0
 4199 16a6 0020     		movs	r0, #0
 4200 16a8 4FF08041 		mov	r1, #1073741824
 4201 16ac FFF7FEFF 		bl	pow
 4202              	.LVL631:
2483:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4203              		.loc 1 2483 0
 4204 16b0 DDE90423 		ldrd	r2, [sp, #16]
2471:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4205              		.loc 1 2471 0
 4206 16b4 0446     		mov	r4, r0
 4207 16b6 0D46     		mov	r5, r1
 4208              	.LVL632:
2483:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4209              		.loc 1 2483 0
 4210 16b8 0020     		movs	r0, #0
 4211 16ba 4FF08041 		mov	r1, #1073741824
 4212 16be FFF7FEFF 		bl	pow
 4213              	.LVL633:
2489:HANcoder_E407_CAN_COMM_TEST.c **** 
 4214              		.loc 1 2489 0
 4215 16c2 DDE90623 		ldrd	r2, [sp, #24]
2483:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4216              		.loc 1 2483 0
 4217 16c6 CDE90801 		strd	r0, [sp, #32]
 4218              	.LVL634:
2489:HANcoder_E407_CAN_COMM_TEST.c **** 
 4219              		.loc 1 2489 0
 4220 16ca 3046     		mov	r0, r6
 4221              	.LVL635:
 4222 16cc 4946     		mov	r1, r9
 4223 16ce FFF7FEFF 		bl	__aeabi_dsub
 4224              	.LVL636:
 4225 16d2 2246     		mov	r2, r4
 4226 16d4 2B46     		mov	r3, r5
 4227 16d6 FFF7FEFF 		bl	__aeabi_ddiv
 4228              	.LVL637:
2492:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4229              		.loc 1 2492 0
 4230 16da 0022     		movs	r2, #0
 4231 16dc 0023     		movs	r3, #0
2489:HANcoder_E407_CAN_COMM_TEST.c **** 
 4232              		.loc 1 2489 0
 4233 16de 0446     		mov	r4, r0
 4234              	.LVL638:
 4235 16e0 0D46     		mov	r5, r1
 4236              	.LVL639:
2492:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4237              		.loc 1 2492 0
 4238 16e2 FFF7FEFF 		bl	__aeabi_dcmplt
 4239              	.LVL640:
 4240 16e6 0028     		cmp	r0, #0
 4241 16e8 40F0DE87 		bne	.L388
2495:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4242              		.loc 1 2495 0
 4243 16ec 2046     		mov	r0, r4
 4244 16ee 2946     		mov	r1, r5
 4245 16f0 FFF7FEFF 		bl	floor
 4246              	.LVL641:
 4247 16f4 0446     		mov	r4, r0
 4248              	.LVL642:
 4249 16f6 0D46     		mov	r5, r1
 4250              	.LVL643:
 4251              	.L163:
 4252              	.LBB294:
 4253              	.LBB295:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4254              		.loc 1 299 0
 4255 16f8 3046     		mov	r0, r6
 4256 16fa 0023     		movs	r3, #0
 4257 16fc 3946     		mov	r1, r7
 4258 16fe 0022     		movs	r2, #0
 4259 1700 FFF7FEFF 		bl	__aeabi_dcmplt
 4260              	.LVL644:
 4261 1704 9F4E     		ldr	r6, .L440+4
 4262              	.LVL645:
 4263 1706 4FF00103 		mov	r3, #1
 4264 170a 0028     		cmp	r0, #0
 4265 170c 00F05685 		beq	.L389
 4266              	.L164:
 4267 1710 D901     		lsls	r1, r3, #7
 4268 1712 F173     		strb	r1, [r6, #15]
 4269              	.LVL646:
 4270              	.LBE295:
 4271              	.LBE294:
2518:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4272              		.loc 1 2518 0
 4273 1714 DBE90023 		ldrd	r2, [fp]
 4274 1718 0020     		movs	r0, #0
 4275 171a 4FF08041 		mov	r1, #1073741824
 4276 171e FFF7FEFF 		bl	pow
 4277              	.LVL647:
 4278 1722 0646     		mov	r6, r0
 4279 1724 0F46     		mov	r7, r1
 4280              	.LVL648:
2528:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_kb.y) + (uint8_T)rtb_Fix1);
 4281              		.loc 1 2528 0
 4282 1726 2046     		mov	r0, r4
 4283 1728 2946     		mov	r1, r5
 4284 172a FFF7FEFF 		bl	__aeabi_d2uiz
 4285              	.LVL649:
 4286 172e 029B     		ldr	r3, [sp, #8]
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 4287              		.loc 1 2532 0
 4288 1730 954C     		ldr	r4, .L440+8
 4289              	.LVL650:
2528:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_kb.y) + (uint8_T)rtb_Fix1);
 4290              		.loc 1 2528 0
 4291 1732 DD7B     		ldrb	r5, [r3, #15]	@ zero_extendqisi2
 4292 1734 3246     		mov	r2, r6
 4293 1736 3B46     		mov	r3, r7
 4294 1738 DDE90667 		ldrd	r6, [sp, #24]
 4295              	.LVL651:
 4296 173c 0544     		add	r5, r5, r0
 4297 173e 3946     		mov	r1, r7
 4298 1740 3046     		mov	r0, r6
 4299 1742 FFF7FEFF 		bl	__aeabi_dmul
 4300              	.LVL652:
 4301 1746 FFF7FEFF 		bl	__aeabi_d2uiz
 4302              	.LVL653:
 4303 174a 0544     		add	r5, r5, r0
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 4304              		.loc 1 2532 0
 4305 174c 3046     		mov	r0, r6
2528:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_kb.y) + (uint8_T)rtb_Fix1);
 4306              		.loc 1 2528 0
 4307 174e 8F4E     		ldr	r6, .L440+12
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 4308              		.loc 1 2532 0
 4309 1750 DDE90823 		ldrd	r2, [sp, #32]
 4310 1754 3946     		mov	r1, r7
2528:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_kb.y) + (uint8_T)rtb_Fix1);
 4311              		.loc 1 2528 0
 4312 1756 3570     		strb	r5, [r6]
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 4313              		.loc 1 2532 0
 4314 1758 FFF7FEFF 		bl	__aeabi_dcmpge
 4315              	.LVL654:
 4316 175c 4FF00103 		mov	r3, #1
 4317 1760 0028     		cmp	r0, #0
 4318 1762 00F02885 		beq	.L390
 4319              	.L165:
2542:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S114>/Switch' */
 4320              		.loc 1 2542 0
 4321 1766 8A4A     		ldr	r2, .L440+16
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 4322              		.loc 1 2532 0
 4323 1768 2370     		strb	r3, [r4]
2542:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S114>/Switch' */
 4324              		.loc 1 2542 0
 4325 176a 8A4B     		ldr	r3, .L440+20
 4326 176c D2E90045 		ldrd	r4, [r2]
 4327 1770 D3E90067 		ldrd	r6, [r3]
 4328 1774 2246     		mov	r2, r4
 4329 1776 2B46     		mov	r3, r5
 4330 1778 3046     		mov	r0, r6
 4331 177a 3946     		mov	r1, r7
 4332 177c FFF7FEFF 		bl	__aeabi_dcmplt
 4333              	.LVL655:
 4334 1780 0028     		cmp	r0, #0
 4335 1782 00F00885 		beq	.L391
 4336              	.L166:
 4337              	.LVL656:
2555:HANcoder_E407_CAN_COMM_TEST.c **** 
 4338              		.loc 1 2555 0
 4339 1786 27F00049 		bic	r9, r7, #-2147483648
 4340              	.LVL657:
2558:HANcoder_E407_CAN_COMM_TEST.c **** 
 4341              		.loc 1 2558 0
 4342 178a 3046     		mov	r0, r6
 4343 178c 4946     		mov	r1, r9
 4344 178e FFF7FEFF 		bl	floor
 4345              	.LVL658:
 4346 1792 CDE90601 		strd	r0, [sp, #24]
 4347              	.LVL659:
2566:HANcoder_E407_CAN_COMM_TEST.c **** 
 4348              		.loc 1 2566 0
 4349 1796 DBF80410 		ldr	r1, [fp, #4]
 4350 179a DBF80020 		ldr	r2, [fp]
 4351 179e 01F10043 		add	r3, r1, #-2147483648
 4352              	.LVL660:
2575:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4353              		.loc 1 2575 0
 4354 17a2 0020     		movs	r0, #0
 4355 17a4 4FF08041 		mov	r1, #1073741824
 4356 17a8 FFF7FEFF 		bl	pow
 4357              	.LVL661:
2586:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4358              		.loc 1 2586 0
 4359 17ac DDE90423 		ldrd	r2, [sp, #16]
2575:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4360              		.loc 1 2575 0
 4361 17b0 0446     		mov	r4, r0
 4362 17b2 0D46     		mov	r5, r1
 4363              	.LVL662:
2586:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4364              		.loc 1 2586 0
 4365 17b4 0020     		movs	r0, #0
 4366 17b6 4FF08041 		mov	r1, #1073741824
 4367 17ba FFF7FEFF 		bl	pow
 4368              	.LVL663:
2592:HANcoder_E407_CAN_COMM_TEST.c **** 
 4369              		.loc 1 2592 0
 4370 17be DDE90623 		ldrd	r2, [sp, #24]
2586:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4371              		.loc 1 2586 0
 4372 17c2 CDE90801 		strd	r0, [sp, #32]
 4373              	.LVL664:
2592:HANcoder_E407_CAN_COMM_TEST.c **** 
 4374              		.loc 1 2592 0
 4375 17c6 3046     		mov	r0, r6
 4376              	.LVL665:
 4377 17c8 4946     		mov	r1, r9
 4378 17ca FFF7FEFF 		bl	__aeabi_dsub
 4379              	.LVL666:
 4380 17ce 2246     		mov	r2, r4
 4381 17d0 2B46     		mov	r3, r5
 4382 17d2 FFF7FEFF 		bl	__aeabi_ddiv
 4383              	.LVL667:
2595:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4384              		.loc 1 2595 0
 4385 17d6 0022     		movs	r2, #0
 4386 17d8 0023     		movs	r3, #0
2592:HANcoder_E407_CAN_COMM_TEST.c **** 
 4387              		.loc 1 2592 0
 4388 17da 0446     		mov	r4, r0
 4389              	.LVL668:
 4390 17dc 0D46     		mov	r5, r1
 4391              	.LVL669:
2595:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4392              		.loc 1 2595 0
 4393 17de FFF7FEFF 		bl	__aeabi_dcmplt
 4394              	.LVL670:
 4395 17e2 0028     		cmp	r0, #0
 4396 17e4 40F05887 		bne	.L392
2598:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4397              		.loc 1 2598 0
 4398 17e8 2046     		mov	r0, r4
 4399 17ea 2946     		mov	r1, r5
 4400 17ec FFF7FEFF 		bl	floor
 4401              	.LVL671:
 4402 17f0 0446     		mov	r4, r0
 4403              	.LVL672:
 4404 17f2 0D46     		mov	r5, r1
 4405              	.LVL673:
 4406              	.L170:
 4407              	.LBB297:
 4408              	.LBB298:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4409              		.loc 1 299 0
 4410 17f4 3046     		mov	r0, r6
 4411 17f6 0023     		movs	r3, #0
 4412 17f8 3946     		mov	r1, r7
 4413 17fa 0022     		movs	r2, #0
 4414 17fc FFF7FEFF 		bl	__aeabi_dcmplt
 4415              	.LVL674:
 4416 1800 604E     		ldr	r6, .L440+4
 4417              	.LVL675:
 4418 1802 4FF00103 		mov	r3, #1
 4419 1806 0028     		cmp	r0, #0
 4420 1808 00F0C284 		beq	.L393
 4421              	.L171:
 4422 180c D901     		lsls	r1, r3, #7
 4423 180e B173     		strb	r1, [r6, #14]
 4424              	.LVL676:
 4425              	.LBE298:
 4426              	.LBE297:
2621:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4427              		.loc 1 2621 0
 4428 1810 DBE90023 		ldrd	r2, [fp]
 4429 1814 0020     		movs	r0, #0
 4430 1816 4FF08041 		mov	r1, #1073741824
 4431 181a FFF7FEFF 		bl	pow
 4432              	.LVL677:
 4433 181e 0646     		mov	r6, r0
 4434 1820 0F46     		mov	r7, r1
 4435              	.LVL678:
2631:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_dt.y) + (uint8_T)rtb_Fix1);
 4436              		.loc 1 2631 0
 4437 1822 2046     		mov	r0, r4
 4438 1824 2946     		mov	r1, r5
 4439 1826 FFF7FEFF 		bl	__aeabi_d2uiz
 4440              	.LVL679:
 4441 182a 029B     		ldr	r3, [sp, #8]
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 4442              		.loc 1 2635 0
 4443 182c 5A4C     		ldr	r4, .L440+24
 4444              	.LVL680:
2631:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_dt.y) + (uint8_T)rtb_Fix1);
 4445              		.loc 1 2631 0
 4446 182e 9D7B     		ldrb	r5, [r3, #14]	@ zero_extendqisi2
 4447 1830 3246     		mov	r2, r6
 4448 1832 3B46     		mov	r3, r7
 4449 1834 DDE90667 		ldrd	r6, [sp, #24]
 4450              	.LVL681:
 4451 1838 0544     		add	r5, r5, r0
 4452 183a 3946     		mov	r1, r7
 4453 183c 3046     		mov	r0, r6
 4454 183e FFF7FEFF 		bl	__aeabi_dmul
 4455              	.LVL682:
 4456 1842 FFF7FEFF 		bl	__aeabi_d2uiz
 4457              	.LVL683:
 4458 1846 0544     		add	r5, r5, r0
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 4459              		.loc 1 2635 0
 4460 1848 3046     		mov	r0, r6
2631:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_dt.y) + (uint8_T)rtb_Fix1);
 4461              		.loc 1 2631 0
 4462 184a 544E     		ldr	r6, .L440+28
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 4463              		.loc 1 2635 0
 4464 184c DDE90823 		ldrd	r2, [sp, #32]
 4465 1850 3946     		mov	r1, r7
2631:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_dt.y) + (uint8_T)rtb_Fix1);
 4466              		.loc 1 2631 0
 4467 1852 3570     		strb	r5, [r6]
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 4468              		.loc 1 2635 0
 4469 1854 FFF7FEFF 		bl	__aeabi_dcmpge
 4470              	.LVL684:
 4471 1858 4FF00103 		mov	r3, #1
 4472 185c 0028     		cmp	r0, #0
 4473 185e 00F09484 		beq	.L394
 4474              	.L172:
2645:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S115>/Switch' */
 4475              		.loc 1 2645 0
 4476 1862 4F4A     		ldr	r2, .L440+32
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 4477              		.loc 1 2635 0
 4478 1864 2370     		strb	r3, [r4]
2645:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S115>/Switch' */
 4479              		.loc 1 2645 0
 4480 1866 4B4B     		ldr	r3, .L440+20
 4481 1868 D2E90045 		ldrd	r4, [r2]
 4482 186c D3E90067 		ldrd	r6, [r3]
 4483 1870 2246     		mov	r2, r4
 4484 1872 2B46     		mov	r3, r5
 4485 1874 3046     		mov	r0, r6
 4486 1876 3946     		mov	r1, r7
 4487 1878 FFF7FEFF 		bl	__aeabi_dcmplt
 4488              	.LVL685:
 4489 187c 0028     		cmp	r0, #0
 4490 187e 00F07484 		beq	.L395
 4491              	.L173:
 4492              	.LVL686:
2658:HANcoder_E407_CAN_COMM_TEST.c **** 
 4493              		.loc 1 2658 0
 4494 1882 27F00049 		bic	r9, r7, #-2147483648
 4495              	.LVL687:
2661:HANcoder_E407_CAN_COMM_TEST.c **** 
 4496              		.loc 1 2661 0
 4497 1886 3046     		mov	r0, r6
 4498 1888 4946     		mov	r1, r9
 4499 188a FFF7FEFF 		bl	floor
 4500              	.LVL688:
 4501 188e CDE90601 		strd	r0, [sp, #24]
 4502              	.LVL689:
2669:HANcoder_E407_CAN_COMM_TEST.c **** 
 4503              		.loc 1 2669 0
 4504 1892 DBF80410 		ldr	r1, [fp, #4]
 4505 1896 DBF80020 		ldr	r2, [fp]
 4506 189a 01F10043 		add	r3, r1, #-2147483648
 4507              	.LVL690:
2678:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4508              		.loc 1 2678 0
 4509 189e 0020     		movs	r0, #0
 4510 18a0 4FF08041 		mov	r1, #1073741824
 4511 18a4 FFF7FEFF 		bl	pow
 4512              	.LVL691:
2689:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4513              		.loc 1 2689 0
 4514 18a8 DDE90423 		ldrd	r2, [sp, #16]
2678:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4515              		.loc 1 2678 0
 4516 18ac 0446     		mov	r4, r0
 4517 18ae 0D46     		mov	r5, r1
 4518              	.LVL692:
2689:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4519              		.loc 1 2689 0
 4520 18b0 0020     		movs	r0, #0
 4521 18b2 4FF08041 		mov	r1, #1073741824
 4522 18b6 FFF7FEFF 		bl	pow
 4523              	.LVL693:
2695:HANcoder_E407_CAN_COMM_TEST.c **** 
 4524              		.loc 1 2695 0
 4525 18ba DDE90623 		ldrd	r2, [sp, #24]
2689:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4526              		.loc 1 2689 0
 4527 18be CDE90801 		strd	r0, [sp, #32]
 4528              	.LVL694:
2695:HANcoder_E407_CAN_COMM_TEST.c **** 
 4529              		.loc 1 2695 0
 4530 18c2 3046     		mov	r0, r6
 4531              	.LVL695:
 4532 18c4 4946     		mov	r1, r9
 4533 18c6 FFF7FEFF 		bl	__aeabi_dsub
 4534              	.LVL696:
 4535 18ca 2246     		mov	r2, r4
 4536 18cc 2B46     		mov	r3, r5
 4537 18ce FFF7FEFF 		bl	__aeabi_ddiv
 4538              	.LVL697:
2698:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4539              		.loc 1 2698 0
 4540 18d2 0022     		movs	r2, #0
 4541 18d4 0023     		movs	r3, #0
2695:HANcoder_E407_CAN_COMM_TEST.c **** 
 4542              		.loc 1 2695 0
 4543 18d6 0446     		mov	r4, r0
 4544              	.LVL698:
 4545 18d8 0D46     		mov	r5, r1
 4546              	.LVL699:
2698:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4547              		.loc 1 2698 0
 4548 18da FFF7FEFF 		bl	__aeabi_dcmplt
 4549              	.LVL700:
 4550 18de 0028     		cmp	r0, #0
 4551 18e0 40F0D286 		bne	.L396
2701:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4552              		.loc 1 2701 0
 4553 18e4 2046     		mov	r0, r4
 4554 18e6 2946     		mov	r1, r5
 4555 18e8 FFF7FEFF 		bl	floor
 4556              	.LVL701:
 4557 18ec 0446     		mov	r4, r0
 4558              	.LVL702:
 4559 18ee 0D46     		mov	r5, r1
 4560              	.LVL703:
 4561              	.L177:
 4562              	.LBB300:
 4563              	.LBB301:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4564              		.loc 1 299 0
 4565 18f0 3046     		mov	r0, r6
 4566 18f2 0023     		movs	r3, #0
 4567 18f4 3946     		mov	r1, r7
 4568 18f6 0022     		movs	r2, #0
 4569 18f8 FFF7FEFF 		bl	__aeabi_dcmplt
 4570              	.LVL704:
 4571 18fc 214E     		ldr	r6, .L440+4
 4572              	.LVL705:
 4573 18fe 4FF00103 		mov	r3, #1
 4574 1902 0028     		cmp	r0, #0
 4575 1904 00F02E84 		beq	.L397
 4576              	.L178:
 4577 1908 D901     		lsls	r1, r3, #7
 4578 190a 7173     		strb	r1, [r6, #13]
 4579              	.LVL706:
 4580              	.LBE301:
 4581              	.LBE300:
2724:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4582              		.loc 1 2724 0
 4583 190c DBE90023 		ldrd	r2, [fp]
 4584 1910 0020     		movs	r0, #0
 4585 1912 4FF08041 		mov	r1, #1073741824
 4586 1916 FFF7FEFF 		bl	pow
 4587              	.LVL707:
 4588 191a 0646     		mov	r6, r0
 4589 191c 0F46     		mov	r7, r1
 4590              	.LVL708:
2734:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ks.y) + (uint8_T)rtb_Fix1);
 4591              		.loc 1 2734 0
 4592 191e 2046     		mov	r0, r4
 4593 1920 2946     		mov	r1, r5
 4594 1922 FFF7FEFF 		bl	__aeabi_d2uiz
 4595              	.LVL709:
 4596 1926 029B     		ldr	r3, [sp, #8]
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 4597              		.loc 1 2738 0
 4598 1928 1E4C     		ldr	r4, .L440+36
 4599              	.LVL710:
2734:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ks.y) + (uint8_T)rtb_Fix1);
 4600              		.loc 1 2734 0
 4601 192a 5D7B     		ldrb	r5, [r3, #13]	@ zero_extendqisi2
 4602 192c 3246     		mov	r2, r6
 4603 192e 3B46     		mov	r3, r7
 4604 1930 DDE90667 		ldrd	r6, [sp, #24]
 4605              	.LVL711:
 4606 1934 0544     		add	r5, r5, r0
 4607 1936 3946     		mov	r1, r7
 4608 1938 3046     		mov	r0, r6
 4609 193a FFF7FEFF 		bl	__aeabi_dmul
 4610              	.LVL712:
 4611 193e FFF7FEFF 		bl	__aeabi_d2uiz
 4612              	.LVL713:
 4613 1942 0544     		add	r5, r5, r0
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 4614              		.loc 1 2738 0
 4615 1944 3046     		mov	r0, r6
2734:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ks.y) + (uint8_T)rtb_Fix1);
 4616              		.loc 1 2734 0
 4617 1946 184E     		ldr	r6, .L440+40
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 4618              		.loc 1 2738 0
 4619 1948 DDE90823 		ldrd	r2, [sp, #32]
 4620 194c 3946     		mov	r1, r7
2734:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ks.y) + (uint8_T)rtb_Fix1);
 4621              		.loc 1 2734 0
 4622 194e 3570     		strb	r5, [r6]
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 4623              		.loc 1 2738 0
 4624 1950 FFF7FEFF 		bl	__aeabi_dcmpge
 4625              	.LVL714:
 4626 1954 4FF00103 		mov	r3, #1
 4627 1958 0028     		cmp	r0, #0
 4628 195a 00F00084 		beq	.L398
 4629              	.L179:
2748:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S116>/Switch' */
 4630              		.loc 1 2748 0
 4631 195e 134A     		ldr	r2, .L440+44
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 4632              		.loc 1 2738 0
 4633 1960 2370     		strb	r3, [r4]
2748:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S116>/Switch' */
 4634              		.loc 1 2748 0
 4635 1962 0C4B     		ldr	r3, .L440+20
 4636 1964 D2E90045 		ldrd	r4, [r2]
 4637 1968 D3E90067 		ldrd	r6, [r3]
 4638 196c 2246     		mov	r2, r4
 4639 196e 2B46     		mov	r3, r5
 4640 1970 3046     		mov	r0, r6
 4641 1972 3946     		mov	r1, r7
 4642 1974 FFF7FEFF 		bl	__aeabi_dcmplt
 4643              	.LVL715:
 4644 1978 0028     		cmp	r0, #0
 4645 197a 00F0E183 		beq	.L399
 4646 197e 19E0     		b	.L441
 4647              	.L442:
 4648              		.align	2
 4649              	.L440:
 4650 1980 00001C40 		.word	1075576832
 4651 1984 00000000 		.word	rtB
 4652 1988 00000000 		.word	OF2_CAN2
 4653 198c 00000000 		.word	Tx_coded2_CAN2
 4654 1990 00000000 		.word	.LANCHOR19
 4655 1994 00000000 		.word	.LANCHOR16
 4656 1998 00000000 		.word	OF3_CAN2
 4657 199c 00000000 		.word	Tx_coded3_CAN2
 4658 19a0 00000000 		.word	.LANCHOR20
 4659 19a4 00000000 		.word	OF4_CAN2
 4660 19a8 00000000 		.word	Tx_coded4_CAN2
 4661 19ac 00000000 		.word	.LANCHOR21
 4662 19b0 00000000 		.word	.LANCHOR3
 4663              	.L441:
 4664              	.L180:
 4665              	.LVL716:
2761:HANcoder_E407_CAN_COMM_TEST.c **** 
 4666              		.loc 1 2761 0
 4667 19b4 27F00049 		bic	r9, r7, #-2147483648
 4668              	.LVL717:
2764:HANcoder_E407_CAN_COMM_TEST.c **** 
 4669              		.loc 1 2764 0
 4670 19b8 3046     		mov	r0, r6
 4671 19ba 4946     		mov	r1, r9
 4672 19bc FFF7FEFF 		bl	floor
 4673              	.LVL718:
 4674 19c0 CDE90601 		strd	r0, [sp, #24]
 4675              	.LVL719:
2772:HANcoder_E407_CAN_COMM_TEST.c **** 
 4676              		.loc 1 2772 0
 4677 19c4 DBF80410 		ldr	r1, [fp, #4]
 4678 19c8 DBF80020 		ldr	r2, [fp]
 4679 19cc 01F10043 		add	r3, r1, #-2147483648
 4680              	.LVL720:
2781:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4681              		.loc 1 2781 0
 4682 19d0 0020     		movs	r0, #0
 4683 19d2 4FF08041 		mov	r1, #1073741824
 4684 19d6 FFF7FEFF 		bl	pow
 4685              	.LVL721:
2792:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4686              		.loc 1 2792 0
 4687 19da DDE90423 		ldrd	r2, [sp, #16]
2781:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4688              		.loc 1 2781 0
 4689 19de 0446     		mov	r4, r0
 4690 19e0 0D46     		mov	r5, r1
 4691              	.LVL722:
2792:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4692              		.loc 1 2792 0
 4693 19e2 0020     		movs	r0, #0
 4694 19e4 4FF08041 		mov	r1, #1073741824
 4695 19e8 FFF7FEFF 		bl	pow
 4696              	.LVL723:
2798:HANcoder_E407_CAN_COMM_TEST.c **** 
 4697              		.loc 1 2798 0
 4698 19ec DDE90623 		ldrd	r2, [sp, #24]
2792:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4699              		.loc 1 2792 0
 4700 19f0 CDE90801 		strd	r0, [sp, #32]
 4701              	.LVL724:
2798:HANcoder_E407_CAN_COMM_TEST.c **** 
 4702              		.loc 1 2798 0
 4703 19f4 3046     		mov	r0, r6
 4704              	.LVL725:
 4705 19f6 4946     		mov	r1, r9
 4706 19f8 FFF7FEFF 		bl	__aeabi_dsub
 4707              	.LVL726:
 4708 19fc 2246     		mov	r2, r4
 4709 19fe 2B46     		mov	r3, r5
 4710 1a00 FFF7FEFF 		bl	__aeabi_ddiv
 4711              	.LVL727:
2801:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4712              		.loc 1 2801 0
 4713 1a04 0022     		movs	r2, #0
 4714 1a06 0023     		movs	r3, #0
2798:HANcoder_E407_CAN_COMM_TEST.c **** 
 4715              		.loc 1 2798 0
 4716 1a08 0446     		mov	r4, r0
 4717              	.LVL728:
 4718 1a0a 0D46     		mov	r5, r1
 4719              	.LVL729:
2801:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4720              		.loc 1 2801 0
 4721 1a0c FFF7FEFF 		bl	__aeabi_dcmplt
 4722              	.LVL730:
 4723 1a10 0028     		cmp	r0, #0
 4724 1a12 40F03186 		bne	.L400
2804:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4725              		.loc 1 2804 0
 4726 1a16 2046     		mov	r0, r4
 4727 1a18 2946     		mov	r1, r5
 4728 1a1a FFF7FEFF 		bl	floor
 4729              	.LVL731:
 4730 1a1e 0446     		mov	r4, r0
 4731              	.LVL732:
 4732 1a20 0D46     		mov	r5, r1
 4733              	.LVL733:
 4734              	.L184:
 4735              	.LBB303:
 4736              	.LBB304:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4737              		.loc 1 299 0
 4738 1a22 3046     		mov	r0, r6
 4739 1a24 0023     		movs	r3, #0
 4740 1a26 3946     		mov	r1, r7
 4741 1a28 0022     		movs	r2, #0
 4742 1a2a FFF7FEFF 		bl	__aeabi_dcmplt
 4743              	.LVL734:
 4744 1a2e CD4E     		ldr	r6, .L443
 4745              	.LVL735:
 4746 1a30 4FF00103 		mov	r3, #1
 4747 1a34 0028     		cmp	r0, #0
 4748 1a36 00F08183 		beq	.L401
 4749              	.L185:
 4750 1a3a D901     		lsls	r1, r3, #7
 4751 1a3c 3173     		strb	r1, [r6, #12]
 4752              	.LVL736:
 4753              	.LBE304:
 4754              	.LBE303:
2827:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4755              		.loc 1 2827 0
 4756 1a3e DBE90023 		ldrd	r2, [fp]
 4757 1a42 0020     		movs	r0, #0
 4758 1a44 4FF08041 		mov	r1, #1073741824
 4759 1a48 FFF7FEFF 		bl	pow
 4760              	.LVL737:
 4761 1a4c 0646     		mov	r6, r0
 4762 1a4e 0F46     		mov	r7, r1
 4763              	.LVL738:
2837:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ai.y) + (uint8_T)rtb_Fix1);
 4764              		.loc 1 2837 0
 4765 1a50 2046     		mov	r0, r4
 4766 1a52 2946     		mov	r1, r5
 4767 1a54 FFF7FEFF 		bl	__aeabi_d2uiz
 4768              	.LVL739:
 4769 1a58 029B     		ldr	r3, [sp, #8]
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 4770              		.loc 1 2841 0
 4771 1a5a C34C     		ldr	r4, .L443+4
 4772              	.LVL740:
2837:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ai.y) + (uint8_T)rtb_Fix1);
 4773              		.loc 1 2837 0
 4774 1a5c 1D7B     		ldrb	r5, [r3, #12]	@ zero_extendqisi2
 4775 1a5e 3246     		mov	r2, r6
 4776 1a60 3B46     		mov	r3, r7
 4777 1a62 DDE90667 		ldrd	r6, [sp, #24]
 4778              	.LVL741:
 4779 1a66 0544     		add	r5, r5, r0
 4780 1a68 3946     		mov	r1, r7
 4781 1a6a 3046     		mov	r0, r6
 4782 1a6c FFF7FEFF 		bl	__aeabi_dmul
 4783              	.LVL742:
 4784 1a70 FFF7FEFF 		bl	__aeabi_d2uiz
 4785              	.LVL743:
 4786 1a74 0544     		add	r5, r5, r0
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 4787              		.loc 1 2841 0
 4788 1a76 3046     		mov	r0, r6
2837:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ai.y) + (uint8_T)rtb_Fix1);
 4789              		.loc 1 2837 0
 4790 1a78 BC4E     		ldr	r6, .L443+8
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 4791              		.loc 1 2841 0
 4792 1a7a DDE90823 		ldrd	r2, [sp, #32]
 4793 1a7e 3946     		mov	r1, r7
2837:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_ai.y) + (uint8_T)rtb_Fix1);
 4794              		.loc 1 2837 0
 4795 1a80 3570     		strb	r5, [r6]
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 4796              		.loc 1 2841 0
 4797 1a82 FFF7FEFF 		bl	__aeabi_dcmpge
 4798              	.LVL744:
 4799 1a86 4FF00103 		mov	r3, #1
 4800 1a8a 0028     		cmp	r0, #0
 4801 1a8c 00F05483 		beq	.L402
 4802              	.L186:
2851:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S117>/Switch' */
 4803              		.loc 1 2851 0
 4804 1a90 B74A     		ldr	r2, .L443+12
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 4805              		.loc 1 2841 0
 4806 1a92 2370     		strb	r3, [r4]
2851:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S117>/Switch' */
 4807              		.loc 1 2851 0
 4808 1a94 B74B     		ldr	r3, .L443+16
 4809 1a96 D2E90045 		ldrd	r4, [r2]
 4810 1a9a D3E90067 		ldrd	r6, [r3]
 4811 1a9e 2246     		mov	r2, r4
 4812 1aa0 2B46     		mov	r3, r5
 4813 1aa2 3046     		mov	r0, r6
 4814 1aa4 3946     		mov	r1, r7
 4815 1aa6 FFF7FEFF 		bl	__aeabi_dcmplt
 4816              	.LVL745:
 4817 1aaa 0028     		cmp	r0, #0
 4818 1aac 00F03583 		beq	.L403
 4819              	.L187:
 4820              	.LVL746:
2864:HANcoder_E407_CAN_COMM_TEST.c **** 
 4821              		.loc 1 2864 0
 4822 1ab0 27F00049 		bic	r9, r7, #-2147483648
 4823              	.LVL747:
2867:HANcoder_E407_CAN_COMM_TEST.c **** 
 4824              		.loc 1 2867 0
 4825 1ab4 3046     		mov	r0, r6
 4826 1ab6 4946     		mov	r1, r9
 4827 1ab8 FFF7FEFF 		bl	floor
 4828              	.LVL748:
 4829 1abc CDE90601 		strd	r0, [sp, #24]
 4830              	.LVL749:
2875:HANcoder_E407_CAN_COMM_TEST.c **** 
 4831              		.loc 1 2875 0
 4832 1ac0 DBF80410 		ldr	r1, [fp, #4]
 4833 1ac4 DBF80020 		ldr	r2, [fp]
 4834 1ac8 01F10043 		add	r3, r1, #-2147483648
 4835              	.LVL750:
2884:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4836              		.loc 1 2884 0
 4837 1acc 0020     		movs	r0, #0
 4838 1ace 4FF08041 		mov	r1, #1073741824
 4839 1ad2 FFF7FEFF 		bl	pow
 4840              	.LVL751:
2895:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4841              		.loc 1 2895 0
 4842 1ad6 DDE90423 		ldrd	r2, [sp, #16]
2884:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4843              		.loc 1 2884 0
 4844 1ada 0446     		mov	r4, r0
 4845 1adc 0D46     		mov	r5, r1
 4846              	.LVL752:
2895:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4847              		.loc 1 2895 0
 4848 1ade 0020     		movs	r0, #0
 4849 1ae0 4FF08041 		mov	r1, #1073741824
 4850 1ae4 FFF7FEFF 		bl	pow
 4851              	.LVL753:
2901:HANcoder_E407_CAN_COMM_TEST.c **** 
 4852              		.loc 1 2901 0
 4853 1ae8 DDE90623 		ldrd	r2, [sp, #24]
2895:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4854              		.loc 1 2895 0
 4855 1aec CDE90801 		strd	r0, [sp, #32]
 4856              	.LVL754:
2901:HANcoder_E407_CAN_COMM_TEST.c **** 
 4857              		.loc 1 2901 0
 4858 1af0 3046     		mov	r0, r6
 4859              	.LVL755:
 4860 1af2 4946     		mov	r1, r9
 4861 1af4 FFF7FEFF 		bl	__aeabi_dsub
 4862              	.LVL756:
 4863 1af8 2246     		mov	r2, r4
 4864 1afa 2B46     		mov	r3, r5
 4865 1afc FFF7FEFF 		bl	__aeabi_ddiv
 4866              	.LVL757:
2904:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4867              		.loc 1 2904 0
 4868 1b00 0022     		movs	r2, #0
 4869 1b02 0023     		movs	r3, #0
2901:HANcoder_E407_CAN_COMM_TEST.c **** 
 4870              		.loc 1 2901 0
 4871 1b04 0446     		mov	r4, r0
 4872              	.LVL758:
 4873 1b06 0D46     		mov	r5, r1
 4874              	.LVL759:
2904:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 4875              		.loc 1 2904 0
 4876 1b08 FFF7FEFF 		bl	__aeabi_dcmplt
 4877              	.LVL760:
 4878 1b0c 0028     		cmp	r0, #0
 4879 1b0e 40F0AB85 		bne	.L404
2907:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4880              		.loc 1 2907 0
 4881 1b12 2046     		mov	r0, r4
 4882 1b14 2946     		mov	r1, r5
 4883 1b16 FFF7FEFF 		bl	floor
 4884              	.LVL761:
 4885 1b1a 0446     		mov	r4, r0
 4886              	.LVL762:
 4887 1b1c 0D46     		mov	r5, r1
 4888              	.LVL763:
 4889              	.L191:
 4890              	.LBB306:
 4891              	.LBB307:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 4892              		.loc 1 299 0
 4893 1b1e 3046     		mov	r0, r6
 4894 1b20 0023     		movs	r3, #0
 4895 1b22 3946     		mov	r1, r7
 4896 1b24 0022     		movs	r2, #0
 4897 1b26 FFF7FEFF 		bl	__aeabi_dcmplt
 4898              	.LVL764:
 4899 1b2a 8E4E     		ldr	r6, .L443
 4900              	.LVL765:
 4901 1b2c 4FF00103 		mov	r3, #1
 4902 1b30 0028     		cmp	r0, #0
 4903 1b32 00F0F082 		beq	.L405
 4904              	.L192:
 4905 1b36 D901     		lsls	r1, r3, #7
 4906 1b38 F172     		strb	r1, [r6, #11]
 4907              	.LVL766:
 4908              	.LBE307:
 4909              	.LBE306:
2930:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4910              		.loc 1 2930 0
 4911 1b3a DBE90023 		ldrd	r2, [fp]
 4912 1b3e 0020     		movs	r0, #0
 4913 1b40 4FF08041 		mov	r1, #1073741824
 4914 1b44 FFF7FEFF 		bl	pow
 4915              	.LVL767:
 4916 1b48 0646     		mov	r6, r0
 4917 1b4a 0F46     		mov	r7, r1
 4918              	.LVL768:
2940:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_l.y) + (uint8_T)rtb_Fix1);
 4919              		.loc 1 2940 0
 4920 1b4c 2046     		mov	r0, r4
 4921 1b4e 2946     		mov	r1, r5
 4922 1b50 FFF7FEFF 		bl	__aeabi_d2uiz
 4923              	.LVL769:
 4924 1b54 029B     		ldr	r3, [sp, #8]
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 4925              		.loc 1 2944 0
 4926 1b56 884C     		ldr	r4, .L443+20
 4927              	.LVL770:
2940:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_l.y) + (uint8_T)rtb_Fix1);
 4928              		.loc 1 2940 0
 4929 1b58 DD7A     		ldrb	r5, [r3, #11]	@ zero_extendqisi2
 4930 1b5a 3246     		mov	r2, r6
 4931 1b5c 3B46     		mov	r3, r7
 4932 1b5e DDE90667 		ldrd	r6, [sp, #24]
 4933              	.LVL771:
 4934 1b62 0544     		add	r5, r5, r0
 4935 1b64 3946     		mov	r1, r7
 4936 1b66 3046     		mov	r0, r6
 4937 1b68 FFF7FEFF 		bl	__aeabi_dmul
 4938              	.LVL772:
 4939 1b6c FFF7FEFF 		bl	__aeabi_d2uiz
 4940              	.LVL773:
 4941 1b70 0544     		add	r5, r5, r0
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 4942              		.loc 1 2944 0
 4943 1b72 3046     		mov	r0, r6
2940:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_l.y) + (uint8_T)rtb_Fix1);
 4944              		.loc 1 2940 0
 4945 1b74 814E     		ldr	r6, .L443+24
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 4946              		.loc 1 2944 0
 4947 1b76 DDE90823 		ldrd	r2, [sp, #32]
 4948 1b7a 3946     		mov	r1, r7
2940:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_l.y) + (uint8_T)rtb_Fix1);
 4949              		.loc 1 2940 0
 4950 1b7c 3570     		strb	r5, [r6]
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 4951              		.loc 1 2944 0
 4952 1b7e FFF7FEFF 		bl	__aeabi_dcmpge
 4953              	.LVL774:
 4954 1b82 4FF00103 		mov	r3, #1
 4955 1b86 0028     		cmp	r0, #0
 4956 1b88 00F0C382 		beq	.L406
 4957              	.L193:
2954:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S118>/Switch' */
 4958              		.loc 1 2954 0
 4959 1b8c 7C4A     		ldr	r2, .L443+28
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 4960              		.loc 1 2944 0
 4961 1b8e 2370     		strb	r3, [r4]
2954:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S118>/Switch' */
 4962              		.loc 1 2954 0
 4963 1b90 784B     		ldr	r3, .L443+16
 4964 1b92 D2E90045 		ldrd	r4, [r2]
 4965 1b96 D3E90067 		ldrd	r6, [r3]
 4966 1b9a 2246     		mov	r2, r4
 4967 1b9c 2B46     		mov	r3, r5
 4968 1b9e 3046     		mov	r0, r6
 4969 1ba0 3946     		mov	r1, r7
 4970 1ba2 FFF7FEFF 		bl	__aeabi_dcmplt
 4971              	.LVL775:
 4972 1ba6 0028     		cmp	r0, #0
 4973 1ba8 00F0A482 		beq	.L407
 4974              	.L194:
 4975              	.LVL776:
2967:HANcoder_E407_CAN_COMM_TEST.c **** 
 4976              		.loc 1 2967 0
 4977 1bac 27F00049 		bic	r9, r7, #-2147483648
 4978              	.LVL777:
2970:HANcoder_E407_CAN_COMM_TEST.c **** 
 4979              		.loc 1 2970 0
 4980 1bb0 3046     		mov	r0, r6
 4981 1bb2 4946     		mov	r1, r9
 4982 1bb4 FFF7FEFF 		bl	floor
 4983              	.LVL778:
 4984 1bb8 CDE90601 		strd	r0, [sp, #24]
 4985              	.LVL779:
2978:HANcoder_E407_CAN_COMM_TEST.c **** 
 4986              		.loc 1 2978 0
 4987 1bbc DBF80410 		ldr	r1, [fp, #4]
 4988 1bc0 DBF80020 		ldr	r2, [fp]
 4989 1bc4 01F10043 		add	r3, r1, #-2147483648
 4990              	.LVL780:
2987:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4991              		.loc 1 2987 0
 4992 1bc8 0020     		movs	r0, #0
 4993 1bca 4FF08041 		mov	r1, #1073741824
 4994 1bce FFF7FEFF 		bl	pow
 4995              	.LVL781:
2998:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4996              		.loc 1 2998 0
 4997 1bd2 DDE90423 		ldrd	r2, [sp, #16]
2987:HANcoder_E407_CAN_COMM_TEST.c ****       }
 4998              		.loc 1 2987 0
 4999 1bd6 0446     		mov	r4, r0
 5000 1bd8 0D46     		mov	r5, r1
 5001              	.LVL782:
2998:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5002              		.loc 1 2998 0
 5003 1bda 0020     		movs	r0, #0
 5004 1bdc 4FF08041 		mov	r1, #1073741824
 5005 1be0 FFF7FEFF 		bl	pow
 5006              	.LVL783:
3004:HANcoder_E407_CAN_COMM_TEST.c **** 
 5007              		.loc 1 3004 0
 5008 1be4 DDE90623 		ldrd	r2, [sp, #24]
2998:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5009              		.loc 1 2998 0
 5010 1be8 CDE90801 		strd	r0, [sp, #32]
 5011              	.LVL784:
3004:HANcoder_E407_CAN_COMM_TEST.c **** 
 5012              		.loc 1 3004 0
 5013 1bec 3046     		mov	r0, r6
 5014              	.LVL785:
 5015 1bee 4946     		mov	r1, r9
 5016 1bf0 FFF7FEFF 		bl	__aeabi_dsub
 5017              	.LVL786:
 5018 1bf4 2246     		mov	r2, r4
 5019 1bf6 2B46     		mov	r3, r5
 5020 1bf8 FFF7FEFF 		bl	__aeabi_ddiv
 5021              	.LVL787:
3007:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5022              		.loc 1 3007 0
 5023 1bfc 0022     		movs	r2, #0
 5024 1bfe 0023     		movs	r3, #0
3004:HANcoder_E407_CAN_COMM_TEST.c **** 
 5025              		.loc 1 3004 0
 5026 1c00 0446     		mov	r4, r0
 5027              	.LVL788:
 5028 1c02 0D46     		mov	r5, r1
 5029              	.LVL789:
3007:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5030              		.loc 1 3007 0
 5031 1c04 FFF7FEFF 		bl	__aeabi_dcmplt
 5032              	.LVL790:
 5033 1c08 0028     		cmp	r0, #0
 5034 1c0a 40F02585 		bne	.L408
3010:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5035              		.loc 1 3010 0
 5036 1c0e 2046     		mov	r0, r4
 5037 1c10 2946     		mov	r1, r5
 5038 1c12 FFF7FEFF 		bl	floor
 5039              	.LVL791:
 5040 1c16 0446     		mov	r4, r0
 5041              	.LVL792:
 5042 1c18 0D46     		mov	r5, r1
 5043              	.LVL793:
 5044              	.L198:
 5045              	.LBB309:
 5046              	.LBB310:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5047              		.loc 1 299 0
 5048 1c1a 3046     		mov	r0, r6
 5049 1c1c 0023     		movs	r3, #0
 5050 1c1e 3946     		mov	r1, r7
 5051 1c20 0022     		movs	r2, #0
 5052 1c22 FFF7FEFF 		bl	__aeabi_dcmplt
 5053              	.LVL794:
 5054 1c26 4F4E     		ldr	r6, .L443
 5055              	.LVL795:
 5056 1c28 4FF00103 		mov	r3, #1
 5057 1c2c 0028     		cmp	r0, #0
 5058 1c2e 00F01B82 		beq	.L409
 5059              	.L199:
 5060 1c32 D901     		lsls	r1, r3, #7
 5061 1c34 B172     		strb	r1, [r6, #10]
 5062              	.LVL796:
 5063              	.LBE310:
 5064              	.LBE309:
3033:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5065              		.loc 1 3033 0
 5066 1c36 DBE90023 		ldrd	r2, [fp]
 5067 1c3a 0020     		movs	r0, #0
 5068 1c3c 4FF08041 		mov	r1, #1073741824
 5069 1c40 FFF7FEFF 		bl	pow
 5070              	.LVL797:
 5071 1c44 0646     		mov	r6, r0
 5072 1c46 0F46     		mov	r7, r1
 5073              	.LVL798:
3043:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_de.y) + (uint8_T)rtb_Fix1);
 5074              		.loc 1 3043 0
 5075 1c48 2046     		mov	r0, r4
 5076 1c4a 2946     		mov	r1, r5
 5077 1c4c FFF7FEFF 		bl	__aeabi_d2uiz
 5078              	.LVL799:
 5079 1c50 029B     		ldr	r3, [sp, #8]
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5080              		.loc 1 3047 0
 5081 1c52 4C4C     		ldr	r4, .L443+32
 5082              	.LVL800:
3043:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_de.y) + (uint8_T)rtb_Fix1);
 5083              		.loc 1 3043 0
 5084 1c54 9D7A     		ldrb	r5, [r3, #10]	@ zero_extendqisi2
 5085 1c56 3246     		mov	r2, r6
 5086 1c58 3B46     		mov	r3, r7
 5087 1c5a DDE90667 		ldrd	r6, [sp, #24]
 5088              	.LVL801:
 5089 1c5e 0544     		add	r5, r5, r0
 5090 1c60 3946     		mov	r1, r7
 5091 1c62 3046     		mov	r0, r6
 5092 1c64 FFF7FEFF 		bl	__aeabi_dmul
 5093              	.LVL802:
 5094 1c68 FFF7FEFF 		bl	__aeabi_d2uiz
 5095              	.LVL803:
 5096 1c6c 0544     		add	r5, r5, r0
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5097              		.loc 1 3047 0
 5098 1c6e 3046     		mov	r0, r6
3043:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_de.y) + (uint8_T)rtb_Fix1);
 5099              		.loc 1 3043 0
 5100 1c70 454E     		ldr	r6, .L443+36
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5101              		.loc 1 3047 0
 5102 1c72 DDE90823 		ldrd	r2, [sp, #32]
 5103 1c76 3946     		mov	r1, r7
3043:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_de.y) + (uint8_T)rtb_Fix1);
 5104              		.loc 1 3043 0
 5105 1c78 3570     		strb	r5, [r6]
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5106              		.loc 1 3047 0
 5107 1c7a FFF7FEFF 		bl	__aeabi_dcmpge
 5108              	.LVL804:
 5109 1c7e 4FF00103 		mov	r3, #1
 5110 1c82 0028     		cmp	r0, #0
 5111 1c84 00F0EE81 		beq	.L410
 5112              	.L200:
3057:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S119>/Switch' */
 5113              		.loc 1 3057 0
 5114 1c88 404A     		ldr	r2, .L443+40
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5115              		.loc 1 3047 0
 5116 1c8a 2370     		strb	r3, [r4]
3057:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S119>/Switch' */
 5117              		.loc 1 3057 0
 5118 1c8c 394B     		ldr	r3, .L443+16
 5119 1c8e D2E90045 		ldrd	r4, [r2]
 5120 1c92 D3E90067 		ldrd	r6, [r3]
 5121 1c96 2246     		mov	r2, r4
 5122 1c98 2B46     		mov	r3, r5
 5123 1c9a 3046     		mov	r0, r6
 5124 1c9c 3946     		mov	r1, r7
 5125 1c9e FFF7FEFF 		bl	__aeabi_dcmplt
 5126              	.LVL805:
 5127 1ca2 0028     		cmp	r0, #0
 5128 1ca4 00F0CF81 		beq	.L411
 5129              	.L201:
 5130              	.LVL806:
3070:HANcoder_E407_CAN_COMM_TEST.c **** 
 5131              		.loc 1 3070 0
 5132 1ca8 27F00049 		bic	r9, r7, #-2147483648
 5133              	.LVL807:
3073:HANcoder_E407_CAN_COMM_TEST.c **** 
 5134              		.loc 1 3073 0
 5135 1cac 3046     		mov	r0, r6
 5136 1cae 4946     		mov	r1, r9
 5137 1cb0 FFF7FEFF 		bl	floor
 5138              	.LVL808:
 5139 1cb4 CDE90601 		strd	r0, [sp, #24]
 5140              	.LVL809:
3081:HANcoder_E407_CAN_COMM_TEST.c **** 
 5141              		.loc 1 3081 0
 5142 1cb8 DBF80410 		ldr	r1, [fp, #4]
 5143 1cbc DBF80020 		ldr	r2, [fp]
 5144 1cc0 01F10043 		add	r3, r1, #-2147483648
 5145              	.LVL810:
3090:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5146              		.loc 1 3090 0
 5147 1cc4 0020     		movs	r0, #0
 5148 1cc6 4FF08041 		mov	r1, #1073741824
 5149 1cca FFF7FEFF 		bl	pow
 5150              	.LVL811:
3101:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5151              		.loc 1 3101 0
 5152 1cce DDE90423 		ldrd	r2, [sp, #16]
3090:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5153              		.loc 1 3090 0
 5154 1cd2 0446     		mov	r4, r0
 5155 1cd4 0D46     		mov	r5, r1
 5156              	.LVL812:
3101:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5157              		.loc 1 3101 0
 5158 1cd6 0020     		movs	r0, #0
 5159 1cd8 4FF08041 		mov	r1, #1073741824
 5160 1cdc FFF7FEFF 		bl	pow
 5161              	.LVL813:
3107:HANcoder_E407_CAN_COMM_TEST.c **** 
 5162              		.loc 1 3107 0
 5163 1ce0 DDE90623 		ldrd	r2, [sp, #24]
3101:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5164              		.loc 1 3101 0
 5165 1ce4 CDE90801 		strd	r0, [sp, #32]
 5166              	.LVL814:
3107:HANcoder_E407_CAN_COMM_TEST.c **** 
 5167              		.loc 1 3107 0
 5168 1ce8 3046     		mov	r0, r6
 5169              	.LVL815:
 5170 1cea 4946     		mov	r1, r9
 5171 1cec FFF7FEFF 		bl	__aeabi_dsub
 5172              	.LVL816:
 5173 1cf0 2246     		mov	r2, r4
 5174 1cf2 2B46     		mov	r3, r5
 5175 1cf4 FFF7FEFF 		bl	__aeabi_ddiv
 5176              	.LVL817:
3110:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5177              		.loc 1 3110 0
 5178 1cf8 0022     		movs	r2, #0
 5179 1cfa 0023     		movs	r3, #0
3107:HANcoder_E407_CAN_COMM_TEST.c **** 
 5180              		.loc 1 3107 0
 5181 1cfc 0446     		mov	r4, r0
 5182              	.LVL818:
 5183 1cfe 0D46     		mov	r5, r1
 5184              	.LVL819:
3110:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5185              		.loc 1 3110 0
 5186 1d00 FFF7FEFF 		bl	__aeabi_dcmplt
 5187              	.LVL820:
 5188 1d04 0028     		cmp	r0, #0
 5189 1d06 40F09F84 		bne	.L412
3113:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5190              		.loc 1 3113 0
 5191 1d0a 2046     		mov	r0, r4
 5192 1d0c 2946     		mov	r1, r5
 5193 1d0e FFF7FEFF 		bl	floor
 5194              	.LVL821:
 5195 1d12 0446     		mov	r4, r0
 5196              	.LVL822:
 5197 1d14 0D46     		mov	r5, r1
 5198              	.LVL823:
 5199              	.L205:
 5200              	.LBB312:
 5201              	.LBB313:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5202              		.loc 1 299 0
 5203 1d16 3046     		mov	r0, r6
 5204 1d18 0023     		movs	r3, #0
 5205 1d1a 3946     		mov	r1, r7
 5206 1d1c 0022     		movs	r2, #0
 5207 1d1e FFF7FEFF 		bl	__aeabi_dcmplt
 5208              	.LVL824:
 5209 1d22 104E     		ldr	r6, .L443
 5210              	.LVL825:
 5211 1d24 4FF00103 		mov	r3, #1
 5212 1d28 0028     		cmp	r0, #0
 5213 1d2a 00F08A81 		beq	.L413
 5214              	.L206:
 5215 1d2e D901     		lsls	r1, r3, #7
 5216 1d30 7172     		strb	r1, [r6, #9]
 5217              	.LVL826:
 5218              	.LBE313:
 5219              	.LBE312:
3136:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5220              		.loc 1 3136 0
 5221 1d32 DBE90023 		ldrd	r2, [fp]
 5222 1d36 0020     		movs	r0, #0
 5223 1d38 4FF08041 		mov	r1, #1073741824
 5224 1d3c FFF7FEFF 		bl	pow
 5225              	.LVL827:
 5226 1d40 0646     		mov	r6, r0
 5227 1d42 0F46     		mov	r7, r1
 5228              	.LVL828:
3146:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_cx.y) + (uint8_T)rtb_Fix1);
 5229              		.loc 1 3146 0
 5230 1d44 2046     		mov	r0, r4
 5231 1d46 2946     		mov	r1, r5
 5232 1d48 FFF7FEFF 		bl	__aeabi_d2uiz
 5233              	.LVL829:
 5234 1d4c 029B     		ldr	r3, [sp, #8]
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5235              		.loc 1 3150 0
 5236 1d4e 104C     		ldr	r4, .L443+44
 5237              	.LVL830:
3146:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_cx.y) + (uint8_T)rtb_Fix1);
 5238              		.loc 1 3146 0
 5239 1d50 5D7A     		ldrb	r5, [r3, #9]	@ zero_extendqisi2
 5240 1d52 3246     		mov	r2, r6
 5241 1d54 3B46     		mov	r3, r7
 5242 1d56 DDE90667 		ldrd	r6, [sp, #24]
 5243              	.LVL831:
 5244 1d5a 0544     		add	r5, r5, r0
 5245 1d5c 3946     		mov	r1, r7
 5246 1d5e 3046     		mov	r0, r6
 5247 1d60 18E0     		b	.L444
 5248              	.L445:
 5249 1d62 00BF     		.align	2
 5250              	.L443:
 5251 1d64 00000000 		.word	rtB
 5252 1d68 00000000 		.word	OF5_CAN2
 5253 1d6c 00000000 		.word	Tx_coded5_CAN2
 5254 1d70 00000000 		.word	.LANCHOR22
 5255 1d74 00000000 		.word	.LANCHOR16
 5256 1d78 00000000 		.word	OF6_CAN2
 5257 1d7c 00000000 		.word	Tx_coded6_CAN2
 5258 1d80 00000000 		.word	.LANCHOR23
 5259 1d84 00000000 		.word	OF7_CAN2
 5260 1d88 00000000 		.word	Tx_coded7_CAN2
 5261 1d8c 00000000 		.word	.LANCHOR24
 5262 1d90 00000000 		.word	OF8_CAN2
 5263              	.L444:
 5264 1d94 FFF7FEFF 		bl	__aeabi_dmul
 5265              	.LVL832:
 5266 1d98 FFF7FEFF 		bl	__aeabi_d2uiz
 5267              	.LVL833:
 5268 1d9c 0544     		add	r5, r5, r0
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5269              		.loc 1 3150 0
 5270 1d9e 3046     		mov	r0, r6
3146:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_cx.y) + (uint8_T)rtb_Fix1);
 5271              		.loc 1 3146 0
 5272 1da0 B24E     		ldr	r6, .L446
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5273              		.loc 1 3150 0
 5274 1da2 DDE90823 		ldrd	r2, [sp, #32]
 5275 1da6 3946     		mov	r1, r7
3146:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_cx.y) + (uint8_T)rtb_Fix1);
 5276              		.loc 1 3146 0
 5277 1da8 3570     		strb	r5, [r6]
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5278              		.loc 1 3150 0
 5279 1daa FFF7FEFF 		bl	__aeabi_dcmpge
 5280              	.LVL834:
 5281 1dae 4FF00103 		mov	r3, #1
 5282 1db2 0028     		cmp	r0, #0
 5283 1db4 00F04381 		beq	.L414
 5284              	.L207:
3160:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S127>/Switch' */
 5285              		.loc 1 3160 0
 5286 1db8 AD4A     		ldr	r2, .L446+4
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5287              		.loc 1 3150 0
 5288 1dba 2370     		strb	r3, [r4]
3160:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S127>/Switch' */
 5289              		.loc 1 3160 0
 5290 1dbc AD4B     		ldr	r3, .L446+8
 5291 1dbe D2E90045 		ldrd	r4, [r2]
 5292 1dc2 D3E90067 		ldrd	r6, [r3]
 5293 1dc6 2246     		mov	r2, r4
 5294 1dc8 2B46     		mov	r3, r5
 5295 1dca 3046     		mov	r0, r6
 5296 1dcc 3946     		mov	r1, r7
 5297 1dce FFF7FEFF 		bl	__aeabi_dcmplt
 5298              	.LVL835:
 5299 1dd2 0028     		cmp	r0, #0
 5300 1dd4 00F02481 		beq	.L415
 5301              	.L208:
 5302              	.LVL836:
3173:HANcoder_E407_CAN_COMM_TEST.c **** 
 5303              		.loc 1 3173 0
 5304 1dd8 27F00049 		bic	r9, r7, #-2147483648
 5305              	.LVL837:
3176:HANcoder_E407_CAN_COMM_TEST.c **** 
 5306              		.loc 1 3176 0
 5307 1ddc 3046     		mov	r0, r6
 5308 1dde 4946     		mov	r1, r9
 5309 1de0 FFF7FEFF 		bl	floor
 5310              	.LVL838:
 5311 1de4 CDE90601 		strd	r0, [sp, #24]
 5312              	.LVL839:
3184:HANcoder_E407_CAN_COMM_TEST.c **** 
 5313              		.loc 1 3184 0
 5314 1de8 DBF80410 		ldr	r1, [fp, #4]
 5315 1dec DBF80020 		ldr	r2, [fp]
 5316 1df0 01F10043 		add	r3, r1, #-2147483648
 5317              	.LVL840:
3193:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5318              		.loc 1 3193 0
 5319 1df4 0020     		movs	r0, #0
 5320 1df6 4FF08041 		mov	r1, #1073741824
 5321 1dfa FFF7FEFF 		bl	pow
 5322              	.LVL841:
3204:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5323              		.loc 1 3204 0
 5324 1dfe DDE90423 		ldrd	r2, [sp, #16]
3193:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5325              		.loc 1 3193 0
 5326 1e02 0446     		mov	r4, r0
 5327 1e04 0D46     		mov	r5, r1
 5328              	.LVL842:
3204:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5329              		.loc 1 3204 0
 5330 1e06 0020     		movs	r0, #0
 5331 1e08 4FF08041 		mov	r1, #1073741824
 5332 1e0c FFF7FEFF 		bl	pow
 5333              	.LVL843:
3210:HANcoder_E407_CAN_COMM_TEST.c **** 
 5334              		.loc 1 3210 0
 5335 1e10 DDE90623 		ldrd	r2, [sp, #24]
3204:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5336              		.loc 1 3204 0
 5337 1e14 CDE90401 		strd	r0, [sp, #16]
 5338              	.LVL844:
3210:HANcoder_E407_CAN_COMM_TEST.c **** 
 5339              		.loc 1 3210 0
 5340 1e18 3046     		mov	r0, r6
 5341              	.LVL845:
 5342 1e1a 4946     		mov	r1, r9
 5343 1e1c FFF7FEFF 		bl	__aeabi_dsub
 5344              	.LVL846:
 5345 1e20 2246     		mov	r2, r4
 5346 1e22 2B46     		mov	r3, r5
 5347 1e24 FFF7FEFF 		bl	__aeabi_ddiv
 5348              	.LVL847:
3213:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5349              		.loc 1 3213 0
 5350 1e28 0022     		movs	r2, #0
 5351 1e2a 0023     		movs	r3, #0
3210:HANcoder_E407_CAN_COMM_TEST.c **** 
 5352              		.loc 1 3210 0
 5353 1e2c 0446     		mov	r4, r0
 5354              	.LVL848:
 5355 1e2e 0D46     		mov	r5, r1
 5356              	.LVL849:
3213:HANcoder_E407_CAN_COMM_TEST.c ****         rtb_Fix1 = ceil(rtb_Fix1);
 5357              		.loc 1 3213 0
 5358 1e30 FFF7FEFF 		bl	__aeabi_dcmplt
 5359              	.LVL850:
 5360 1e34 0028     		cmp	r0, #0
 5361 1e36 40F0FF83 		bne	.L416
3216:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5362              		.loc 1 3216 0
 5363 1e3a 2046     		mov	r0, r4
 5364 1e3c 2946     		mov	r1, r5
 5365 1e3e FFF7FEFF 		bl	floor
 5366              	.LVL851:
 5367 1e42 0446     		mov	r4, r0
 5368              	.LVL852:
 5369 1e44 0D46     		mov	r5, r1
 5370              	.LVL853:
 5371              	.L212:
 5372              	.LBB315:
 5373              	.LBB316:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5374              		.loc 1 299 0
 5375 1e46 3046     		mov	r0, r6
 5376 1e48 0023     		movs	r3, #0
 5377 1e4a 3946     		mov	r1, r7
 5378 1e4c 0022     		movs	r2, #0
 5379 1e4e FFF7FEFF 		bl	__aeabi_dcmplt
 5380              	.LVL854:
 5381 1e52 894E     		ldr	r6, .L446+12
 5382              	.LVL855:
 5383 1e54 4FF00103 		mov	r3, #1
 5384 1e58 0028     		cmp	r0, #0
 5385 1e5a 00F0DF80 		beq	.L417
 5386              	.L213:
 5387 1e5e D901     		lsls	r1, r3, #7
 5388 1e60 7170     		strb	r1, [r6, #1]
 5389              	.LVL856:
 5390              	.LBE316:
 5391              	.LBE315:
3239:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5392              		.loc 1 3239 0
 5393 1e62 DBE90023 		ldrd	r2, [fp]
 5394 1e66 0020     		movs	r0, #0
 5395 1e68 4FF08041 		mov	r1, #1073741824
 5396 1e6c FFF7FEFF 		bl	pow
 5397              	.LVL857:
 5398 1e70 0646     		mov	r6, r0
 5399 1e72 0F46     		mov	r7, r1
 5400              	.LVL858:
3249:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aq.y) + (uint8_T)rtb_Fix1);
 5401              		.loc 1 3249 0
 5402 1e74 2046     		mov	r0, r4
 5403 1e76 2946     		mov	r1, r5
 5404 1e78 FFF7FEFF 		bl	__aeabi_d2uiz
 5405              	.LVL859:
 5406 1e7c 029B     		ldr	r3, [sp, #8]
 5407 1e7e 7F4D     		ldr	r5, .L446+16
 5408 1e80 5C78     		ldrb	r4, [r3, #1]	@ zero_extendqisi2
 5409              	.LVL860:
3253:HANcoder_E407_CAN_COMM_TEST.c **** 
 5410              		.loc 1 3253 0
 5411 1e82 DFF86C82 		ldr	r8, .L446+132
 5412              	.LVL861:
3249:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aq.y) + (uint8_T)rtb_Fix1);
 5413              		.loc 1 3249 0
 5414 1e86 3246     		mov	r2, r6
 5415 1e88 3B46     		mov	r3, r7
 5416 1e8a DDE90667 		ldrd	r6, [sp, #24]
 5417              	.LVL862:
 5418 1e8e 0444     		add	r4, r4, r0
 5419 1e90 3946     		mov	r1, r7
 5420 1e92 3046     		mov	r0, r6
 5421 1e94 FFF7FEFF 		bl	__aeabi_dmul
 5422              	.LVL863:
 5423 1e98 FFF7FEFF 		bl	__aeabi_d2uiz
 5424              	.LVL864:
 5425 1e9c 0444     		add	r4, r4, r0
3253:HANcoder_E407_CAN_COMM_TEST.c **** 
 5426              		.loc 1 3253 0
 5427 1e9e DDE90423 		ldrd	r2, [sp, #16]
 5428 1ea2 3046     		mov	r0, r6
 5429 1ea4 3946     		mov	r1, r7
3249:HANcoder_E407_CAN_COMM_TEST.c ****         * rtb_Minus) + rtB.BitShift_aq.y) + (uint8_T)rtb_Fix1);
 5430              		.loc 1 3249 0
 5431 1ea6 2C70     		strb	r4, [r5]
3253:HANcoder_E407_CAN_COMM_TEST.c **** 
 5432              		.loc 1 3253 0
 5433 1ea8 FFF7FEFF 		bl	__aeabi_dcmpge
 5434              	.LVL865:
 5435 1eac 4FF00103 		mov	r3, #1
 5436 1eb0 0028     		cmp	r0, #0
 5437 1eb2 00F0B180 		beq	.L418
 5438              	.L214:
3258:HANcoder_E407_CAN_COMM_TEST.c **** 
 5439              		.loc 1 3258 0
 5440 1eb6 724A     		ldr	r2, .L446+20
3253:HANcoder_E407_CAN_COMM_TEST.c **** 
 5441              		.loc 1 3253 0
 5442 1eb8 88F80030 		strb	r3, [r8]
3258:HANcoder_E407_CAN_COMM_TEST.c **** 
 5443              		.loc 1 3258 0
 5444 1ebc D2E90001 		ldrd	r0, [r2]
 5445 1ec0 FFF7FEFF 		bl	__aeabi_d2uiz
 5446              	.LVL866:
 5447 1ec4 6F4A     		ldr	r2, .L446+24
3263:HANcoder_E407_CAN_COMM_TEST.c **** 
 5448              		.loc 1 3263 0
 5449 1ec6 704B     		ldr	r3, .L446+28
3270:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN1;
 5450              		.loc 1 3270 0
 5451 1ec8 704E     		ldr	r6, .L446+32
3258:HANcoder_E407_CAN_COMM_TEST.c **** 
 5452              		.loc 1 3258 0
 5453 1eca 1060     		str	r0, [r2]
3263:HANcoder_E407_CAN_COMM_TEST.c **** 
 5454              		.loc 1 3263 0
 5455 1ecc D3E90001 		ldrd	r0, [r3]
 5456 1ed0 FFF7FEFF 		bl	__aeabi_d2uiz
 5457              	.LVL867:
3270:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN1;
 5458              		.loc 1 3270 0
 5459 1ed4 96F80090 		ldrb	r9, [r6]	@ zero_extendqisi2
3271:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN1;
 5460              		.loc 1 3271 0
 5461 1ed8 6D4E     		ldr	r6, .L446+36
3263:HANcoder_E407_CAN_COMM_TEST.c **** 
 5462              		.loc 1 3263 0
 5463 1eda 6E49     		ldr	r1, .L446+40
3271:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN1;
 5464              		.loc 1 3271 0
 5465 1edc 96F80080 		ldrb	r8, [r6]	@ zero_extendqisi2
3272:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN1;
 5466              		.loc 1 3272 0
 5467 1ee0 6D4E     		ldr	r6, .L446+44
3268:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN1;
 5468              		.loc 1 3268 0
 5469 1ee2 6E4B     		ldr	r3, .L446+48
3272:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN1;
 5470              		.loc 1 3272 0
 5471 1ee4 96F800C0 		ldrb	ip, [r6]	@ zero_extendqisi2
3273:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN1;
 5472              		.loc 1 3273 0
 5473 1ee8 6D4E     		ldr	r6, .L446+52
3269:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN1;
 5474              		.loc 1 3269 0
 5475 1eea 6E4A     		ldr	r2, .L446+56
3273:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN1;
 5476              		.loc 1 3273 0
 5477 1eec 96F800E0 		ldrb	lr, [r6]	@ zero_extendqisi2
3274:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN1;
 5478              		.loc 1 3274 0
 5479 1ef0 6D4E     		ldr	r6, .L446+60
3268:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN1;
 5480              		.loc 1 3268 0
 5481 1ef2 6E4C     		ldr	r4, .L446+64
3274:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN1;
 5482              		.loc 1 3274 0
 5483 1ef4 3778     		ldrb	r7, [r6]	@ zero_extendqisi2
3263:HANcoder_E407_CAN_COMM_TEST.c **** 
 5484              		.loc 1 3263 0
 5485 1ef6 0860     		str	r0, [r1]
3275:HANcoder_E407_CAN_COMM_TEST.c **** 
 5486              		.loc 1 3275 0
 5487 1ef8 6D4E     		ldr	r6, .L446+68
3278:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5488              		.loc 1 3278 0
 5489 1efa 6E49     		ldr	r1, .L446+72
3268:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN1;
 5490              		.loc 1 3268 0
 5491 1efc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3269:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN1;
 5492              		.loc 1 3269 0
 5493 1efe 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
3275:HANcoder_E407_CAN_COMM_TEST.c **** 
 5494              		.loc 1 3275 0
 5495 1f00 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
3268:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN1;
 5496              		.loc 1 3268 0
 5497 1f02 2370     		strb	r3, [r4]
3278:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5498              		.loc 1 3278 0
 5499 1f04 0968     		ldr	r1, [r1]
3269:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN1;
 5500              		.loc 1 3269 0
 5501 1f06 6270     		strb	r2, [r4, #1]
3278:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5502              		.loc 1 3278 0
 5503 1f08 2346     		mov	r3, r4
 5504 1f0a 0822     		movs	r2, #8
 5505 1f0c 0020     		movs	r0, #0
3270:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN1;
 5506              		.loc 1 3270 0
 5507 1f0e 84F80290 		strb	r9, [r4, #2]
3271:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN1;
 5508              		.loc 1 3271 0
 5509 1f12 84F80380 		strb	r8, [r4, #3]
3272:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN1;
 5510              		.loc 1 3272 0
 5511 1f16 84F804C0 		strb	ip, [r4, #4]
3273:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN1;
 5512              		.loc 1 3273 0
 5513 1f1a 84F805E0 		strb	lr, [r4, #5]
3274:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN1;
 5514              		.loc 1 3274 0
 5515 1f1e A771     		strb	r7, [r4, #6]
3275:HANcoder_E407_CAN_COMM_TEST.c **** 
 5516              		.loc 1 3275 0
 5517 1f20 E671     		strb	r6, [r4, #7]
3278:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5518              		.loc 1 3278 0
 5519 1f22 FFF7FEFF 		bl	CanTransmit
 5520              	.LVL868:
3285:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN2;
 5521              		.loc 1 3285 0
 5522 1f26 6449     		ldr	r1, .L446+76
3284:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN2;
 5523              		.loc 1 3284 0
 5524 1f28 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
3285:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN2;
 5525              		.loc 1 3285 0
 5526 1f2a 91F80080 		ldrb	r8, [r1]	@ zero_extendqisi2
3286:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN2;
 5527              		.loc 1 3286 0
 5528 1f2e 6349     		ldr	r1, .L446+80
3294:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5529              		.loc 1 3294 0
 5530 1f30 634A     		ldr	r2, .L446+84
3286:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN2;
 5531              		.loc 1 3286 0
 5532 1f32 91F800C0 		ldrb	ip, [r1]	@ zero_extendqisi2
3287:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN2;
 5533              		.loc 1 3287 0
 5534 1f36 6349     		ldr	r1, .L446+88
3284:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[1] = Tx_coded2_CAN2;
 5535              		.loc 1 3284 0
 5536 1f38 2370     		strb	r3, [r4]
3287:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN2;
 5537              		.loc 1 3287 0
 5538 1f3a 91F800E0 		ldrb	lr, [r1]	@ zero_extendqisi2
3288:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN2;
 5539              		.loc 1 3288 0
 5540 1f3e 6249     		ldr	r1, .L446+92
3285:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[2] = Tx_coded3_CAN2;
 5541              		.loc 1 3285 0
 5542 1f40 84F80180 		strb	r8, [r4, #1]
3288:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN2;
 5543              		.loc 1 3288 0
 5544 1f44 0F78     		ldrb	r7, [r1]	@ zero_extendqisi2
3289:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN2;
 5545              		.loc 1 3289 0
 5546 1f46 6149     		ldr	r1, .L446+96
3286:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[3] = Tx_coded4_CAN2;
 5547              		.loc 1 3286 0
 5548 1f48 84F802C0 		strb	ip, [r4, #2]
3289:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN2;
 5549              		.loc 1 3289 0
 5550 1f4c 0E78     		ldrb	r6, [r1]	@ zero_extendqisi2
3290:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN2;
 5551              		.loc 1 3290 0
 5552 1f4e 6049     		ldr	r1, .L446+100
3287:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[4] = Tx_coded5_CAN2;
 5553              		.loc 1 3287 0
 5554 1f50 84F803E0 		strb	lr, [r4, #3]
3290:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN2;
 5555              		.loc 1 3290 0
 5556 1f54 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
3291:HANcoder_E407_CAN_COMM_TEST.c **** 
 5557              		.loc 1 3291 0
 5558 1f56 4549     		ldr	r1, .L446
3288:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[5] = Tx_coded6_CAN2;
 5559              		.loc 1 3288 0
 5560 1f58 2771     		strb	r7, [r4, #4]
3291:HANcoder_E407_CAN_COMM_TEST.c **** 
 5561              		.loc 1 3291 0
 5562 1f5a 91F80090 		ldrb	r9, [r1]	@ zero_extendqisi2
3294:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5563              		.loc 1 3294 0
 5564 1f5e 1168     		ldr	r1, [r2]
3289:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[6] = Tx_coded7_CAN2;
 5565              		.loc 1 3289 0
 5566 1f60 6671     		strb	r6, [r4, #5]
3294:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5567              		.loc 1 3294 0
 5568 1f62 2346     		mov	r3, r4
 5569 1f64 0822     		movs	r2, #8
 5570 1f66 0120     		movs	r0, #1
3290:HANcoder_E407_CAN_COMM_TEST.c ****         canTxData.uint8_T_info[7] = Tx_coded8_CAN2;
 5571              		.loc 1 3290 0
 5572 1f68 A571     		strb	r5, [r4, #6]
3291:HANcoder_E407_CAN_COMM_TEST.c **** 
 5573              		.loc 1 3291 0
 5574 1f6a 84F80790 		strb	r9, [r4, #7]
3294:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5575              		.loc 1 3294 0
 5576 1f6e FFF7FEFF 		bl	CanTransmit
 5577              	.LVL869:
 5578              	.L215:
3306:HANcoder_E407_CAN_COMM_TEST.c **** 
 5579              		.loc 1 3306 0
 5580 1f72 039B     		ldr	r3, [sp, #12]
3324:HANcoder_E407_CAN_COMM_TEST.c ****     /* UnitDelay: '<S16>/Output' */
 5581              		.loc 1 3324 0
 5582 1f74 9AF80210 		ldrb	r1, [r10, #2]	@ zero_extendqisi2
3306:HANcoder_E407_CAN_COMM_TEST.c **** 
 5583              		.loc 1 3306 0
 5584 1f78 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5585              	.LVL870:
3324:HANcoder_E407_CAN_COMM_TEST.c ****     /* UnitDelay: '<S16>/Output' */
 5586              		.loc 1 3324 0
 5587 1f7a 564A     		ldr	r2, .L446+104
3312:HANcoder_E407_CAN_COMM_TEST.c **** 
 5588              		.loc 1 3312 0
 5589 1f7c 5C1C     		adds	r4, r3, #1
 5590 1f7e E4B2     		uxtb	r4, r4
 5591              	.LVL871:
3318:HANcoder_E407_CAN_COMM_TEST.c ****     }
 5592              		.loc 1 3318 0
 5593 1f80 022C     		cmp	r4, #2
 5594 1f82 28BF     		it	cs
 5595 1f84 0024     		movcs	r4, #0
 5596              	.LVL872:
3324:HANcoder_E407_CAN_COMM_TEST.c ****     /* UnitDelay: '<S16>/Output' */
 5597              		.loc 1 3324 0
 5598 1f86 0029     		cmp	r1, #0
 5599 1f88 2FD1     		bne	.L419
3326:HANcoder_E407_CAN_COMM_TEST.c **** 
 5600              		.loc 1 3326 0
 5601 1f8a 0399     		ldr	r1, [sp, #12]
 5602 1f8c 3A48     		ldr	r0, .L446+12
 5603 1f8e 497A     		ldrb	r1, [r1, #9]	@ zero_extendqisi2
 5604 1f90 0170     		strb	r1, [r0]
3331:HANcoder_E407_CAN_COMM_TEST.c **** 
 5605              		.loc 1 3331 0
 5606 1f92 0131     		adds	r1, r1, #1
 5607 1f94 C9B2     		uxtb	r1, r1
 5608              	.LVL873:
3337:HANcoder_E407_CAN_COMM_TEST.c ****     }
 5609              		.loc 1 3337 0
 5610 1f96 0229     		cmp	r1, #2
 5611 1f98 28BF     		it	cs
 5612 1f9a 0021     		movcs	r1, #0
 5613              	.LVL874:
 5614 1f9c 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 5615 1f9e 0A91     		str	r1, [sp, #40]
 5616              	.LVL875:
 5617              	.L218:
3343:HANcoder_E407_CAN_COMM_TEST.c ****     /* Switch: '<S2>/Switch' incorporates:
 5618              		.loc 1 3343 0
 5619 1fa0 002A     		cmp	r2, #0
 5620 1fa2 7EF43AA8 		bne	.L219
3348:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S2>/Data Type Conversion' */
 5621              		.loc 1 3348 0
 5622 1fa6 4C4A     		ldr	r2, .L446+108
 5623 1fa8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5624 1faa 02BB     		cbnz	r2, .L220
3348:HANcoder_E407_CAN_COMM_TEST.c ****       /* DataTypeConversion: '<S2>/Data Type Conversion' */
 5625              		.loc 1 3348 0 is_stmt 0 discriminator 1
 5626 1fac 4B4A     		ldr	r2, .L446+112
 5627 1fae 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5628 1fb0 EAB9     		cbnz	r2, .L220
3353:HANcoder_E407_CAN_COMM_TEST.c ****     }
 5629              		.loc 1 3353 0 is_stmt 1
 5630 1fb2 314B     		ldr	r3, .L446+12
 5631              	.LVL876:
 5632 1fb4 4A4A     		ldr	r2, .L446+116
 5633 1fb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5634 1fb8 0033     		adds	r3, r3, #0
 5635 1fba 18BF     		it	ne
 5636 1fbc 0123     		movne	r3, #1
 5637 1fbe 1370     		strb	r3, [r2]
 5638 1fc0 FEF72BB8 		b	.L219
 5639              	.LVL877:
 5640              	.L14:
1558:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.RxCAN_MODE = false;
 5641              		.loc 1 1558 0
 5642 1fc4 474B     		ldr	r3, .L446+120
 5643 1fc6 0393     		str	r3, [sp, #12]
 5644 1fc8 1946     		mov	r1, r3
 5645 1fca DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5646 1fcc 002B     		cmp	r3, #0
 5647 1fce 3EF4D8AE 		beq	.L100
1559:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5648              		.loc 1 1559 0
 5649 1fd2 0023     		movs	r3, #0
 5650 1fd4 CB72     		strb	r3, [r1, #11]
 5651 1fd6 FEF7D4BE 		b	.L100
 5652              	.L101:
3297:HANcoder_E407_CAN_COMM_TEST.c ****         rtDWork.TxCAN_MODE = false;
 5653              		.loc 1 3297 0
 5654 1fda 039B     		ldr	r3, [sp, #12]
 5655 1fdc 414A     		ldr	r2, .L446+120
 5656 1fde 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 5657 1fe0 002B     		cmp	r3, #0
 5658 1fe2 C6D0     		beq	.L215
3298:HANcoder_E407_CAN_COMM_TEST.c ****       }
 5659              		.loc 1 3298 0
 5660 1fe4 0023     		movs	r3, #0
 5661 1fe6 9372     		strb	r3, [r2, #10]
 5662 1fe8 C3E7     		b	.L215
 5663              	.LVL878:
 5664              	.L419:
 5665 1fea 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 5666 1fec D8E7     		b	.L218
 5667              	.LVL879:
 5668              	.L220:
3350:HANcoder_E407_CAN_COMM_TEST.c ****     } else {
 5669              		.loc 1 3350 0
 5670 1fee 0033     		adds	r3, r3, #0
 5671 1ff0 3B4A     		ldr	r2, .L446+116
 5672 1ff2 18BF     		it	ne
 5673 1ff4 0123     		movne	r3, #1
 5674              	.LVL880:
 5675 1ff6 1370     		strb	r3, [r2]
 5676 1ff8 FEF70FB8 		b	.L219
 5677              	.LVL881:
 5678              	.L338:
 493:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5679              		.loc 1 493 0
 5680 1ffc 2946     		mov	r1, r5
 5681 1ffe FFF7FEFF 		bl	__aeabi_dmul
 5682              	.LVL882:
 5683 2002 3246     		mov	r2, r6
 5684 2004 3B46     		mov	r3, r7
 5685 2006 FFF7FEFF 		bl	__aeabi_dadd
 5686              	.LVL883:
 5687 200a 374B     		ldr	r3, .L446+124
 5688 200c 01F10042 		add	r2, r1, #-2147483648
 5689 2010 83E80500 		stmia	r3, {r0, r2}
 5690 2014 FEF70CB9 		b	.L22
 5691              	.LVL884:
 5692              	.L418:
3253:HANcoder_E407_CAN_COMM_TEST.c **** 
 5693              		.loc 1 3253 0
 5694 2018 0346     		mov	r3, r0
 5695 201a 4CE7     		b	.L214
 5696              	.LVL885:
 5697              	.L417:
 5698              	.LBB318:
 5699              	.LBB317:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5700              		.loc 1 299 0
 5701 201c 0346     		mov	r3, r0
 5702 201e 1EE7     		b	.L213
 5703              	.LVL886:
 5704              	.L415:
 5705              	.LBE317:
 5706              	.LBE318:
3163:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S127>/Switch1' */
 5707              		.loc 1 3163 0
 5708 2020 324B     		ldr	r3, .L446+128
 5709 2022 D3E90067 		ldrd	r6, [r3]
 5710 2026 2046     		mov	r0, r4
 5711 2028 2946     		mov	r1, r5
 5712 202a 3246     		mov	r2, r6
 5713 202c 3B46     		mov	r3, r7
 5714 202e FFF7FEFF 		bl	__aeabi_dcmpge
 5715              	.LVL887:
 5716 2032 0028     		cmp	r0, #0
 5717 2034 3FF4D0AE 		beq	.L208
3165:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5718              		.loc 1 3165 0
 5719 2038 2646     		mov	r6, r4
 5720 203a 2F46     		mov	r7, r5
 5721 203c CCE6     		b	.L208
 5722              	.L414:
3150:HANcoder_E407_CAN_COMM_TEST.c **** 
 5723              		.loc 1 3150 0
 5724 203e 0346     		mov	r3, r0
 5725 2040 BAE6     		b	.L207
 5726              	.LVL888:
 5727              	.L413:
 5728              	.LBB319:
 5729              	.LBB314:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5730              		.loc 1 299 0
 5731 2042 0346     		mov	r3, r0
 5732 2044 73E6     		b	.L206
 5733              	.LVL889:
 5734              	.L411:
 5735              	.LBE314:
 5736              	.LBE319:
3060:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S119>/Switch1' */
 5737              		.loc 1 3060 0
 5738 2046 294B     		ldr	r3, .L446+128
 5739 2048 D3E90067 		ldrd	r6, [r3]
 5740 204c 2046     		mov	r0, r4
 5741 204e 2946     		mov	r1, r5
 5742 2050 3246     		mov	r2, r6
 5743 2052 3B46     		mov	r3, r7
 5744 2054 FFF7FEFF 		bl	__aeabi_dcmpge
 5745              	.LVL890:
 5746 2058 0028     		cmp	r0, #0
 5747 205a 3FF425AE 		beq	.L201
3062:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5748              		.loc 1 3062 0
 5749 205e 2646     		mov	r6, r4
 5750 2060 2F46     		mov	r7, r5
 5751 2062 21E6     		b	.L201
 5752              	.L410:
3047:HANcoder_E407_CAN_COMM_TEST.c **** 
 5753              		.loc 1 3047 0
 5754 2064 0346     		mov	r3, r0
 5755 2066 0FE6     		b	.L200
 5756              	.LVL891:
 5757              	.L409:
 5758              	.LBB320:
 5759              	.LBB311:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5760              		.loc 1 299 0
 5761 2068 0346     		mov	r3, r0
 5762 206a E2E5     		b	.L199
 5763              	.L447:
 5764              		.align	2
 5765              	.L446:
 5766 206c 00000000 		.word	Tx_coded8_CAN2
 5767 2070 00000000 		.word	.LANCHOR25
 5768 2074 00000000 		.word	.LANCHOR16
 5769 2078 00000000 		.word	rtB
 5770 207c 00000000 		.word	Tx_coded1_CAN2
 5771 2080 00000000 		.word	.LANCHOR26
 5772 2084 00000000 		.word	Tx_ID_CAN1_s
 5773 2088 00000000 		.word	.LANCHOR27
 5774 208c 00000000 		.word	Tx_coded3_CAN1
 5775 2090 00000000 		.word	Tx_coded4_CAN1
 5776 2094 00000000 		.word	Tx_ID_CAN2_s
 5777 2098 00000000 		.word	Tx_coded5_CAN1
 5778 209c 00000000 		.word	Tx_coded1_CAN1
 5779 20a0 00000000 		.word	Tx_coded6_CAN1
 5780 20a4 00000000 		.word	Tx_coded2_CAN1
 5781 20a8 00000000 		.word	Tx_coded7_CAN1
 5782 20ac 00000000 		.word	.LANCHOR28
 5783 20b0 00000000 		.word	Tx_coded8_CAN1
 5784 20b4 00000000 		.word	constant_ID_TXCAN1
 5785 20b8 00000000 		.word	Tx_coded2_CAN2
 5786 20bc 00000000 		.word	Tx_coded3_CAN2
 5787 20c0 00000000 		.word	constant_ID_TXCAN2
 5788 20c4 00000000 		.word	Tx_coded4_CAN2
 5789 20c8 00000000 		.word	Tx_coded5_CAN2
 5790 20cc 00000000 		.word	Tx_coded6_CAN2
 5791 20d0 00000000 		.word	Tx_coded7_CAN2
 5792 20d4 00000000 		.word	rtM_
 5793 20d8 00000000 		.word	.LANCHOR29
 5794 20dc 00000000 		.word	WKUP_button
 5795 20e0 00000000 		.word	LedValue
 5796 20e4 00000000 		.word	rtDWork
 5797 20e8 00000000 		.word	Rx_Buffer_1_CAN1
 5798 20ec 00000000 		.word	.LANCHOR18
 5799 20f0 00000000 		.word	OF1_CAN2
 5800              	.LVL892:
 5801              	.L407:
 5802              	.LBE311:
 5803              	.LBE320:
2957:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S118>/Switch1' */
 5804              		.loc 1 2957 0
 5805 20f4 CB4B     		ldr	r3, .L448
 5806 20f6 D3E90067 		ldrd	r6, [r3]
 5807 20fa 2046     		mov	r0, r4
 5808 20fc 2946     		mov	r1, r5
 5809 20fe 3246     		mov	r2, r6
 5810 2100 3B46     		mov	r3, r7
 5811 2102 FFF7FEFF 		bl	__aeabi_dcmpge
 5812              	.LVL893:
 5813 2106 0028     		cmp	r0, #0
 5814 2108 3FF450AD 		beq	.L194
2959:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5815              		.loc 1 2959 0
 5816 210c 2646     		mov	r6, r4
 5817 210e 2F46     		mov	r7, r5
 5818 2110 4CE5     		b	.L194
 5819              	.L406:
2944:HANcoder_E407_CAN_COMM_TEST.c **** 
 5820              		.loc 1 2944 0
 5821 2112 0346     		mov	r3, r0
 5822 2114 3AE5     		b	.L193
 5823              	.LVL894:
 5824              	.L405:
 5825              	.LBB321:
 5826              	.LBB308:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5827              		.loc 1 299 0
 5828 2116 0346     		mov	r3, r0
 5829 2118 0DE5     		b	.L192
 5830              	.LVL895:
 5831              	.L403:
 5832              	.LBE308:
 5833              	.LBE321:
2854:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S117>/Switch1' */
 5834              		.loc 1 2854 0
 5835 211a C24B     		ldr	r3, .L448
 5836 211c D3E90067 		ldrd	r6, [r3]
 5837 2120 2046     		mov	r0, r4
 5838 2122 2946     		mov	r1, r5
 5839 2124 3246     		mov	r2, r6
 5840 2126 3B46     		mov	r3, r7
 5841 2128 FFF7FEFF 		bl	__aeabi_dcmpge
 5842              	.LVL896:
 5843 212c 0028     		cmp	r0, #0
 5844 212e 3FF4BFAC 		beq	.L187
2856:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5845              		.loc 1 2856 0
 5846 2132 2646     		mov	r6, r4
 5847 2134 2F46     		mov	r7, r5
 5848 2136 BBE4     		b	.L187
 5849              	.L402:
2841:HANcoder_E407_CAN_COMM_TEST.c **** 
 5850              		.loc 1 2841 0
 5851 2138 0346     		mov	r3, r0
 5852 213a A9E4     		b	.L186
 5853              	.LVL897:
 5854              	.L401:
 5855              	.LBB322:
 5856              	.LBB305:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5857              		.loc 1 299 0
 5858 213c 0346     		mov	r3, r0
 5859 213e 7CE4     		b	.L185
 5860              	.LVL898:
 5861              	.L399:
 5862              	.LBE305:
 5863              	.LBE322:
2751:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S116>/Switch1' */
 5864              		.loc 1 2751 0
 5865 2140 B84B     		ldr	r3, .L448
 5866 2142 D3E90067 		ldrd	r6, [r3]
 5867 2146 2046     		mov	r0, r4
 5868 2148 2946     		mov	r1, r5
 5869 214a 3246     		mov	r2, r6
 5870 214c 3B46     		mov	r3, r7
 5871 214e FFF7FEFF 		bl	__aeabi_dcmpge
 5872              	.LVL899:
 5873 2152 0028     		cmp	r0, #0
 5874 2154 3FF42EAC 		beq	.L180
2753:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5875              		.loc 1 2753 0
 5876 2158 2646     		mov	r6, r4
 5877 215a 2F46     		mov	r7, r5
 5878 215c 2AE4     		b	.L180
 5879              	.L398:
2738:HANcoder_E407_CAN_COMM_TEST.c **** 
 5880              		.loc 1 2738 0
 5881 215e 0346     		mov	r3, r0
 5882 2160 FFF7FDBB 		b	.L179
 5883              	.LVL900:
 5884              	.L397:
 5885              	.LBB323:
 5886              	.LBB302:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5887              		.loc 1 299 0
 5888 2164 0346     		mov	r3, r0
 5889 2166 FFF7CFBB 		b	.L178
 5890              	.LVL901:
 5891              	.L395:
 5892              	.LBE302:
 5893              	.LBE323:
2648:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S115>/Switch1' */
 5894              		.loc 1 2648 0
 5895 216a AE4B     		ldr	r3, .L448
 5896 216c D3E90067 		ldrd	r6, [r3]
 5897 2170 2046     		mov	r0, r4
 5898 2172 2946     		mov	r1, r5
 5899 2174 3246     		mov	r2, r6
 5900 2176 3B46     		mov	r3, r7
 5901 2178 FFF7FEFF 		bl	__aeabi_dcmpge
 5902              	.LVL902:
 5903 217c 0028     		cmp	r0, #0
 5904 217e 3FF480AB 		beq	.L173
2650:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5905              		.loc 1 2650 0
 5906 2182 2646     		mov	r6, r4
 5907 2184 2F46     		mov	r7, r5
 5908 2186 FFF77CBB 		b	.L173
 5909              	.L394:
2635:HANcoder_E407_CAN_COMM_TEST.c **** 
 5910              		.loc 1 2635 0
 5911 218a 0346     		mov	r3, r0
 5912 218c FFF769BB 		b	.L172
 5913              	.LVL903:
 5914              	.L393:
 5915              	.LBB324:
 5916              	.LBB299:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5917              		.loc 1 299 0
 5918 2190 0346     		mov	r3, r0
 5919 2192 FFF73BBB 		b	.L171
 5920              	.LVL904:
 5921              	.L391:
 5922              	.LBE299:
 5923              	.LBE324:
2545:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S114>/Switch1' */
 5924              		.loc 1 2545 0
 5925 2196 A34B     		ldr	r3, .L448
 5926 2198 D3E90067 		ldrd	r6, [r3]
 5927 219c 2046     		mov	r0, r4
 5928 219e 2946     		mov	r1, r5
 5929 21a0 3246     		mov	r2, r6
 5930 21a2 3B46     		mov	r3, r7
 5931 21a4 FFF7FEFF 		bl	__aeabi_dcmpge
 5932              	.LVL905:
 5933 21a8 0028     		cmp	r0, #0
 5934 21aa 3FF4ECAA 		beq	.L166
2547:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5935              		.loc 1 2547 0
 5936 21ae 2646     		mov	r6, r4
 5937 21b0 2F46     		mov	r7, r5
 5938 21b2 FFF7E8BA 		b	.L166
 5939              	.L390:
2532:HANcoder_E407_CAN_COMM_TEST.c **** 
 5940              		.loc 1 2532 0
 5941 21b6 0346     		mov	r3, r0
 5942 21b8 FFF7D5BA 		b	.L165
 5943              	.LVL906:
 5944              	.L389:
 5945              	.LBB325:
 5946              	.LBB296:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5947              		.loc 1 299 0
 5948 21bc 0346     		mov	r3, r0
 5949 21be FFF7A7BA 		b	.L164
 5950              	.LVL907:
 5951              	.L387:
 5952              	.LBE296:
 5953              	.LBE325:
2428:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S113>/Switch1' */
 5954              		.loc 1 2428 0
 5955 21c2 984B     		ldr	r3, .L448
 5956 21c4 D3E90067 		ldrd	r6, [r3]
 5957 21c8 2046     		mov	r0, r4
 5958 21ca 2946     		mov	r1, r5
 5959 21cc 3246     		mov	r2, r6
 5960 21ce 3B46     		mov	r3, r7
 5961 21d0 FFF7FEFF 		bl	__aeabi_dcmpge
 5962              	.LVL908:
 5963 21d4 0028     		cmp	r0, #0
 5964 21d6 3FF44FAA 		beq	.L159
2430:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5965              		.loc 1 2430 0
 5966 21da 2646     		mov	r6, r4
 5967 21dc 2F46     		mov	r7, r5
 5968 21de FFF74BBA 		b	.L159
 5969              	.L386:
2415:HANcoder_E407_CAN_COMM_TEST.c **** 
 5970              		.loc 1 2415 0
 5971 21e2 0346     		mov	r3, r0
 5972 21e4 FFF71ABA 		b	.L158
 5973              	.LVL909:
 5974              	.L385:
 5975              	.LBB326:
 5976              	.LBB293:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 5977              		.loc 1 299 0
 5978 21e8 0346     		mov	r3, r0
 5979 21ea FFF7ECB9 		b	.L157
 5980              	.LVL910:
 5981              	.L383:
 5982              	.LBE293:
 5983              	.LBE326:
2325:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S126>/Switch1' */
 5984              		.loc 1 2325 0
 5985 21ee 8E4B     		ldr	r3, .L448+4
 5986 21f0 D3E90067 		ldrd	r6, [r3]
 5987 21f4 2046     		mov	r0, r4
 5988 21f6 2946     		mov	r1, r5
 5989 21f8 3246     		mov	r2, r6
 5990 21fa 3B46     		mov	r3, r7
 5991 21fc FFF7FEFF 		bl	__aeabi_dcmpge
 5992              	.LVL911:
 5993 2200 0028     		cmp	r0, #0
 5994 2202 3FF49DA9 		beq	.L152
2327:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 5995              		.loc 1 2327 0
 5996 2206 2646     		mov	r6, r4
 5997 2208 2F46     		mov	r7, r5
 5998 220a FFF799B9 		b	.L152
 5999              	.L382:
2312:HANcoder_E407_CAN_COMM_TEST.c **** 
 6000              		.loc 1 2312 0
 6001 220e 0346     		mov	r3, r0
 6002 2210 FFF786B9 		b	.L151
 6003              	.LVL912:
 6004              	.L381:
 6005              	.LBB327:
 6006              	.LBB290:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6007              		.loc 1 299 0
 6008 2214 0346     		mov	r3, r0
 6009 2216 FFF758B9 		b	.L150
 6010              	.LVL913:
 6011              	.L379:
 6012              	.LBE290:
 6013              	.LBE327:
2222:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S125>/Switch1' */
 6014              		.loc 1 2222 0
 6015 221a 834B     		ldr	r3, .L448+4
 6016 221c D3E90067 		ldrd	r6, [r3]
 6017 2220 2046     		mov	r0, r4
 6018 2222 2946     		mov	r1, r5
 6019 2224 3246     		mov	r2, r6
 6020 2226 3B46     		mov	r3, r7
 6021 2228 FFF7FEFF 		bl	__aeabi_dcmpge
 6022              	.LVL914:
 6023 222c 0028     		cmp	r0, #0
 6024 222e 3FF409A9 		beq	.L145
2224:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6025              		.loc 1 2224 0
 6026 2232 2646     		mov	r6, r4
 6027 2234 2F46     		mov	r7, r5
 6028 2236 FFF705B9 		b	.L145
 6029              	.L378:
2209:HANcoder_E407_CAN_COMM_TEST.c **** 
 6030              		.loc 1 2209 0
 6031 223a 0346     		mov	r3, r0
 6032 223c FFF7F2B8 		b	.L144
 6033              	.LVL915:
 6034              	.L377:
 6035              	.LBB328:
 6036              	.LBB287:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6037              		.loc 1 299 0
 6038 2240 0346     		mov	r3, r0
 6039 2242 FFF7C4B8 		b	.L143
 6040              	.LVL916:
 6041              	.L375:
 6042              	.LBE287:
 6043              	.LBE328:
2119:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S124>/Switch1' */
 6044              		.loc 1 2119 0
 6045 2246 784B     		ldr	r3, .L448+4
 6046 2248 D3E90067 		ldrd	r6, [r3]
 6047 224c 2046     		mov	r0, r4
 6048 224e 2946     		mov	r1, r5
 6049 2250 3246     		mov	r2, r6
 6050 2252 3B46     		mov	r3, r7
 6051 2254 FFF7FEFF 		bl	__aeabi_dcmpge
 6052              	.LVL917:
 6053 2258 0028     		cmp	r0, #0
 6054 225a 3FF475A8 		beq	.L138
2121:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6055              		.loc 1 2121 0
 6056 225e 2646     		mov	r6, r4
 6057 2260 2F46     		mov	r7, r5
 6058 2262 FFF771B8 		b	.L138
 6059              	.L374:
2106:HANcoder_E407_CAN_COMM_TEST.c **** 
 6060              		.loc 1 2106 0
 6061 2266 0346     		mov	r3, r0
 6062 2268 FFF75EB8 		b	.L137
 6063              	.LVL918:
 6064              	.L373:
 6065              	.LBB329:
 6066              	.LBB284:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6067              		.loc 1 299 0
 6068 226c 0346     		mov	r3, r0
 6069 226e FFF716B8 		b	.L136
 6070              	.LVL919:
 6071              	.L371:
 6072              	.LBE284:
 6073              	.LBE329:
2016:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S123>/Switch1' */
 6074              		.loc 1 2016 0
 6075 2272 6D4B     		ldr	r3, .L448+4
 6076 2274 D3E90067 		ldrd	r6, [r3]
 6077 2278 2046     		mov	r0, r4
 6078 227a 2946     		mov	r1, r5
 6079 227c 3246     		mov	r2, r6
 6080 227e 3B46     		mov	r3, r7
 6081 2280 FFF7FEFF 		bl	__aeabi_dcmpge
 6082              	.LVL920:
 6083 2284 0028     		cmp	r0, #0
 6084 2286 3EF4C7AF 		beq	.L131
2018:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6085              		.loc 1 2018 0
 6086 228a 2646     		mov	r6, r4
 6087 228c 2F46     		mov	r7, r5
 6088 228e FEF7C3BF 		b	.L131
 6089              	.L370:
2003:HANcoder_E407_CAN_COMM_TEST.c **** 
 6090              		.loc 1 2003 0
 6091 2292 0346     		mov	r3, r0
 6092 2294 FEF7B0BF 		b	.L130
 6093              	.LVL921:
 6094              	.L369:
 6095              	.LBB330:
 6096              	.LBB281:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6097              		.loc 1 299 0
 6098 2298 0346     		mov	r3, r0
 6099 229a FEF782BF 		b	.L129
 6100              	.LVL922:
 6101              	.L367:
 6102              	.LBE281:
 6103              	.LBE330:
1913:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S122>/Switch1' */
 6104              		.loc 1 1913 0
 6105 229e 624B     		ldr	r3, .L448+4
 6106 22a0 D3E90067 		ldrd	r6, [r3]
 6107 22a4 2046     		mov	r0, r4
 6108 22a6 2946     		mov	r1, r5
 6109 22a8 3246     		mov	r2, r6
 6110 22aa 3B46     		mov	r3, r7
 6111 22ac FFF7FEFF 		bl	__aeabi_dcmpge
 6112              	.LVL923:
 6113 22b0 0028     		cmp	r0, #0
 6114 22b2 3EF433AF 		beq	.L124
1915:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6115              		.loc 1 1915 0
 6116 22b6 2646     		mov	r6, r4
 6117 22b8 2F46     		mov	r7, r5
 6118 22ba FEF72FBF 		b	.L124
 6119              	.L366:
1900:HANcoder_E407_CAN_COMM_TEST.c **** 
 6120              		.loc 1 1900 0
 6121 22be 0346     		mov	r3, r0
 6122 22c0 FEF71CBF 		b	.L123
 6123              	.LVL924:
 6124              	.L365:
 6125              	.LBB331:
 6126              	.LBB278:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6127              		.loc 1 299 0
 6128 22c4 0346     		mov	r3, r0
 6129 22c6 FEF7EEBE 		b	.L122
 6130              	.LVL925:
 6131              	.L363:
 6132              	.LBE278:
 6133              	.LBE331:
1810:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S121>/Switch1' */
 6134              		.loc 1 1810 0
 6135 22ca 574B     		ldr	r3, .L448+4
 6136 22cc D3E90089 		ldrd	r8, [r3]
 6137 22d0 2046     		mov	r0, r4
 6138 22d2 2946     		mov	r1, r5
 6139 22d4 4246     		mov	r2, r8
 6140 22d6 4B46     		mov	r3, r9
 6141 22d8 FFF7FEFF 		bl	__aeabi_dcmpge
 6142              	.LVL926:
 6143 22dc 0028     		cmp	r0, #0
 6144 22de 3EF49FAE 		beq	.L117
1812:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6145              		.loc 1 1812 0
 6146 22e2 A046     		mov	r8, r4
 6147 22e4 A946     		mov	r9, r5
 6148 22e6 FEF79BBE 		b	.L117
 6149              	.LVL927:
 6150              	.L362:
1797:HANcoder_E407_CAN_COMM_TEST.c **** 
 6151              		.loc 1 1797 0
 6152 22ea 0346     		mov	r3, r0
 6153 22ec FEF788BE 		b	.L116
 6154              	.LVL928:
 6155              	.L361:
 6156              	.LBB332:
 6157              	.LBB275:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6158              		.loc 1 299 0
 6159 22f0 0346     		mov	r3, r0
 6160 22f2 FEF75ABE 		b	.L115
 6161              	.LVL929:
 6162              	.L359:
 6163              	.LBE275:
 6164              	.LBE332:
1707:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S120>/Switch1' */
 6165              		.loc 1 1707 0
 6166 22f6 4C4B     		ldr	r3, .L448+4
 6167 22f8 D3E90089 		ldrd	r8, [r3]
 6168 22fc 2046     		mov	r0, r4
 6169 22fe 2946     		mov	r1, r5
 6170 2300 4246     		mov	r2, r8
 6171 2302 4B46     		mov	r3, r9
 6172 2304 FFF7FEFF 		bl	__aeabi_dcmpge
 6173              	.LVL930:
 6174 2308 0028     		cmp	r0, #0
 6175 230a 3EF40BAE 		beq	.L110
1709:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6176              		.loc 1 1709 0
 6177 230e A046     		mov	r8, r4
 6178 2310 A946     		mov	r9, r5
 6179 2312 FEF707BE 		b	.L110
 6180              	.L358:
1694:HANcoder_E407_CAN_COMM_TEST.c **** 
 6181              		.loc 1 1694 0
 6182 2316 0346     		mov	r3, r0
 6183 2318 FEF7CEBD 		b	.L109
 6184              	.LVL931:
 6185              	.L357:
 6186              	.LBB333:
 6187              	.LBB272:
 299:HANcoder_E407_CAN_COMM_TEST.c **** }
 6188              		.loc 1 299 0
 6189 231c 0346     		mov	r3, r0
 6190 231e FEF7A0BD 		b	.L108
 6191              	.LVL932:
 6192              	.L355:
 6193              	.LBE272:
 6194              	.LBE333:
1590:HANcoder_E407_CAN_COMM_TEST.c ****         /* Switch: '<S112>/Switch1' */
 6195              		.loc 1 1590 0
 6196 2322 414B     		ldr	r3, .L448+4
 6197 2324 D3E90045 		ldrd	r4, [r3]
 6198 2328 3046     		mov	r0, r6
 6199 232a 3946     		mov	r1, r7
 6200 232c 2246     		mov	r2, r4
 6201 232e 2B46     		mov	r3, r5
 6202 2330 FFF7FEFF 		bl	__aeabi_dcmpge
 6203              	.LVL933:
 6204 2334 0028     		cmp	r0, #0
 6205 2336 3EF446AD 		beq	.L103
1592:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6206              		.loc 1 1592 0
 6207 233a 3446     		mov	r4, r6
 6208 233c 3D46     		mov	r5, r7
 6209 233e FEF742BD 		b	.L103
 6210              	.L335:
 365:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6211              		.loc 1 365 0
 6212 2342 0123     		movs	r3, #1
 6213 2344 CB72     		strb	r3, [r1, #11]
 6214 2346 FDF7E0BE 		b	.L15
 6215              	.LVL934:
 6216              	.L98:
1551:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6217              		.loc 1 1551 0
 6218 234a 2946     		mov	r1, r5
 6219 234c FFF7FEFF 		bl	__aeabi_dmul
 6220              	.LVL935:
 6221 2350 4B46     		mov	r3, r9
 6222 2352 4246     		mov	r2, r8
 6223 2354 FFF7FEFF 		bl	__aeabi_dadd
 6224              	.LVL936:
 6225 2358 344B     		ldr	r3, .L448+8
 6226 235a C3E90001 		strd	r0, [r3]
 6227 235e FEF708BD 		b	.L99
 6228              	.LVL937:
 6229              	.L93:
1485:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6230              		.loc 1 1485 0
 6231 2362 2946     		mov	r1, r5
 6232 2364 FFF7FEFF 		bl	__aeabi_dmul
 6233              	.LVL938:
 6234 2368 4B46     		mov	r3, r9
 6235 236a 4246     		mov	r2, r8
 6236 236c FFF7FEFF 		bl	__aeabi_dadd
 6237              	.LVL939:
 6238 2370 2F4B     		ldr	r3, .L448+12
 6239 2372 C3E90001 		strd	r0, [r3]
 6240 2376 FEF7A8BC 		b	.L94
 6241              	.LVL940:
 6242              	.L31:
 627:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6243              		.loc 1 627 0
 6244 237a 2946     		mov	r1, r5
 6245 237c FFF7FEFF 		bl	__aeabi_dmul
 6246              	.LVL941:
 6247 2380 3B46     		mov	r3, r7
 6248 2382 3246     		mov	r2, r6
 6249 2384 FFF7FEFF 		bl	__aeabi_dadd
 6250              	.LVL942:
 6251 2388 2A4B     		ldr	r3, .L448+16
 6252 238a C3E90001 		strd	r0, [r3]
 6253 238e FDF7FCBF 		b	.L32
 6254              	.LVL943:
 6255              	.L26:
 561:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6256              		.loc 1 561 0
 6257 2392 2946     		mov	r1, r5
 6258 2394 FFF7FEFF 		bl	__aeabi_dmul
 6259              	.LVL944:
 6260 2398 3B46     		mov	r3, r7
 6261 239a 3246     		mov	r2, r6
 6262 239c FFF7FEFF 		bl	__aeabi_dadd
 6263              	.LVL945:
 6264 23a0 254B     		ldr	r3, .L448+20
 6265 23a2 C3E90001 		strd	r0, [r3]
 6266 23a6 FDF79ABF 		b	.L27
 6267              	.LVL946:
 6268              	.L51:
 891:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6269              		.loc 1 891 0
 6270 23aa 2946     		mov	r1, r5
 6271 23ac FFF7FEFF 		bl	__aeabi_dmul
 6272              	.LVL947:
 6273 23b0 4B46     		mov	r3, r9
 6274 23b2 4246     		mov	r2, r8
 6275 23b4 FFF7FEFF 		bl	__aeabi_dadd
 6276              	.LVL948:
 6277 23b8 204B     		ldr	r3, .L448+24
 6278 23ba C3E90001 		strd	r0, [r3]
 6279 23be FEF762B9 		b	.L52
 6280              	.LVL949:
 6281              	.L46:
 825:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6282              		.loc 1 825 0
 6283 23c2 2946     		mov	r1, r5
 6284 23c4 FFF7FEFF 		bl	__aeabi_dmul
 6285              	.LVL950:
 6286 23c8 4B46     		mov	r3, r9
 6287 23ca 4246     		mov	r2, r8
 6288 23cc FFF7FEFF 		bl	__aeabi_dadd
 6289              	.LVL951:
 6290 23d0 1B4B     		ldr	r3, .L448+28
 6291 23d2 C3E90001 		strd	r0, [r3]
 6292 23d6 FEF702B9 		b	.L47
 6293              	.LVL952:
 6294              	.L41:
 759:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6295              		.loc 1 759 0
 6296 23da 2946     		mov	r1, r5
 6297 23dc FFF7FEFF 		bl	__aeabi_dmul
 6298              	.LVL953:
 6299 23e0 3B46     		mov	r3, r7
 6300 23e2 3246     		mov	r2, r6
 6301 23e4 FFF7FEFF 		bl	__aeabi_dadd
 6302              	.LVL954:
 6303 23e8 164B     		ldr	r3, .L448+32
 6304 23ea C3E90001 		strd	r0, [r3]
 6305 23ee FEF7A2B8 		b	.L42
 6306              	.LVL955:
 6307              	.L36:
 693:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6308              		.loc 1 693 0
 6309 23f2 2946     		mov	r1, r5
 6310 23f4 FFF7FEFF 		bl	__aeabi_dmul
 6311              	.LVL956:
 6312 23f8 3B46     		mov	r3, r7
 6313 23fa 3246     		mov	r2, r6
 6314 23fc FFF7FEFF 		bl	__aeabi_dadd
 6315              	.LVL957:
 6316 2400 114B     		ldr	r3, .L448+36
 6317 2402 C3E90001 		strd	r0, [r3]
 6318 2406 FEF742B8 		b	.L37
 6319              	.LVL958:
 6320              	.L88:
1419:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6321              		.loc 1 1419 0
 6322 240a 2946     		mov	r1, r5
 6323 240c FFF7FEFF 		bl	__aeabi_dmul
 6324              	.LVL959:
 6325 2410 4B46     		mov	r3, r9
 6326 2412 4246     		mov	r2, r8
 6327 2414 FFF7FEFF 		bl	__aeabi_dadd
 6328              	.LVL960:
 6329 2418 0C4B     		ldr	r3, .L448+40
 6330 241a C3E90001 		strd	r0, [r3]
 6331 241e FEF700BC 		b	.L89
 6332              	.L449:
 6333 2422 00BF     		.align	2
 6334              	.L448:
 6335 2424 00000000 		.word	.LANCHOR18
 6336 2428 00000000 		.word	.LANCHOR8
 6337 242c 00000000 		.word	Rx_Buffer_6_CAN2
 6338 2430 00000000 		.word	Rx_Buffer_8_CAN2
 6339 2434 00000000 		.word	Rx_Buffer_2_CAN1
 6340 2438 00000000 		.word	Rx_Buffer_8_CAN1
 6341 243c 00000000 		.word	Rx_Buffer_6_CAN1
 6342 2440 00000000 		.word	Rx_Buffer_5_CAN1
 6343 2444 00000000 		.word	Rx_Buffer_4_CAN1
 6344 2448 00000000 		.word	Rx_Buffer_3_CAN1
 6345 244c 00000000 		.word	Rx_Buffer_1_CAN2
 6346              	.LVL961:
 6347              	.L83:
1353:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6348              		.loc 1 1353 0
 6349 2450 2946     		mov	r1, r5
 6350 2452 FFF7FEFF 		bl	__aeabi_dmul
 6351              	.LVL962:
 6352 2456 3B46     		mov	r3, r7
 6353 2458 3246     		mov	r2, r6
 6354 245a FFF7FEFF 		bl	__aeabi_dadd
 6355              	.LVL963:
 6356 245e B24B     		ldr	r3, .L450
 6357 2460 C3E90001 		strd	r0, [r3]
 6358 2464 FEF786BB 		b	.L84
 6359              	.LVL964:
 6360              	.L78:
1287:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6361              		.loc 1 1287 0
 6362 2468 2946     		mov	r1, r5
 6363 246a FFF7FEFF 		bl	__aeabi_dmul
 6364              	.LVL965:
 6365 246e 3B46     		mov	r3, r7
 6366 2470 3246     		mov	r2, r6
 6367 2472 FFF7FEFF 		bl	__aeabi_dadd
 6368              	.LVL966:
 6369 2476 AD4B     		ldr	r3, .L450+4
 6370 2478 C3E90001 		strd	r0, [r3]
 6371 247c FEF714BB 		b	.L79
 6372              	.LVL967:
 6373              	.L73:
1221:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6374              		.loc 1 1221 0
 6375 2480 2946     		mov	r1, r5
 6376 2482 FFF7FEFF 		bl	__aeabi_dmul
 6377              	.LVL968:
 6378 2486 3B46     		mov	r3, r7
 6379 2488 3246     		mov	r2, r6
 6380 248a FFF7FEFF 		bl	__aeabi_dadd
 6381              	.LVL969:
 6382 248e A84B     		ldr	r3, .L450+8
 6383 2490 C3E90001 		strd	r0, [r3]
 6384 2494 FEF7B1BA 		b	.L74
 6385              	.LVL970:
 6386              	.L68:
1155:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6387              		.loc 1 1155 0
 6388 2498 2946     		mov	r1, r5
 6389 249a FFF7FEFF 		bl	__aeabi_dmul
 6390              	.LVL971:
 6391 249e 3B46     		mov	r3, r7
 6392 24a0 3246     		mov	r2, r6
 6393 24a2 FFF7FEFF 		bl	__aeabi_dadd
 6394              	.LVL972:
 6395 24a6 A34B     		ldr	r3, .L450+12
 6396 24a8 C3E90001 		strd	r0, [r3]
 6397 24ac FEF74EBA 		b	.L69
 6398              	.LVL973:
 6399              	.L63:
1089:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6400              		.loc 1 1089 0
 6401 24b0 2946     		mov	r1, r5
 6402 24b2 FFF7FEFF 		bl	__aeabi_dmul
 6403              	.LVL974:
 6404 24b6 3B46     		mov	r3, r7
 6405 24b8 3246     		mov	r2, r6
 6406 24ba FFF7FEFF 		bl	__aeabi_dadd
 6407              	.LVL975:
 6408 24be 9E4B     		ldr	r3, .L450+16
 6409 24c0 C3E90001 		strd	r0, [r3]
 6410 24c4 FEF7EBB9 		b	.L64
 6411              	.LVL976:
 6412              	.L56:
 957:HANcoder_E407_CAN_COMM_TEST.c ****       }
 6413              		.loc 1 957 0
 6414 24c8 2946     		mov	r1, r5
 6415 24ca FFF7FEFF 		bl	__aeabi_dmul
 6416              	.LVL977:
 6417 24ce 4B46     		mov	r3, r9
 6418 24d0 4246     		mov	r2, r8
 6419 24d2 FFF7FEFF 		bl	__aeabi_dadd
 6420              	.LVL978:
 6421 24d6 994B     		ldr	r3, .L450+20
 6422 24d8 C3E90001 		strd	r0, [r3]
 6423 24dc FEF727B9 		b	.L57
 6424              	.LVL979:
 6425              	.L350:
1256:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6426              		.loc 1 1256 0
 6427 24e0 3046     		mov	r0, r6
 6428 24e2 3946     		mov	r1, r7
 6429 24e4 FFF7FEFF 		bl	ceil
 6430              	.LVL980:
 6431 24e8 0646     		mov	r6, r0
 6432              	.LVL981:
 6433 24ea 0F46     		mov	r7, r1
 6434              	.LVL982:
 6435 24ec FEF7B2BA 		b	.L77
 6436              	.L349:
1190:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6437              		.loc 1 1190 0
 6438 24f0 3046     		mov	r0, r6
 6439 24f2 3946     		mov	r1, r7
 6440 24f4 FFF7FEFF 		bl	ceil
 6441              	.LVL983:
 6442 24f8 0646     		mov	r6, r0
 6443              	.LVL984:
 6444 24fa 0F46     		mov	r7, r1
 6445              	.LVL985:
 6446 24fc FEF753BA 		b	.L72
 6447              	.L348:
1124:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6448              		.loc 1 1124 0
 6449 2500 3046     		mov	r0, r6
 6450 2502 3946     		mov	r1, r7
 6451 2504 FFF7FEFF 		bl	ceil
 6452              	.LVL986:
 6453 2508 0646     		mov	r6, r0
 6454              	.LVL987:
 6455 250a 0F46     		mov	r7, r1
 6456              	.LVL988:
 6457 250c FEF7F4B9 		b	.L67
 6458              	.LVL989:
 6459              	.L345:
 926:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6460              		.loc 1 926 0
 6461 2510 4046     		mov	r0, r8
 6462 2512 4946     		mov	r1, r9
 6463 2514 FFF7FEFF 		bl	ceil
 6464              	.LVL990:
 6465 2518 8046     		mov	r8, r0
 6466              	.LVL991:
 6467 251a 8946     		mov	r9, r1
 6468              	.LVL992:
 6469 251c FEF7DEB8 		b	.L55
 6470              	.LVL993:
 6471              	.L347:
1045:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6472              		.loc 1 1045 0
 6473 2520 3046     		mov	r0, r6
 6474 2522 3946     		mov	r1, r7
 6475 2524 FFF7FEFF 		bl	ceil
 6476              	.LVL994:
 6477 2528 0646     		mov	r6, r0
 6478              	.LVL995:
 6479 252a 0F46     		mov	r7, r1
 6480              	.LVL996:
 6481 252c FEF781B9 		b	.L62
 6482              	.LVL997:
 6483              	.L346:
 6484 2530 834B     		ldr	r3, .L450+24
 6485 2532 844A     		ldr	r2, .L450+28
 6486 2534 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6487 2536 844B     		ldr	r3, .L450+32
 6488 2538 0D93     		str	r3, [sp, #52]
 6489 253a 844B     		ldr	r3, .L450+36
 6490 253c 0E93     		str	r3, [sp, #56]
 6491 253e 844B     		ldr	r3, .L450+40
 6492 2540 0F93     		str	r3, [sp, #60]
 6493 2542 844B     		ldr	r3, .L450+44
 6494 2544 0C93     		str	r3, [sp, #48]
 6495 2546 844B     		ldr	r3, .L450+48
 6496 2548 0893     		str	r3, [sp, #32]
 6497 254a 844B     		ldr	r3, .L450+52
 6498 254c 0B92     		str	r2, [sp, #44]
 6499 254e 0693     		str	r3, [sp, #24]
 6500 2550 FEF71EB9 		b	.L59
 6501              	.LVL998:
 6502              	.L341:
 662:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6503              		.loc 1 662 0
 6504 2554 3046     		mov	r0, r6
 6505 2556 3946     		mov	r1, r7
 6506 2558 FFF7FEFF 		bl	ceil
 6507              	.LVL999:
 6508 255c 0646     		mov	r6, r0
 6509              	.LVL1000:
 6510 255e 0F46     		mov	r7, r1
 6511              	.LVL1001:
 6512 2560 FDF76CBF 		b	.L35
 6513              	.LVL1002:
 6514              	.L353:
1454:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6515              		.loc 1 1454 0
 6516 2564 4046     		mov	r0, r8
 6517 2566 4946     		mov	r1, r9
 6518 2568 FFF7FEFF 		bl	ceil
 6519              	.LVL1003:
 6520 256c 8046     		mov	r8, r0
 6521              	.LVL1004:
 6522 256e 8946     		mov	r9, r1
 6523              	.LVL1005:
 6524 2570 FEF782BB 		b	.L92
 6525              	.L352:
1388:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6526              		.loc 1 1388 0
 6527 2574 4046     		mov	r0, r8
 6528 2576 4946     		mov	r1, r9
 6529 2578 FFF7FEFF 		bl	ceil
 6530              	.LVL1006:
 6531 257c 8046     		mov	r8, r0
 6532              	.LVL1007:
 6533 257e 8946     		mov	r9, r1
 6534              	.LVL1008:
 6535 2580 FEF725BB 		b	.L87
 6536              	.LVL1009:
 6537              	.L351:
1322:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6538              		.loc 1 1322 0
 6539 2584 3046     		mov	r0, r6
 6540 2586 3946     		mov	r1, r7
 6541 2588 FFF7FEFF 		bl	ceil
 6542              	.LVL1010:
 6543 258c 0646     		mov	r6, r0
 6544              	.LVL1011:
 6545 258e 0F46     		mov	r7, r1
 6546              	.LVL1012:
 6547 2590 FEF7B7BA 		b	.L82
 6548              	.L339:
 530:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6549              		.loc 1 530 0
 6550 2594 3046     		mov	r0, r6
 6551 2596 3946     		mov	r1, r7
 6552 2598 FFF7FEFF 		bl	ceil
 6553              	.LVL1013:
 6554 259c 0646     		mov	r6, r0
 6555              	.LVL1014:
 6556 259e 0F46     		mov	r7, r1
 6557              	.LVL1015:
 6558 25a0 FDF773BE 		b	.L25
 6559              	.LVL1016:
 6560              	.L344:
 860:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6561              		.loc 1 860 0
 6562 25a4 4046     		mov	r0, r8
 6563 25a6 4946     		mov	r1, r9
 6564 25a8 FFF7FEFF 		bl	ceil
 6565              	.LVL1017:
 6566 25ac 8046     		mov	r8, r0
 6567              	.LVL1018:
 6568 25ae 8946     		mov	r9, r1
 6569              	.LVL1019:
 6570 25b0 FEF740B8 		b	.L50
 6571              	.L343:
 794:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6572              		.loc 1 794 0
 6573 25b4 4046     		mov	r0, r8
 6574 25b6 4946     		mov	r1, r9
 6575 25b8 FFF7FEFF 		bl	ceil
 6576              	.LVL1020:
 6577 25bc 8046     		mov	r8, r0
 6578              	.LVL1021:
 6579 25be 8946     		mov	r9, r1
 6580              	.LVL1022:
 6581 25c0 FDF7E4BF 		b	.L45
 6582              	.LVL1023:
 6583              	.L342:
 728:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6584              		.loc 1 728 0
 6585 25c4 3046     		mov	r0, r6
 6586 25c6 3946     		mov	r1, r7
 6587 25c8 FFF7FEFF 		bl	ceil
 6588              	.LVL1024:
 6589 25cc 0646     		mov	r6, r0
 6590              	.LVL1025:
 6591 25ce 0F46     		mov	r7, r1
 6592              	.LVL1026:
 6593 25d0 FDF788BF 		b	.L40
 6594              	.LVL1027:
 6595              	.L337:
 451:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6596              		.loc 1 451 0
 6597 25d4 3046     		mov	r0, r6
 6598 25d6 3946     		mov	r1, r7
 6599 25d8 FFF7FEFF 		bl	ceil
 6600              	.LVL1028:
 6601 25dc 0646     		mov	r6, r0
 6602              	.LVL1029:
 6603 25de 0F46     		mov	r7, r1
 6604              	.LVL1030:
 6605 25e0 FDF7F2BD 		b	.L20
 6606              	.LVL1031:
 6607              	.L336:
 6608 25e4 5E4A     		ldr	r2, .L450+56
 6609 25e6 0D92     		str	r2, [sp, #52]
 6610 25e8 5E4A     		ldr	r2, .L450+60
 6611 25ea 0E92     		str	r2, [sp, #56]
 6612 25ec 5E4A     		ldr	r2, .L450+64
 6613 25ee 0F92     		str	r2, [sp, #60]
 6614 25f0 5E4A     		ldr	r2, .L450+68
 6615 25f2 0B92     		str	r2, [sp, #44]
 6616 25f4 5E4A     		ldr	r2, .L450+72
 6617 25f6 5F4B     		ldr	r3, .L450+76
 6618 25f8 0C92     		str	r2, [sp, #48]
 6619 25fa 5F4A     		ldr	r2, .L450+80
 6620 25fc 0892     		str	r2, [sp, #32]
 6621 25fe 5F4A     		ldr	r2, .L450+84
 6622 2600 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6623 2602 0692     		str	r2, [sp, #24]
 6624 2604 FDF7B2BD 		b	.L17
 6625              	.LVL1032:
 6626              	.L354:
1520:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6627              		.loc 1 1520 0
 6628 2608 4046     		mov	r0, r8
 6629 260a 4946     		mov	r1, r9
 6630 260c FFF7FEFF 		bl	ceil
 6631              	.LVL1033:
 6632 2610 8046     		mov	r8, r0
 6633              	.LVL1034:
 6634 2612 8946     		mov	r9, r1
 6635              	.LVL1035:
 6636 2614 FEF784BB 		b	.L97
 6637              	.LVL1036:
 6638              	.L340:
 596:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6639              		.loc 1 596 0
 6640 2618 3046     		mov	r0, r6
 6641 261a 3946     		mov	r1, r7
 6642 261c FFF7FEFF 		bl	ceil
 6643              	.LVL1037:
 6644 2620 0646     		mov	r6, r0
 6645              	.LVL1038:
 6646 2622 0F46     		mov	r7, r1
 6647              	.LVL1039:
 6648 2624 FDF787BE 		b	.L30
 6649              	.LVL1040:
 6650              	.L356:
1655:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6651              		.loc 1 1655 0
 6652 2628 3046     		mov	r0, r6
 6653 262a 3946     		mov	r1, r7
 6654 262c FFF7FEFF 		bl	ceil
 6655              	.LVL1041:
 6656 2630 0646     		mov	r6, r0
 6657              	.LVL1042:
 6658 2632 0F46     		mov	r7, r1
 6659              	.LVL1043:
 6660 2634 FEF707BC 		b	.L107
 6661              	.LVL1044:
 6662              	.L416:
3214:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6663              		.loc 1 3214 0
 6664 2638 2046     		mov	r0, r4
 6665 263a 2946     		mov	r1, r5
 6666 263c FFF7FEFF 		bl	ceil
 6667              	.LVL1045:
 6668 2640 0446     		mov	r4, r0
 6669              	.LVL1046:
 6670 2642 0D46     		mov	r5, r1
 6671              	.LVL1047:
 6672 2644 FFF7FFBB 		b	.L212
 6673              	.LVL1048:
 6674              	.L412:
3111:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6675              		.loc 1 3111 0
 6676 2648 2046     		mov	r0, r4
 6677 264a 2946     		mov	r1, r5
 6678 264c FFF7FEFF 		bl	ceil
 6679              	.LVL1049:
 6680 2650 0446     		mov	r4, r0
 6681              	.LVL1050:
 6682 2652 0D46     		mov	r5, r1
 6683              	.LVL1051:
 6684 2654 FFF75FBB 		b	.L205
 6685              	.L408:
3008:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6686              		.loc 1 3008 0
 6687 2658 2046     		mov	r0, r4
 6688 265a 2946     		mov	r1, r5
 6689 265c FFF7FEFF 		bl	ceil
 6690              	.LVL1052:
 6691 2660 0446     		mov	r4, r0
 6692              	.LVL1053:
 6693 2662 0D46     		mov	r5, r1
 6694              	.LVL1054:
 6695 2664 FFF7D9BA 		b	.L198
 6696              	.L404:
2905:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6697              		.loc 1 2905 0
 6698 2668 2046     		mov	r0, r4
 6699 266a 2946     		mov	r1, r5
 6700 266c FFF7FEFF 		bl	ceil
 6701              	.LVL1055:
 6702 2670 0446     		mov	r4, r0
 6703              	.LVL1056:
 6704 2672 0D46     		mov	r5, r1
 6705              	.LVL1057:
 6706 2674 FFF753BA 		b	.L191
 6707              	.L400:
2802:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6708              		.loc 1 2802 0
 6709 2678 2046     		mov	r0, r4
 6710 267a 2946     		mov	r1, r5
 6711 267c FFF7FEFF 		bl	ceil
 6712              	.LVL1058:
 6713 2680 0446     		mov	r4, r0
 6714              	.LVL1059:
 6715 2682 0D46     		mov	r5, r1
 6716              	.LVL1060:
 6717 2684 FFF7CDB9 		b	.L184
 6718              	.L396:
2699:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6719              		.loc 1 2699 0
 6720 2688 2046     		mov	r0, r4
 6721 268a 2946     		mov	r1, r5
 6722 268c FFF7FEFF 		bl	ceil
 6723              	.LVL1061:
 6724 2690 0446     		mov	r4, r0
 6725              	.LVL1062:
 6726 2692 0D46     		mov	r5, r1
 6727              	.LVL1063:
 6728 2694 FFF72CB9 		b	.L177
 6729              	.L392:
2596:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6730              		.loc 1 2596 0
 6731 2698 2046     		mov	r0, r4
 6732 269a 2946     		mov	r1, r5
 6733 269c FFF7FEFF 		bl	ceil
 6734              	.LVL1064:
 6735 26a0 0446     		mov	r4, r0
 6736              	.LVL1065:
 6737 26a2 0D46     		mov	r5, r1
 6738              	.LVL1066:
 6739 26a4 FFF7A6B8 		b	.L170
 6740              	.L388:
2493:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6741              		.loc 1 2493 0
 6742 26a8 2046     		mov	r0, r4
 6743 26aa 2946     		mov	r1, r5
 6744 26ac FFF7FEFF 		bl	ceil
 6745              	.LVL1067:
 6746 26b0 0446     		mov	r4, r0
 6747              	.LVL1068:
 6748 26b2 0D46     		mov	r5, r1
 6749              	.LVL1069:
 6750 26b4 FFF720B8 		b	.L163
 6751              	.LVL1070:
 6752              	.L384:
2376:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6753              		.loc 1 2376 0
 6754 26b8 2046     		mov	r0, r4
 6755 26ba 2946     		mov	r1, r5
 6756 26bc FFF7FEFF 		bl	ceil
 6757              	.LVL1071:
 6758 26c0 0446     		mov	r4, r0
 6759              	.LVL1072:
 6760 26c2 0D46     		mov	r5, r1
 6761              	.LVL1073:
 6762 26c4 FEF773BF 		b	.L156
 6763              	.LVL1074:
 6764              	.L380:
2273:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6765              		.loc 1 2273 0
 6766 26c8 2046     		mov	r0, r4
 6767 26ca 2946     		mov	r1, r5
 6768 26cc FFF7FEFF 		bl	ceil
 6769              	.LVL1075:
 6770 26d0 0446     		mov	r4, r0
 6771              	.LVL1076:
 6772 26d2 0D46     		mov	r5, r1
 6773              	.LVL1077:
 6774 26d4 FEF7EDBE 		b	.L149
 6775              	.L376:
2170:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6776              		.loc 1 2170 0
 6777 26d8 2046     		mov	r0, r4
 6778 26da 2946     		mov	r1, r5
 6779 26dc FFF7FEFF 		bl	ceil
 6780              	.LVL1078:
 6781 26e0 0446     		mov	r4, r0
 6782              	.LVL1079:
 6783 26e2 0D46     		mov	r5, r1
 6784              	.LVL1080:
 6785 26e4 FEF767BE 		b	.L142
 6786              	.L372:
2067:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6787              		.loc 1 2067 0
 6788 26e8 2046     		mov	r0, r4
 6789 26ea 2946     		mov	r1, r5
 6790 26ec FFF7FEFF 		bl	ceil
 6791              	.LVL1081:
 6792 26f0 0446     		mov	r4, r0
 6793              	.LVL1082:
 6794 26f2 0D46     		mov	r5, r1
 6795              	.LVL1083:
 6796 26f4 FEF7C7BD 		b	.L135
 6797              	.L368:
1964:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6798              		.loc 1 1964 0
 6799 26f8 2046     		mov	r0, r4
 6800 26fa 2946     		mov	r1, r5
 6801 26fc FFF7FEFF 		bl	ceil
 6802              	.LVL1084:
 6803 2700 0446     		mov	r4, r0
 6804              	.LVL1085:
 6805 2702 0D46     		mov	r5, r1
 6806              	.LVL1086:
 6807 2704 FEF741BD 		b	.L128
 6808              	.LVL1087:
 6809              	.L364:
1861:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6810              		.loc 1 1861 0
 6811 2708 2046     		mov	r0, r4
 6812 270a 2946     		mov	r1, r5
 6813 270c FFF7FEFF 		bl	ceil
 6814              	.LVL1088:
 6815 2710 0446     		mov	r4, r0
 6816              	.LVL1089:
 6817 2712 0D46     		mov	r5, r1
 6818              	.LVL1090:
 6819 2714 FEF7BBBC 		b	.L121
 6820              	.L360:
1758:HANcoder_E407_CAN_COMM_TEST.c ****       } else {
 6821              		.loc 1 1758 0
 6822 2718 2046     		mov	r0, r4
 6823 271a 2946     		mov	r1, r5
 6824 271c FFF7FEFF 		bl	ceil
 6825              	.LVL1091:
 6826 2720 0446     		mov	r4, r0
 6827              	.LVL1092:
 6828 2722 0D46     		mov	r5, r1
 6829              	.LVL1093:
 6830 2724 FEF735BC 		b	.L114
 6831              	.L451:
 6832              		.align	2
 6833              	.L450:
 6834 2728 00000000 		.word	Rx_Buffer_7_CAN2
 6835 272c 00000000 		.word	Rx_Buffer_2_CAN2
 6836 2730 00000000 		.word	Rx_Buffer_3_CAN2
 6837 2734 00000000 		.word	Rx_Buffer_4_CAN2
 6838 2738 00000000 		.word	Rx_Buffer_5_CAN2
 6839 273c 00000000 		.word	Rx_Buffer_7_CAN1
 6840 2740 00000000 		.word	Rx_coded5_CAN2
 6841 2744 00000000 		.word	Rx_coded1_CAN2
 6842 2748 00000000 		.word	Rx_coded2_CAN2
 6843 274c 00000000 		.word	Rx_coded3_CAN2
 6844 2750 00000000 		.word	Rx_coded4_CAN2
 6845 2754 00000000 		.word	Rx_coded6_CAN2
 6846 2758 00000000 		.word	Rx_coded7_CAN2
 6847 275c 00000000 		.word	Rx_coded8_CAN2
 6848 2760 00000000 		.word	Rx_coded2_CAN1
 6849 2764 00000000 		.word	Rx_coded3_CAN1
 6850 2768 00000000 		.word	Rx_coded4_CAN1
 6851 276c 00000000 		.word	Rx_coded5_CAN1
 6852 2770 00000000 		.word	Rx_coded6_CAN1
 6853 2774 00000000 		.word	Rx_coded1_CAN1
 6854 2778 00000000 		.word	Rx_coded7_CAN1
 6855 277c 00000000 		.word	Rx_coded8_CAN1
 6856              		.cfi_endproc
 6857              	.LFE116:
 6859              		.section	.text.HANcoder_E407_CAN_COMM_TEST_initialize,"ax",%progbits
 6860              		.align	2
 6861              		.global	HANcoder_E407_CAN_COMM_TEST_initialize
 6862              		.thumb
 6863              		.thumb_func
 6865              	HANcoder_E407_CAN_COMM_TEST_initialize:
 6866              	.LFB117:
3390:HANcoder_E407_CAN_COMM_TEST.c **** 
3391:HANcoder_E407_CAN_COMM_TEST.c **** /* Model initialize function */
3392:HANcoder_E407_CAN_COMM_TEST.c **** void HANcoder_E407_CAN_COMM_TEST_initialize(void)
3393:HANcoder_E407_CAN_COMM_TEST.c **** {
 6867              		.loc 1 3393 0
 6868              		.cfi_startproc
 6869              		@ args = 0, pretend = 0, frame = 24
 6870              		@ frame_needed = 0, uses_anonymous_args = 0
 6871 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6872              		.cfi_def_cfa_offset 20
 6873              		.cfi_offset 4, -20
 6874              		.cfi_offset 5, -16
 6875              		.cfi_offset 6, -12
 6876              		.cfi_offset 7, -8
 6877              		.cfi_offset 14, -4
3394:HANcoder_E407_CAN_COMM_TEST.c ****   /* Registration code */
3395:HANcoder_E407_CAN_COMM_TEST.c **** 
3396:HANcoder_E407_CAN_COMM_TEST.c ****   /* block I/O */
3397:HANcoder_E407_CAN_COMM_TEST.c **** 
3398:HANcoder_E407_CAN_COMM_TEST.c ****   /* exported global signals */
3399:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_TXCAN1 = 24U;
3400:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_TXCAN2 = 24U;
3401:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_RXCAN1 = 24U;
 6878              		.loc 1 3401 0
 6879 0002 324D     		ldr	r5, .L462
3402:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_RXCAN2 = 24U;
 6880              		.loc 1 3402 0
 6881 0004 324C     		ldr	r4, .L462+4
3399:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_TXCAN2 = 24U;
 6882              		.loc 1 3399 0
 6883 0006 334F     		ldr	r7, .L462+8
3400:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_RXCAN1 = 24U;
 6884              		.loc 1 3400 0
 6885 0008 334E     		ldr	r6, .L462+12
3393:HANcoder_E407_CAN_COMM_TEST.c ****   /* Registration code */
 6886              		.loc 1 3393 0
 6887 000a 87B0     		sub	sp, sp, #28
 6888              		.cfi_def_cfa_offset 48
3399:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_TXCAN2 = 24U;
 6889              		.loc 1 3399 0
 6890 000c 1823     		movs	r3, #24
 6891              	.LBB334:
 6892              	.LBB335:
3403:HANcoder_E407_CAN_COMM_TEST.c **** 
3404:HANcoder_E407_CAN_COMM_TEST.c ****   {
3405:HANcoder_E407_CAN_COMM_TEST.c ****     uint32_T constant_ID_RXCAN1_tmp;
3406:HANcoder_E407_CAN_COMM_TEST.c **** 
3407:HANcoder_E407_CAN_COMM_TEST.c ****     {
3408:HANcoder_E407_CAN_COMM_TEST.c ****       /* user code (Start function Header) */
3409:HANcoder_E407_CAN_COMM_TEST.c ****       uint8_t canResult1;
3410:HANcoder_E407_CAN_COMM_TEST.c ****       tCanFilter canFilter1;
3411:HANcoder_E407_CAN_COMM_TEST.c ****       uint8_t canResult2;
3412:HANcoder_E407_CAN_COMM_TEST.c ****       tCanFilter canFilter2;
3413:HANcoder_E407_CAN_COMM_TEST.c **** 
3414:HANcoder_E407_CAN_COMM_TEST.c ****       /* user code (Start function Body) */
3415:HANcoder_E407_CAN_COMM_TEST.c **** 
3416:HANcoder_E407_CAN_COMM_TEST.c ****       /* initialize the CAN driver. */
3417:HANcoder_E407_CAN_COMM_TEST.c ****       CanInit(64, 8);
 6893              		.loc 1 3417 0
 6894 000e 0821     		movs	r1, #8
 6895 0010 4020     		movs	r0, #64
 6896              	.LBE335:
 6897              	.LBE334:
3399:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_TXCAN2 = 24U;
 6898              		.loc 1 3399 0
 6899 0012 3B60     		str	r3, [r7]
3400:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_RXCAN1 = 24U;
 6900              		.loc 1 3400 0
 6901 0014 3360     		str	r3, [r6]
3401:HANcoder_E407_CAN_COMM_TEST.c ****   constant_ID_RXCAN2 = 24U;
 6902              		.loc 1 3401 0
 6903 0016 2B60     		str	r3, [r5]
3402:HANcoder_E407_CAN_COMM_TEST.c **** 
 6904              		.loc 1 3402 0
 6905 0018 2360     		str	r3, [r4]
 6906              	.LBB337:
 6907              	.LBB336:
 6908              		.loc 1 3417 0
 6909 001a FFF7FEFF 		bl	CanInit
 6910              	.LVL1094:
3418:HANcoder_E407_CAN_COMM_TEST.c **** 
3419:HANcoder_E407_CAN_COMM_TEST.c ****       /* initialize the CAN I/O module for channel 1 */
3420:HANcoder_E407_CAN_COMM_TEST.c ****       CanIoInit(0);
 6911              		.loc 1 3420 0
 6912 001e 0020     		movs	r0, #0
 6913 0020 FFF7FEFF 		bl	CanIoInit
 6914              	.LVL1095:
3421:HANcoder_E407_CAN_COMM_TEST.c **** 
3422:HANcoder_E407_CAN_COMM_TEST.c ****       /* initialize the CAN I/O module for channel 2 */
3423:HANcoder_E407_CAN_COMM_TEST.c ****       CanIoInit(1);
 6915              		.loc 1 3423 0
 6916 0024 0120     		movs	r0, #1
 6917 0026 FFF7FEFF 		bl	CanIoInit
 6918              	.LVL1096:
3424:HANcoder_E407_CAN_COMM_TEST.c **** 
3425:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S22>/Level-2 M-file S-Function' */
3426:HANcoder_E407_CAN_COMM_TEST.c **** 
3427:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the digital output */
3428:HANcoder_E407_CAN_COMM_TEST.c ****       DigoutConfigure(DIGOUT_PORTC_PIN13, DIGOUT_CFG_PUSHPULL);
 6919              		.loc 1 3428 0
 6920 002a 0121     		movs	r1, #1
 6921 002c 4720     		movs	r0, #71
 6922 002e FFF7FEFF 		bl	DigoutConfigure
 6923              	.LVL1097:
3429:HANcoder_E407_CAN_COMM_TEST.c **** 
3430:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S21>/Level-2 M-file S-Function' */
3431:HANcoder_E407_CAN_COMM_TEST.c **** 
3432:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the digital input */
3433:HANcoder_E407_CAN_COMM_TEST.c ****       DiginConfigure(DIGIN_PORTA_PIN0, DIGIN_CFG_PULLDOWN);
 6924              		.loc 1 3433 0
 6925 0032 0221     		movs	r1, #2
 6926 0034 4720     		movs	r0, #71
 6927 0036 FFF7FEFF 		bl	DiginConfigure
 6928              	.LVL1098:
3434:HANcoder_E407_CAN_COMM_TEST.c **** 
3435:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S7>/Level-2 M-file S-Function' */
3436:HANcoder_E407_CAN_COMM_TEST.c **** 
3437:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the digital input */
3438:HANcoder_E407_CAN_COMM_TEST.c ****       DiginConfigure(DIGIN_PORTE_PIN4, DIGIN_CFG_PULLDOWN);
 6929              		.loc 1 3438 0
 6930 003a 0221     		movs	r1, #2
 6931 003c 0920     		movs	r0, #9
 6932 003e FFF7FEFF 		bl	DiginConfigure
 6933              	.LVL1099:
3439:HANcoder_E407_CAN_COMM_TEST.c **** 
3440:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for Enabled SubSystem: '<S1>/Rx CAN' */
3441:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S23>/S-Function' */
3442:HANcoder_E407_CAN_COMM_TEST.c **** 
3443:HANcoder_E407_CAN_COMM_TEST.c ****       /* register a CAN storage buffer for the message with this ID */
3444:HANcoder_E407_CAN_COMM_TEST.c ****       CanIoCreateMessageReceivedStorage(0, constant_ID_RXCAN1);
 6934              		.loc 1 3444 0
 6935 0042 2968     		ldr	r1, [r5]
 6936 0044 0020     		movs	r0, #0
 6937 0046 FFF7FEFF 		bl	CanIoCreateMessageReceivedStorage
 6938              	.LVL1100:
3445:HANcoder_E407_CAN_COMM_TEST.c **** 
3446:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S24>/S-Function' */
3447:HANcoder_E407_CAN_COMM_TEST.c **** 
3448:HANcoder_E407_CAN_COMM_TEST.c ****       /* register a CAN storage buffer for the message with this ID */
3449:HANcoder_E407_CAN_COMM_TEST.c ****       CanIoCreateMessageReceivedStorage(1, constant_ID_RXCAN2);
 6939              		.loc 1 3449 0
 6940 004a 2168     		ldr	r1, [r4]
 6941 004c 0120     		movs	r0, #1
 6942 004e FFF7FEFF 		bl	CanIoCreateMessageReceivedStorage
 6943              	.LVL1101:
3450:HANcoder_E407_CAN_COMM_TEST.c **** 
3451:HANcoder_E407_CAN_COMM_TEST.c ****       /* End of Start for SubSystem: '<S1>/Rx CAN' */
3452:HANcoder_E407_CAN_COMM_TEST.c **** 
3453:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S6>/Level-2 M-file S-Function' */
3454:HANcoder_E407_CAN_COMM_TEST.c **** 
3455:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the digital input */
3456:HANcoder_E407_CAN_COMM_TEST.c ****       DiginConfigure(DIGIN_PORTE_PIN2, DIGIN_CFG_PULLDOWN);
 6944              		.loc 1 3456 0
 6945 0052 0221     		movs	r1, #2
 6946 0054 0820     		movs	r0, #8
 6947 0056 FFF7FEFF 		bl	DiginConfigure
 6948              	.LVL1102:
3457:HANcoder_E407_CAN_COMM_TEST.c **** 
3458:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S3>/Level-2 M-file S-Function' */
3459:HANcoder_E407_CAN_COMM_TEST.c **** 
3460:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the stack size for the task that executes the model */
3461:HANcoder_E407_CAN_COMM_TEST.c ****       AppCtrlTaskSetStackSize((configMINIMAL_STACK_SIZE*sizeof(portBASE_TYPE)) +
 6949              		.loc 1 3461 0
 6950 005a 4FF40070 		mov	r0, #512
 6951 005e FFF7FEFF 		bl	AppCtrlTaskSetStackSize
 6952              	.LVL1103:
3462:HANcoder_E407_CAN_COMM_TEST.c ****         0);
3463:HANcoder_E407_CAN_COMM_TEST.c **** 
3464:HANcoder_E407_CAN_COMM_TEST.c ****       /* configure the sample time of the model in microseconds */
3465:HANcoder_E407_CAN_COMM_TEST.c ****       AppCtrlTaskSetPeriod(10000);
 6953              		.loc 1 3465 0
 6954 0062 42F21070 		movw	r0, #10000
 6955 0066 FFF7FEFF 		bl	AppCtrlTaskSetPeriod
 6956              	.LVL1104:
3466:HANcoder_E407_CAN_COMM_TEST.c **** 
3467:HANcoder_E407_CAN_COMM_TEST.c ****       /* Run the ADC conversions ten times faster than the Simulink model */
3468:HANcoder_E407_CAN_COMM_TEST.c ****       ADCconversionTaskSetPeriod(10000/10);
 6957              		.loc 1 3468 0
 6958 006a 4FF47A70 		mov	r0, #1000
 6959 006e FFF7FEFF 		bl	ADCconversionTaskSetPeriod
 6960              	.LVL1105:
3469:HANcoder_E407_CAN_COMM_TEST.c **** 
3470:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S4>/Level-2 M-file S-Function' */
3471:HANcoder_E407_CAN_COMM_TEST.c **** 
3472:HANcoder_E407_CAN_COMM_TEST.c ****       /* store the CAN controller's filter configuration */
3473:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter1.mask = 0x00000000;
 6961              		.loc 1 3473 0
 6962 0072 0023     		movs	r3, #0
3474:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter1.code = 0x00000000;
3475:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter1.mode = CAN_FILTER_MODE_STDID_ONLY;
3476:HANcoder_E407_CAN_COMM_TEST.c **** 
3477:HANcoder_E407_CAN_COMM_TEST.c ****       /* connect and synchronize the CAN bus */
3478:HANcoder_E407_CAN_COMM_TEST.c ****       canResult1 = CanConnect(0, 125000, &canFilter1);
 6963              		.loc 1 3478 0
 6964 0074 1846     		mov	r0, r3
 6965 0076 6A46     		mov	r2, sp
 6966 0078 1849     		ldr	r1, .L462+16
3473:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter1.code = 0x00000000;
 6967              		.loc 1 3473 0
 6968 007a 0093     		str	r3, [sp]
3474:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter1.code = 0x00000000;
 6969              		.loc 1 3474 0
 6970 007c 0193     		str	r3, [sp, #4]
3475:HANcoder_E407_CAN_COMM_TEST.c **** 
 6971              		.loc 1 3475 0
 6972 007e 8DF80830 		strb	r3, [sp, #8]
 6973              		.loc 1 3478 0
 6974 0082 FFF7FEFF 		bl	CanConnect
 6975              	.LVL1106:
3479:HANcoder_E407_CAN_COMM_TEST.c ****       configASSERT(canResult1 == TRUE);
 6976              		.loc 1 3479 0
 6977 0086 0128     		cmp	r0, #1
 6978 0088 04D0     		beq	.L453
 6979              		.loc 1 3479 0 is_stmt 0 discriminator 1
 6980 008a 40F69751 		movw	r1, #3479
 6981 008e 1448     		ldr	r0, .L462+20
 6982              	.LVL1107:
 6983 0090 FFF7FEFF 		bl	AssertFailure
 6984              	.LVL1108:
 6985              	.L453:
3480:HANcoder_E407_CAN_COMM_TEST.c **** 
3481:HANcoder_E407_CAN_COMM_TEST.c ****       /* store the CAN controller's filter configuration */
3482:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter2.mask = 0x00000000;
 6986              		.loc 1 3482 0 is_stmt 1
 6987 0094 0023     		movs	r3, #0
3483:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter2.code = 0x00000000;
3484:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter2.mode = CAN_FILTER_MODE_STDID_ONLY;
3485:HANcoder_E407_CAN_COMM_TEST.c **** 
3486:HANcoder_E407_CAN_COMM_TEST.c ****       /* connect and synchronize the CAN bus */
3487:HANcoder_E407_CAN_COMM_TEST.c ****       canResult2 = CanConnect(1, 125000, &canFilter2);
 6988              		.loc 1 3487 0
 6989 0096 03AA     		add	r2, sp, #12
 6990 0098 1049     		ldr	r1, .L462+16
3482:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter2.code = 0x00000000;
 6991              		.loc 1 3482 0
 6992 009a 0393     		str	r3, [sp, #12]
 6993              		.loc 1 3487 0
 6994 009c 0120     		movs	r0, #1
3483:HANcoder_E407_CAN_COMM_TEST.c ****       canFilter2.code = 0x00000000;
 6995              		.loc 1 3483 0
 6996 009e 0493     		str	r3, [sp, #16]
3484:HANcoder_E407_CAN_COMM_TEST.c **** 
 6997              		.loc 1 3484 0
 6998 00a0 8DF81430 		strb	r3, [sp, #20]
 6999              		.loc 1 3487 0
 7000 00a4 FFF7FEFF 		bl	CanConnect
 7001              	.LVL1109:
3488:HANcoder_E407_CAN_COMM_TEST.c ****       configASSERT(canResult2 == TRUE);
 7002              		.loc 1 3488 0
 7003 00a8 0128     		cmp	r0, #1
 7004 00aa 04D0     		beq	.L454
 7005              		.loc 1 3488 0 is_stmt 0 discriminator 1
 7006 00ac 4FF45A61 		mov	r1, #3488
 7007 00b0 0B48     		ldr	r0, .L462+20
 7008              	.LVL1110:
 7009 00b2 FFF7FEFF 		bl	AssertFailure
 7010              	.LVL1111:
 7011              	.L454:
3489:HANcoder_E407_CAN_COMM_TEST.c **** 
3490:HANcoder_E407_CAN_COMM_TEST.c ****       /* Start for M-S-Function: '<S14>/Level-2 M-file S-Function' */
3491:HANcoder_E407_CAN_COMM_TEST.c **** 
3492:HANcoder_E407_CAN_COMM_TEST.c ****       /* initialize the measurement and calibration interface */
3493:HANcoder_E407_CAN_COMM_TEST.c ****       MacUsbComInit();
 7012              		.loc 1 3493 0 is_stmt 1
 7013 00b6 FFF7FEFF 		bl	MacUsbComInit
 7014              	.LVL1112:
3494:HANcoder_E407_CAN_COMM_TEST.c ****       MacInit();
 7015              		.loc 1 3494 0
 7016 00ba FFF7FEFF 		bl	MacInit
 7017              	.LVL1113:
 7018              	.LBE336:
3495:HANcoder_E407_CAN_COMM_TEST.c ****     }
3496:HANcoder_E407_CAN_COMM_TEST.c **** 
3497:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for Enabled SubSystem: '<S1>/Tx CAN' */
3498:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for Enabled SubSystem: '<S1>/Rx CAN' */
3499:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for DataTypeConversion: '<S10>/Cast' incorporates:
3500:HANcoder_E407_CAN_COMM_TEST.c ****      *  Constant: '<S10>/Constant'
3501:HANcoder_E407_CAN_COMM_TEST.c ****      *  DataTypeConversion: '<S10>/Cast1'
3502:HANcoder_E407_CAN_COMM_TEST.c ****      *  DataTypeConversion: '<S12>/Data Type Conversion3'
3503:HANcoder_E407_CAN_COMM_TEST.c ****      *  DataTypeConversion: '<S12>/Data Type Conversion4'
3504:HANcoder_E407_CAN_COMM_TEST.c ****      */
3505:HANcoder_E407_CAN_COMM_TEST.c ****     constant_ID_RXCAN1_tmp = (uint32_T)24.0;
3506:HANcoder_E407_CAN_COMM_TEST.c **** 
3507:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of ConstCode for SubSystem: '<S1>/Tx CAN' */
3508:HANcoder_E407_CAN_COMM_TEST.c ****     constant_ID_RXCAN1 = constant_ID_RXCAN1_tmp;
 7019              		.loc 1 3508 0
 7020 00be 1823     		movs	r3, #24
 7021 00c0 2B60     		str	r3, [r5]
3509:HANcoder_E407_CAN_COMM_TEST.c **** 
3510:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for DataTypeConversion: '<S10>/Cast1' */
3511:HANcoder_E407_CAN_COMM_TEST.c ****     constant_ID_RXCAN2 = constant_ID_RXCAN1_tmp;
 7022              		.loc 1 3511 0
 7023 00c2 2360     		str	r3, [r4]
3512:HANcoder_E407_CAN_COMM_TEST.c **** 
3513:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of ConstCode for SubSystem: '<S1>/Rx CAN' */
3514:HANcoder_E407_CAN_COMM_TEST.c **** 
3515:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for Enabled SubSystem: '<S1>/Tx CAN' */
3516:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for DataTypeConversion: '<S12>/Data Type Conversion3' */
3517:HANcoder_E407_CAN_COMM_TEST.c ****     constant_ID_TXCAN1 = constant_ID_RXCAN1_tmp;
 7024              		.loc 1 3517 0
 7025 00c4 3B60     		str	r3, [r7]
3518:HANcoder_E407_CAN_COMM_TEST.c **** 
3519:HANcoder_E407_CAN_COMM_TEST.c ****     /* ConstCode for DataTypeConversion: '<S12>/Data Type Conversion4' */
3520:HANcoder_E407_CAN_COMM_TEST.c ****     constant_ID_TXCAN2 = constant_ID_RXCAN1_tmp;
 7026              		.loc 1 3520 0
 7027 00c6 3360     		str	r3, [r6]
 7028              	.LBE337:
3521:HANcoder_E407_CAN_COMM_TEST.c **** 
3522:HANcoder_E407_CAN_COMM_TEST.c ****     /* End of ConstCode for SubSystem: '<S1>/Tx CAN' */
3523:HANcoder_E407_CAN_COMM_TEST.c ****   }
3524:HANcoder_E407_CAN_COMM_TEST.c **** }
 7029              		.loc 1 3524 0
 7030 00c8 07B0     		add	sp, sp, #28
 7031              		.cfi_def_cfa_offset 20
 7032              		@ sp needed
 7033 00ca F0BD     		pop	{r4, r5, r6, r7, pc}
 7034              	.L463:
 7035              		.align	2
 7036              	.L462:
 7037 00cc 00000000 		.word	constant_ID_RXCAN1
 7038 00d0 00000000 		.word	constant_ID_RXCAN2
 7039 00d4 00000000 		.word	constant_ID_TXCAN1
 7040 00d8 00000000 		.word	constant_ID_TXCAN2
 7041 00dc 48E80100 		.word	125000
 7042 00e0 0C000000 		.word	.LC1
 7043              		.cfi_endproc
 7044              	.LFE117:
 7046              		.global	rtM
 7047              		.comm	rtM_,3,4
 7048              		.comm	rtDWork,16,8
 7049              		.comm	rtB,49,4
 7050              		.global	HANtuneOverride
 7051              		.global	Rx_ID_CAN2
 7052              		.global	Rx_ID_CAN1
 7053              		.global	precision_CAN2
 7054              		.global	precision_CAN1
 7055              		.global	Tx_Min_CAN2
 7056              		.global	Tx_Min_CAN1
 7057              		.global	Tx_Max_CAN2
 7058              		.global	Tx_Max_CAN1
 7059              		.global	Tx_ID_CAN2
 7060              		.global	Tx_ID_CAN1
 7061              		.global	Tx_Buffer_8_CAN2
 7062              		.global	Tx_Buffer_8_CAN1
 7063              		.global	Tx_Buffer_7_CAN2
 7064              		.global	Tx_Buffer_7_CAN1
 7065              		.global	Tx_Buffer_6_CAN2
 7066              		.global	Tx_Buffer_6_CAN1
 7067              		.global	Tx_Buffer_5_CAN2
 7068              		.global	Tx_Buffer_5_CAN1
 7069              		.global	Tx_Buffer_4_CAN2
 7070              		.global	Tx_Buffer_4_CAN1
 7071              		.global	Tx_Buffer_3_CAN2
 7072              		.global	Tx_Buffer_3_CAN1
 7073              		.global	Tx_Buffer_2_CAN2
 7074              		.global	Tx_Buffer_2_CAN1
 7075              		.global	Tx_Buffer_1_CAN2
 7076              		.global	Tx_Buffer_1_CAN1
 7077              		.comm	OF1_CAN2,1,1
 7078              		.comm	OF8_CAN2,1,1
 7079              		.comm	OF7_CAN2,1,1
 7080              		.comm	OF6_CAN2,1,1
 7081              		.comm	OF5_CAN2,1,1
 7082              		.comm	OF4_CAN2,1,1
 7083              		.comm	OF3_CAN2,1,1
 7084              		.comm	OF2_CAN2,1,1
 7085              		.comm	OF1_CAN1,1,1
 7086              		.comm	OF2_CAN1,1,1
 7087              		.comm	OF3_CAN1,1,1
 7088              		.comm	OF8_CAN1,1,1
 7089              		.comm	OF7_CAN1,1,1
 7090              		.comm	OF4_CAN1,1,1
 7091              		.comm	OF6_CAN1,1,1
 7092              		.comm	OF5_CAN1,1,1
 7093              		.comm	LedValue,1,1
 7094              		.comm	sender_id,1,1
 7095              		.comm	receiver_id,1,1
 7096              		.comm	WKUP_button,1,1
 7097              		.comm	new_CAN2,1,1
 7098              		.comm	new_CAN1,1,1
 7099              		.comm	Rx_coded8_CAN1,1,1
 7100              		.comm	Rx_coded7_CAN1,1,1
 7101              		.comm	Rx_coded6_CAN1,1,1
 7102              		.comm	Rx_coded5_CAN1,1,1
 7103              		.comm	Rx_coded4_CAN1,1,1
 7104              		.comm	Rx_coded3_CAN1,1,1
 7105              		.comm	Rx_coded2_CAN1,1,1
 7106              		.comm	Rx_coded1_CAN1,1,1
 7107              		.comm	Rx_coded8_CAN2,1,1
 7108              		.comm	Rx_coded7_CAN2,1,1
 7109              		.comm	Rx_coded6_CAN2,1,1
 7110              		.comm	Rx_coded5_CAN2,1,1
 7111              		.comm	Rx_coded4_CAN2,1,1
 7112              		.comm	Rx_coded3_CAN2,1,1
 7113              		.comm	Rx_coded2_CAN2,1,1
 7114              		.comm	Rx_coded1_CAN2,1,1
 7115              		.comm	Tx_coded1_CAN2,1,1
 7116              		.comm	Tx_coded8_CAN2,1,1
 7117              		.comm	Tx_coded7_CAN2,1,1
 7118              		.comm	Tx_coded6_CAN2,1,1
 7119              		.comm	Tx_coded5_CAN2,1,1
 7120              		.comm	Tx_coded4_CAN2,1,1
 7121              		.comm	Tx_coded3_CAN2,1,1
 7122              		.comm	Tx_coded2_CAN2,1,1
 7123              		.comm	Tx_coded1_CAN1,1,1
 7124              		.comm	Tx_coded2_CAN1,1,1
 7125              		.comm	Tx_coded3_CAN1,1,1
 7126              		.comm	Tx_coded8_CAN1,1,1
 7127              		.comm	Tx_coded7_CAN1,1,1
 7128              		.comm	Tx_coded4_CAN1,1,1
 7129              		.comm	Tx_coded6_CAN1,1,1
 7130              		.comm	Tx_coded5_CAN1,1,1
 7131              		.comm	SI_CPUload,1,1
 7132              		.comm	Rx_ID_CAN1_s,4,4
 7133              		.comm	Rx_ID_CAN2_s,4,4
 7134              		.comm	constant_ID_RXCAN2,4,4
 7135              		.comm	constant_ID_RXCAN1,4,4
 7136              		.comm	Tx_ID_CAN2_s,4,4
 7137              		.comm	Tx_ID_CAN1_s,4,4
 7138              		.comm	constant_ID_TXCAN2,4,4
 7139              		.comm	constant_ID_TXCAN1,4,4
 7140              		.comm	SI_FreeStack,4,4
 7141              		.comm	SI_FreeHeap,4,4
 7142              		.comm	Rx_Buffer_6_CAN2,8,8
 7143              		.comm	Rx_Buffer_8_CAN2,8,8
 7144              		.comm	Rx_Buffer_1_CAN2,8,8
 7145              		.comm	Rx_Buffer_7_CAN2,8,8
 7146              		.comm	Rx_Buffer_2_CAN2,8,8
 7147              		.comm	Rx_Buffer_3_CAN2,8,8
 7148              		.comm	Rx_Buffer_4_CAN2,8,8
 7149              		.comm	Rx_Buffer_5_CAN2,8,8
 7150              		.comm	Rx_Buffer_7_CAN1,8,8
 7151              		.comm	Rx_Buffer_6_CAN1,8,8
 7152              		.comm	Rx_Buffer_5_CAN1,8,8
 7153              		.comm	Rx_Buffer_4_CAN1,8,8
 7154              		.comm	Rx_Buffer_3_CAN1,8,8
 7155              		.comm	Rx_Buffer_2_CAN1,8,8
 7156              		.comm	Rx_Buffer_8_CAN1,8,8
 7157              		.comm	Rx_Buffer_1_CAN1,8,8
 7158              		.section	.data.Tx_Min_CAN2,"aw",%progbits
 7159              		.align	3
 7160              		.set	.LANCHOR18,. + 0
 7163              	Tx_Min_CAN2:
 7164 0000 00000000 		.space	8
 7164      00000000 
 7165              		.section	.data.Tx_Buffer_4_CAN1,"aw",%progbits
 7166              		.align	3
 7167              		.set	.LANCHOR10,. + 0
 7170              	Tx_Buffer_4_CAN1:
 7171 0000 00000000 		.space	8
 7171      00000000 
 7172              		.section	.data.Tx_Max_CAN1,"aw",%progbits
 7173              		.align	3
 7174              		.set	.LANCHOR6,. + 0
 7177              	Tx_Max_CAN1:
 7178 0000 00000000 		.space	8
 7178      00000000 
 7179              		.section	.data.Tx_Max_CAN2,"aw",%progbits
 7180              		.align	3
 7181              		.set	.LANCHOR16,. + 0
 7184              	Tx_Max_CAN2:
 7185 0000 00000000 		.space	8
 7185      00000000 
 7186              		.section	.data.Rx_ID_CAN1,"aw",%progbits
 7187              		.align	2
 7188              		.set	.LANCHOR5,. + 0
 7191              	Rx_ID_CAN1:
 7192 0000 00000000 		.space	4
 7193              		.section	.data.Rx_ID_CAN2,"aw",%progbits
 7194              		.align	2
 7195              		.set	.LANCHOR4,. + 0
 7198              	Rx_ID_CAN2:
 7199 0000 00000000 		.space	4
 7200              		.section	.data.HANtuneOverride,"aw",%progbits
 7201              		.set	.LANCHOR29,. + 0
 7204              	HANtuneOverride:
 7205 0000 00       		.space	1
 7206              		.section	.data.Tx_Buffer_7_CAN1,"aw",%progbits
 7207              		.align	3
 7208              		.set	.LANCHOR11,. + 0
 7211              	Tx_Buffer_7_CAN1:
 7212 0000 00000000 		.space	8
 7212      00000000 
 7213              		.section	.data.Tx_Buffer_5_CAN1,"aw",%progbits
 7214              		.align	3
 7215              		.set	.LANCHOR7,. + 0
 7218              	Tx_Buffer_5_CAN1:
 7219 0000 00000000 		.space	8
 7219      00000000 
 7220              		.section	.data.Tx_Buffer_5_CAN2,"aw",%progbits
 7221              		.align	3
 7222              		.set	.LANCHOR21,. + 0
 7225              	Tx_Buffer_5_CAN2:
 7226 0000 00000000 		.space	8
 7226      00000000 
 7227              		.section	.data.Tx_Buffer_7_CAN2,"aw",%progbits
 7228              		.align	3
 7229              		.set	.LANCHOR23,. + 0
 7232              	Tx_Buffer_7_CAN2:
 7233 0000 00000000 		.space	8
 7233      00000000 
 7234              		.section	.data.Tx_Buffer_1_CAN2,"aw",%progbits
 7235              		.align	3
 7236              		.set	.LANCHOR25,. + 0
 7239              	Tx_Buffer_1_CAN2:
 7240 0000 00000000 		.space	8
 7240      00000000 
 7241              		.section	.bss.canRxData_1_constant_ID_RXCAN2,"aw",%nobits
 7242              		.align	2
 7243              		.set	.LANCHOR2,. + 0
 7246              	canRxData_1_constant_ID_RXCAN2:
 7247 0000 00000000 		.space	8
 7247      00000000 
 7248              		.section	.rodata.str1.4,"aMS",%progbits,1
 7249              		.align	2
 7250              	.LC0:
 7251 0000 41707043 		.ascii	"AppCtrlTask\000"
 7251      74726C54 
 7251      61736B00 
 7252              	.LC1:
 7253 000c 48414E63 		.ascii	"HANcoder_E407_CAN_COMM_TEST.c\000"
 7253      6F646572 
 7253      5F453430 
 7253      375F4341 
 7253      4E5F434F 
 7254              		.section	.data.Tx_ID_CAN1,"aw",%progbits
 7255              		.align	3
 7256              		.set	.LANCHOR26,. + 0
 7259              	Tx_ID_CAN1:
 7260 0000 00000000 		.space	8
 7260      00000000 
 7261              		.section	.bss.canRxData_0_constant_ID_RXCAN1,"aw",%nobits
 7262              		.align	2
 7263              		.set	.LANCHOR0,. + 0
 7266              	canRxData_0_constant_ID_RXCAN1:
 7267 0000 00000000 		.space	8
 7267      00000000 
 7268              		.section	.data.Tx_Buffer_3_CAN1,"aw",%progbits
 7269              		.align	3
 7270              		.set	.LANCHOR13,. + 0
 7273              	Tx_Buffer_3_CAN1:
 7274 0000 00000000 		.space	8
 7274      00000000 
 7275              		.section	.data.Tx_ID_CAN2,"aw",%progbits
 7276              		.align	3
 7277              		.set	.LANCHOR27,. + 0
 7280              	Tx_ID_CAN2:
 7281 0000 00000000 		.space	8
 7281      00000000 
 7282              		.section	.data.Tx_Buffer_3_CAN2,"aw",%progbits
 7283              		.align	3
 7284              		.set	.LANCHOR19,. + 0
 7287              	Tx_Buffer_3_CAN2:
 7288 0000 00000000 		.space	8
 7288      00000000 
 7289              		.section	.data.Tx_Buffer_8_CAN2,"aw",%progbits
 7290              		.align	3
 7291              		.set	.LANCHOR24,. + 0
 7294              	Tx_Buffer_8_CAN2:
 7295 0000 00000000 		.space	8
 7295      00000000 
 7296              		.section	.data.precision_CAN1,"aw",%progbits
 7297              		.align	3
 7298              		.set	.LANCHOR1,. + 0
 7301              	precision_CAN1:
 7302 0000 00000000 		.space	8
 7302      00000000 
 7303              		.section	.data.precision_CAN2,"aw",%progbits
 7304              		.align	3
 7305              		.set	.LANCHOR3,. + 0
 7308              	precision_CAN2:
 7309 0000 00000000 		.space	8
 7309      00000000 
 7310              		.section	.data.Tx_Buffer_6_CAN2,"aw",%progbits
 7311              		.align	3
 7312              		.set	.LANCHOR22,. + 0
 7315              	Tx_Buffer_6_CAN2:
 7316 0000 00000000 		.space	8
 7316      00000000 
 7317              		.section	.data.Tx_Buffer_6_CAN1,"aw",%progbits
 7318              		.align	3
 7319              		.set	.LANCHOR9,. + 0
 7322              	Tx_Buffer_6_CAN1:
 7323 0000 00000000 		.space	8
 7323      00000000 
 7324              		.section	.data.Tx_Buffer_8_CAN1,"aw",%progbits
 7325              		.align	3
 7326              		.set	.LANCHOR12,. + 0
 7329              	Tx_Buffer_8_CAN1:
 7330 0000 00000000 		.space	8
 7330      00000000 
 7331              		.section	.data.Tx_Buffer_2_CAN1,"aw",%progbits
 7332              		.align	3
 7333              		.set	.LANCHOR14,. + 0
 7336              	Tx_Buffer_2_CAN1:
 7337 0000 00000000 		.space	8
 7337      00000000 
 7338              		.section	.data.Tx_Buffer_2_CAN2,"aw",%progbits
 7339              		.align	3
 7340              		.set	.LANCHOR17,. + 0
 7343              	Tx_Buffer_2_CAN2:
 7344 0000 00000000 		.space	8
 7344      00000000 
 7345              		.section	.data.Tx_Buffer_4_CAN2,"aw",%progbits
 7346              		.align	3
 7347              		.set	.LANCHOR20,. + 0
 7350              	Tx_Buffer_4_CAN2:
 7351 0000 00000000 		.space	8
 7351      00000000 
 7352              		.section	.bss.canTxData,"aw",%nobits
 7353              		.align	2
 7354              		.set	.LANCHOR28,. + 0
 7357              	canTxData:
 7358 0000 00000000 		.space	8
 7358      00000000 
 7359              		.section	.rodata.rtM,"a",%progbits
 7360              		.align	2
 7363              	rtM:
 7364 0000 00000000 		.word	rtM_
 7365              		.section	.data.Tx_Buffer_1_CAN1,"aw",%progbits
 7366              		.align	3
 7367              		.set	.LANCHOR15,. + 0
 7370              	Tx_Buffer_1_CAN1:
 7371 0000 00000000 		.space	8
 7371      00000000 
 7372              		.section	.data.Tx_Min_CAN1,"aw",%progbits
 7373              		.align	3
 7374              		.set	.LANCHOR8,. + 0
 7377              	Tx_Min_CAN1:
 7378 0000 00000000 		.space	8
 7378      00000000 
 7379              		.text
 7380              	.Letext0:
 7381              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\lib\\gcc\\arm-none-eabi\\5.4
 7382              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mach
 7383              		.file 4 "rtwtypes.h"
 7384              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\sys\
 7385              		.file 6 "../blockset/rtw/STM32/inc/STM32_E407/can.h"
 7386              		.file 7 "../blockset/rtw/STM32/inc/STM32_E407/digout.h"
 7387              		.file 8 "../blockset/rtw/STM32/inc/STM32_E407/digin.h"
 7388              		.file 9 "HANcoder_E407_CAN_COMM_TEST_types.h"
 7389              		.file 10 "HANcoder_E407_CAN_COMM_TEST.h"
 7390              		.file 11 "../blockset/rtw/STM32/inc/STM32_E407/core_cm4.h"
 7391              		.file 12 "../blockset/rtw/STM32/inc/os.h"
 7392              		.file 13 "../blockset/rtw/STM32/inc/STM32_E407/canio.h"
 7393              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q2\\arm-none-eabi\\include\\mat
 7394              		.file 15 "../blockset/rtw/STM32/inc/app.h"
 7395              		.file 16 "../blockset/rtw/STM32/inc/STM32_E407/anin.h"
 7396              		.file 17 "../blockset/rtw/STM32/inc/STM32_E407/FreeRTOSConfig.h"
 7397              		.file 18 "../blockset/rtw/STM32/inc/STM32_E407/mac.h"
DEFINED SYMBOLS
                            *ABS*:00000000 HANcoder_E407_CAN_COMM_TEST.c
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:21     .text.ByteSwap_x:00000000 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:26     .text.ByteSwap_x:00000000 ByteSwap_x
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:94     .text.BitShift:00000000 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:99     .text.BitShift:00000000 BitShift
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:116    .text.BitShift1:00000000 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:121    .text.BitShift1:00000000 BitShift1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:146    .text.HANcoder_E407_CAN_COMM_TEST_step:00000000 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:151    .text.HANcoder_E407_CAN_COMM_TEST_step:00000000 HANcoder_E407_CAN_COMM_TEST_step
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:332    .text.HANcoder_E407_CAN_COMM_TEST_step:000000b8 $d
                            *COM*:00000001 SI_CPUload
                            *COM*:00000004 SI_FreeHeap
                            *COM*:00000004 SI_FreeStack
                            *COM*:00000001 LedValue
                            *COM*:00000010 rtDWork
                            *COM*:00000003 rtM_
                            *COM*:00000031 rtB
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:342    .text.HANcoder_E407_CAN_COMM_TEST_step:000000d8 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:958    .text.HANcoder_E407_CAN_COMM_TEST_step:000003e8 $d
                            *COM*:00000001 WKUP_button
                            *COM*:00000001 receiver_id
                            *COM*:00000004 constant_ID_RXCAN1
                            *COM*:00000001 new_CAN1
                            *COM*:00000001 Rx_coded7_CAN1
                            *COM*:00000001 Rx_coded2_CAN1
                            *COM*:00000001 Rx_coded8_CAN1
                            *COM*:00000001 Rx_coded3_CAN1
                            *COM*:00000001 Rx_coded4_CAN1
                            *COM*:00000001 Rx_coded5_CAN1
                            *COM*:00000001 Rx_coded6_CAN1
                            *COM*:00000008 Rx_Buffer_1_CAN1
                            *COM*:00000008 Rx_Buffer_8_CAN1
                            *COM*:00000008 Rx_Buffer_2_CAN1
                            *COM*:00000001 Rx_coded1_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:983    .text.HANcoder_E407_CAN_COMM_TEST_step:0000043c $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:1728   .text.HANcoder_E407_CAN_COMM_TEST_step:000007d0 $d
                            *COM*:00000008 Rx_Buffer_3_CAN1
                            *COM*:00000008 Rx_Buffer_4_CAN1
                            *COM*:00000008 Rx_Buffer_5_CAN1
                            *COM*:00000008 Rx_Buffer_6_CAN1
                            *COM*:00000008 Rx_Buffer_7_CAN1
                            *COM*:00000004 constant_ID_RXCAN2
                            *COM*:00000001 new_CAN2
                            *COM*:00000001 Rx_coded7_CAN2
                            *COM*:00000001 Rx_coded1_CAN2
                            *COM*:00000001 Rx_coded8_CAN2
                            *COM*:00000001 Rx_coded2_CAN2
                            *COM*:00000001 Rx_coded3_CAN2
                            *COM*:00000001 Rx_coded4_CAN2
                            *COM*:00000001 Rx_coded6_CAN2
                            *COM*:00000001 Rx_coded5_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:1747   .text.HANcoder_E407_CAN_COMM_TEST_step:00000814 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:2380   .text.HANcoder_E407_CAN_COMM_TEST_step:00000b58 $d
                            *COM*:00000008 Rx_Buffer_5_CAN2
                            *COM*:00000008 Rx_Buffer_4_CAN2
                            *COM*:00000008 Rx_Buffer_3_CAN2
                            *COM*:00000008 Rx_Buffer_2_CAN2
                            *COM*:00000008 Rx_Buffer_7_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:2390   .text.HANcoder_E407_CAN_COMM_TEST_step:00000b74 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:3030   .text.HANcoder_E407_CAN_COMM_TEST_step:00000edc $d
                            *COM*:00000008 Rx_Buffer_1_CAN2
                            *COM*:00000008 Rx_Buffer_8_CAN2
                            *COM*:00000008 Rx_Buffer_6_CAN2
                            *COM*:00000004 Rx_ID_CAN2_s
                            *COM*:00000004 Rx_ID_CAN1_s
                            *COM*:00000001 sender_id
                            *COM*:00000001 OF5_CAN1
                            *COM*:00000001 Tx_coded5_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:3052   .text.HANcoder_E407_CAN_COMM_TEST_step:00000f24 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:3632   .text.HANcoder_E407_CAN_COMM_TEST_step:000012d4 $d
                            *COM*:00000001 OF6_CAN1
                            *COM*:00000001 Tx_coded6_CAN1
                            *COM*:00000001 OF4_CAN1
                            *COM*:00000001 Tx_coded4_CAN1
                            *COM*:00000001 OF7_CAN1
                            *COM*:00000001 Tx_coded7_CAN1
                            *COM*:00000001 OF8_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:3645   .text.HANcoder_E407_CAN_COMM_TEST_step:00001304 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:4151   .text.HANcoder_E407_CAN_COMM_TEST_step:00001640 $d
                            *COM*:00000001 Tx_coded8_CAN1
                            *COM*:00000001 OF3_CAN1
                            *COM*:00000001 Tx_coded3_CAN1
                            *COM*:00000001 OF2_CAN1
                            *COM*:00000001 Tx_coded2_CAN1
                            *COM*:00000001 OF1_CAN1
                            *COM*:00000001 Tx_coded1_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:4169   .text.HANcoder_E407_CAN_COMM_TEST_step:00001678 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:4650   .text.HANcoder_E407_CAN_COMM_TEST_step:00001980 $d
                            *COM*:00000001 OF2_CAN2
                            *COM*:00000001 Tx_coded2_CAN2
                            *COM*:00000001 OF3_CAN2
                            *COM*:00000001 Tx_coded3_CAN2
                            *COM*:00000001 OF4_CAN2
                            *COM*:00000001 Tx_coded4_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:4667   .text.HANcoder_E407_CAN_COMM_TEST_step:000019b4 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:5251   .text.HANcoder_E407_CAN_COMM_TEST_step:00001d64 $d
                            *COM*:00000001 OF5_CAN2
                            *COM*:00000001 Tx_coded5_CAN2
                            *COM*:00000001 OF6_CAN2
                            *COM*:00000001 Tx_coded6_CAN2
                            *COM*:00000001 OF7_CAN2
                            *COM*:00000001 Tx_coded7_CAN2
                            *COM*:00000001 OF8_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:5264   .text.HANcoder_E407_CAN_COMM_TEST_step:00001d94 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:5766   .text.HANcoder_E407_CAN_COMM_TEST_step:0000206c $d
                            *COM*:00000001 Tx_coded8_CAN2
                            *COM*:00000001 Tx_coded1_CAN2
                            *COM*:00000004 Tx_ID_CAN1_s
                            *COM*:00000004 Tx_ID_CAN2_s
                            *COM*:00000004 constant_ID_TXCAN1
                            *COM*:00000004 constant_ID_TXCAN2
                            *COM*:00000001 OF1_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:5805   .text.HANcoder_E407_CAN_COMM_TEST_step:000020f4 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:6335   .text.HANcoder_E407_CAN_COMM_TEST_step:00002424 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:6349   .text.HANcoder_E407_CAN_COMM_TEST_step:00002450 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:6834   .text.HANcoder_E407_CAN_COMM_TEST_step:00002728 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:6860   .text.HANcoder_E407_CAN_COMM_TEST_initialize:00000000 $t
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:6865   .text.HANcoder_E407_CAN_COMM_TEST_initialize:00000000 HANcoder_E407_CAN_COMM_TEST_initialize
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7037   .text.HANcoder_E407_CAN_COMM_TEST_initialize:000000cc $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7363   .rodata.rtM:00000000 rtM
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7204   .data.HANtuneOverride:00000000 HANtuneOverride
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7198   .data.Rx_ID_CAN2:00000000 Rx_ID_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7191   .data.Rx_ID_CAN1:00000000 Rx_ID_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7308   .data.precision_CAN2:00000000 precision_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7301   .data.precision_CAN1:00000000 precision_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7163   .data.Tx_Min_CAN2:00000000 Tx_Min_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7377   .data.Tx_Min_CAN1:00000000 Tx_Min_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7184   .data.Tx_Max_CAN2:00000000 Tx_Max_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7177   .data.Tx_Max_CAN1:00000000 Tx_Max_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7280   .data.Tx_ID_CAN2:00000000 Tx_ID_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7259   .data.Tx_ID_CAN1:00000000 Tx_ID_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7294   .data.Tx_Buffer_8_CAN2:00000000 Tx_Buffer_8_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7329   .data.Tx_Buffer_8_CAN1:00000000 Tx_Buffer_8_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7232   .data.Tx_Buffer_7_CAN2:00000000 Tx_Buffer_7_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7211   .data.Tx_Buffer_7_CAN1:00000000 Tx_Buffer_7_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7315   .data.Tx_Buffer_6_CAN2:00000000 Tx_Buffer_6_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7322   .data.Tx_Buffer_6_CAN1:00000000 Tx_Buffer_6_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7225   .data.Tx_Buffer_5_CAN2:00000000 Tx_Buffer_5_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7218   .data.Tx_Buffer_5_CAN1:00000000 Tx_Buffer_5_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7350   .data.Tx_Buffer_4_CAN2:00000000 Tx_Buffer_4_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7170   .data.Tx_Buffer_4_CAN1:00000000 Tx_Buffer_4_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7287   .data.Tx_Buffer_3_CAN2:00000000 Tx_Buffer_3_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7273   .data.Tx_Buffer_3_CAN1:00000000 Tx_Buffer_3_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7343   .data.Tx_Buffer_2_CAN2:00000000 Tx_Buffer_2_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7336   .data.Tx_Buffer_2_CAN1:00000000 Tx_Buffer_2_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7239   .data.Tx_Buffer_1_CAN2:00000000 Tx_Buffer_1_CAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7370   .data.Tx_Buffer_1_CAN1:00000000 Tx_Buffer_1_CAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7159   .data.Tx_Min_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7166   .data.Tx_Buffer_4_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7173   .data.Tx_Max_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7180   .data.Tx_Max_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7187   .data.Rx_ID_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7194   .data.Rx_ID_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7205   .data.HANtuneOverride:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7207   .data.Tx_Buffer_7_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7214   .data.Tx_Buffer_5_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7221   .data.Tx_Buffer_5_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7228   .data.Tx_Buffer_7_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7235   .data.Tx_Buffer_1_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7242   .bss.canRxData_1_constant_ID_RXCAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7246   .bss.canRxData_1_constant_ID_RXCAN2:00000000 canRxData_1_constant_ID_RXCAN2
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7249   .rodata.str1.4:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7255   .data.Tx_ID_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7262   .bss.canRxData_0_constant_ID_RXCAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7266   .bss.canRxData_0_constant_ID_RXCAN1:00000000 canRxData_0_constant_ID_RXCAN1
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7269   .data.Tx_Buffer_3_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7276   .data.Tx_ID_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7283   .data.Tx_Buffer_3_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7290   .data.Tx_Buffer_8_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7297   .data.precision_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7304   .data.precision_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7311   .data.Tx_Buffer_6_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7318   .data.Tx_Buffer_6_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7325   .data.Tx_Buffer_8_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7332   .data.Tx_Buffer_2_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7339   .data.Tx_Buffer_2_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7346   .data.Tx_Buffer_4_CAN2:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7353   .bss.canTxData:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7357   .bss.canTxData:00000000 canTxData
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7360   .rodata.rtM:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7366   .data.Tx_Buffer_1_CAN1:00000000 $d
C:\Users\Diego\AppData\Local\Temp\ccCCbHZg.s:7373   .data.Tx_Min_CAN1:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_ddiv
__aeabi_dcmplt
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmpge
__aeabi_d2uiz
OsGetCpuLoad
OsGetFreeHeapSize
OsGetTaskFreeStackSize
DigoutSet
DiginGet
CanIoGetMessage
pow
floor
CanTransmit
ceil
CanInit
CanIoInit
DigoutConfigure
DiginConfigure
CanIoCreateMessageReceivedStorage
AppCtrlTaskSetStackSize
AppCtrlTaskSetPeriod
ADCconversionTaskSetPeriod
CanConnect
AssertFailure
MacUsbComInit
MacInit
